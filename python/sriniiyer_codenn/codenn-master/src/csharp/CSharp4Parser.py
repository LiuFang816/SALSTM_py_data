# Generated from ./CSharp4.g4 by ANTLR 4.5.2
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"\u00a5\u0f45\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4")
        buf.write(u"[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\t")
        buf.write(u"c\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l")
        buf.write(u"\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4")
        buf.write(u"u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}")
        buf.write(u"\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4")
        buf.write(u"\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085")
        buf.write(u"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088")
        buf.write(u"\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c")
        buf.write(u"\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f\t\u008f")
        buf.write(u"\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093")
        buf.write(u"\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096")
        buf.write(u"\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a")
        buf.write(u"\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c\4\u009d\t\u009d")
        buf.write(u"\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1")
        buf.write(u"\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4")
        buf.write(u"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8")
        buf.write(u"\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab")
        buf.write(u"\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae\4\u00af")
        buf.write(u"\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2")
        buf.write(u"\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6")
        buf.write(u"\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9")
        buf.write(u"\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc\t\u00bc\4\u00bd")
        buf.write(u"\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf\4\u00c0\t\u00c0")
        buf.write(u"\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4")
        buf.write(u"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7")
        buf.write(u"\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb")
        buf.write(u"\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd\4\u00ce\t\u00ce")
        buf.write(u"\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1\4\u00d2")
        buf.write(u"\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5")
        buf.write(u"\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9")
        buf.write(u"\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db\4\u00dc\t\u00dc")
        buf.write(u"\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df\t\u00df\4\u00e0")
        buf.write(u"\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3")
        buf.write(u"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7")
        buf.write(u"\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea")
        buf.write(u"\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed\t\u00ed\4\u00ee")
        buf.write(u"\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1\t\u00f1")
        buf.write(u"\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5")
        buf.write(u"\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8")
        buf.write(u"\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb\t\u00fb\4\u00fc")
        buf.write(u"\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe\4\u00ff\t\u00ff")
        buf.write(u"\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103")
        buf.write(u"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106")
        buf.write(u"\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a")
        buf.write(u"\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c\4\u010d\t\u010d")
        buf.write(u"\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110\4\u0111")
        buf.write(u"\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114")
        buf.write(u"\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118")
        buf.write(u"\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a\4\u011b\t\u011b")
        buf.write(u"\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e\t\u011e\4\u011f")
        buf.write(u"\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122")
        buf.write(u"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126")
        buf.write(u"\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129")
        buf.write(u"\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c\t\u012c\4\u012d")
        buf.write(u"\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130\t\u0130")
        buf.write(u"\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134")
        buf.write(u"\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137")
        buf.write(u"\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a\t\u013a\4\u013b")
        buf.write(u"\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d\4\u013e\t\u013e")
        buf.write(u"\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142")
        buf.write(u"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145")
        buf.write(u"\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149")
        buf.write(u"\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b\4\u014c\t\u014c")
        buf.write(u"\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f\4\u0150")
        buf.write(u"\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153")
        buf.write(u"\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157")
        buf.write(u"\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159\4\u015a\t\u015a")
        buf.write(u"\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d\t\u015d\4\u015e")
        buf.write(u"\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161")
        buf.write(u"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165")
        buf.write(u"\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168")
        buf.write(u"\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b\t\u016b\4\u016c")
        buf.write(u"\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f\t\u016f")
        buf.write(u"\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173")
        buf.write(u"\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176")
        buf.write(u"\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179\t\u0179\4\u017a")
        buf.write(u"\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c\4\u017d\t\u017d")
        buf.write(u"\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181")
        buf.write(u"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184")
        buf.write(u"\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188")
        buf.write(u"\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a\4\u018b\t\u018b")
        buf.write(u"\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e\4\u018f")
        buf.write(u"\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192")
        buf.write(u"\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196")
        buf.write(u"\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198\3\2\3\2\3\3")
        buf.write(u"\3\3\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u033b\n\5\3\5\3\5\3")
        buf.write(u"\5\3\5\7\5\u0341\n\5\f\5\16\5\u0344\13\5\3\6\3\6\5\6")
        buf.write(u"\u0348\n\6\3\7\3\7\3\7\3\7\7\7\u034e\n\7\f\7\16\7\u0351")
        buf.write(u"\13\7\3\b\3\b\3\b\3\b\5\b\u0357\n\b\3\t\3\t\5\t\u035b")
        buf.write(u"\n\t\3\n\3\n\3\n\5\n\u0360\n\n\3\13\3\13\3\f\3\f\3\r")
        buf.write(u"\3\r\3\r\3\16\3\16\3\16\7\16\u036c\n\16\f\16\16\16\u036f")
        buf.write(u"\13\16\3\17\3\17\7\17\u0373\n\17\f\17\16\17\u0376\13")
        buf.write(u"\17\3\17\7\17\u0379\n\17\f\17\16\17\u037c\13\17\3\17")
        buf.write(u"\7\17\u037f\n\17\f\17\16\17\u0382\13\17\3\17\3\17\3\17")
        buf.write(u"\3\17\7\17\u0388\n\17\f\17\16\17\u038b\13\17\3\17\7\17")
        buf.write(u"\u038e\n\17\f\17\16\17\u0391\13\17\3\17\3\17\3\17\7\17")
        buf.write(u"\u0396\n\17\f\17\16\17\u0399\13\17\3\17\7\17\u039c\n")
        buf.write(u"\17\f\17\16\17\u039f\13\17\3\17\7\17\u03a2\n\17\f\17")
        buf.write(u"\16\17\u03a5\13\17\3\17\5\17\u03a8\n\17\3\20\3\20\3\20")
        buf.write(u"\3\20\5\20\u03ae\n\20\3\21\3\21\3\22\3\22\3\23\3\23\3")
        buf.write(u"\23\3\23\3\24\3\24\3\24\7\24\u03bb\n\24\f\24\16\24\u03be")
        buf.write(u"\13\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\30\7")
        buf.write(u"\30\u03c9\n\30\f\30\16\30\u03cc\13\30\3\31\5\31\u03cf")
        buf.write(u"\n\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3")
        buf.write(u"\33\5\33\u03db\n\33\3\34\3\34\7\34\u03df\n\34\f\34\16")
        buf.write(u"\34\u03e2\13\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u03ea")
        buf.write(u"\n\34\3\34\7\34\u03ed\n\34\f\34\16\34\u03f0\13\34\7\34")
        buf.write(u"\u03f2\n\34\f\34\16\34\u03f5\13\34\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write(u"\35\5\35\u0406\n\35\3\35\5\35\u0409\n\35\3\35\3\35\3")
        buf.write(u"\35\5\35\u040e\n\35\3\35\3\35\3\35\3\35\5\35\u0414\n")
        buf.write(u"\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u041c\n\35\3\36")
        buf.write(u"\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3\"")
        buf.write(u"\3\"\3#\3#\3#\7#\u0430\n#\f#\16#\u0433\13#\3$\3$\3%\3")
        buf.write(u"%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0441\n%\3&\3&\3&\3&\5&")
        buf.write(u"\u0447\n&\3&\3&\5&\u044b\n&\3&\5&\u044e\n&\3\'\3\'\5")
        buf.write(u"\'\u0452\n\'\3(\3(\3(\3(\3(\5(\u0459\n(\3(\3(\5(\u045d")
        buf.write(u"\n(\3)\3)\3)\7)\u0462\n)\f)\16)\u0465\13)\3*\3*\3*\3")
        buf.write(u"*\3+\3+\5+\u046d\n+\3,\3,\3,\5,\u0472\n,\3,\3,\3-\3-")
        buf.write(u"\3-\7-\u0479\n-\f-\16-\u047c\13-\3.\3.\3.\3.\3.\5.\u0483")
        buf.write(u"\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u048e\n/\3/\5/\u0491")
        buf.write(u"\n/\3/\3/\3/\5/\u0496\n/\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write(u"\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\5\62\u04a6\n")
        buf.write(u"\62\3\62\3\62\5\62\u04aa\n\62\3\63\3\63\3\63\7\63\u04af")
        buf.write(u"\n\63\f\63\16\63\u04b2\13\63\3\64\3\64\3\64\3\64\3\64")
        buf.write(u"\5\64\u04b9\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write(u"\65\3\65\3\65\5\65\u04c5\n\65\3\66\3\66\5\66\u04c9\n")
        buf.write(u"\66\3\66\3\66\3\66\5\66\u04ce\n\66\5\66\u04d0\n\66\3")
        buf.write(u"\66\3\66\3\66\5\66\u04d5\n\66\7\66\u04d7\n\66\f\66\16")
        buf.write(u"\66\u04da\13\66\3\67\3\67\5\67\u04de\n\67\3\67\3\67\3")
        buf.write(u"8\38\78\u04e4\n8\f8\168\u04e7\138\39\39\39\39\39\3:\3")
        buf.write(u":\3:\3:\3:\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\3<\3<\3<")
        buf.write(u"\3<\3<\3<\3<\5<\u0505\n<\3=\3=\3=\3=\3=\3>\3>\3>\3>\3")
        buf.write(u">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>")
        buf.write(u"\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(u">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>")
        buf.write(u"\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(u">\3>\3>\5>\u0559\n>\3?\3?\3?\3@\3@\3@\3A\3A\3A\3A\3A")
        buf.write(u"\3B\3B\3B\3B\3B\3B\3B\7B\u056d\nB\fB\16B\u0570\13B\3")
        buf.write(u"C\3C\3C\3C\3C\7C\u0577\nC\fC\16C\u057a\13C\3D\3D\3D\3")
        buf.write(u"D\3D\3D\7D\u0582\nD\fD\16D\u0585\13D\3E\3E\3E\3E\3E\3")
        buf.write(u"E\3E\3E\3E\3E\3E\3E\3E\7E\u0594\nE\fE\16E\u0597\13E\3")
        buf.write(u"F\3F\3F\3F\3F\7F\u059e\nF\fF\16F\u05a1\13F\3F\3F\3F\3")
        buf.write(u"G\3G\3H\3H\5H\u05aa\nH\3I\3I\3J\3J\3J\3J\3J\7J\u05b3")
        buf.write(u"\nJ\fJ\16J\u05b6\13J\3K\3K\3K\7K\u05bb\nK\fK\16K\u05be")
        buf.write(u"\13K\3L\3L\3L\7L\u05c3\nL\fL\16L\u05c6\13L\3M\3M\3M\7")
        buf.write(u"M\u05cb\nM\fM\16M\u05ce\13M\3N\3N\3N\7N\u05d3\nN\fN\16")
        buf.write(u"N\u05d6\13N\3O\3O\3O\7O\u05db\nO\fO\16O\u05de\13O\3P")
        buf.write(u"\3P\3P\5P\u05e3\nP\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u05eb\nQ\3R\3")
        buf.write(u"R\3R\3R\3S\3S\5S\u05f3\nS\3S\3S\3T\3T\3T\3T\3T\3T\3T")
        buf.write(u"\3T\3T\3T\3T\5T\u0602\nT\3U\3U\5U\u0606\nU\3U\3U\3V\3")
        buf.write(u"V\3V\7V\u060d\nV\fV\16V\u0610\13V\3W\5W\u0613\nW\3W\3")
        buf.write(u"W\3W\3X\3X\3Y\3Y\5Y\u061c\nY\3Y\3Y\5Y\u0620\nY\3Z\3Z")
        buf.write(u"\3Z\7Z\u0625\nZ\fZ\16Z\u0628\13Z\3[\3[\3\\\3\\\5\\\u062e")
        buf.write(u"\n\\\3]\3]\3]\3^\3^\5^\u0635\n^\3^\3^\3^\3^\3_\5_\u063c")
        buf.write(u"\n_\3_\3_\5_\u0640\n_\3`\3`\7`\u0644\n`\f`\16`\u0647")
        buf.write(u"\13`\3a\3a\3a\3a\3a\5a\u064e\na\3b\3b\3b\3b\3b\3c\3c")
        buf.write(u"\3c\3d\3d\5d\u065a\nd\3d\3d\3d\3d\3d\3d\3d\3d\3e\3e\5")
        buf.write(u"e\u0666\ne\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3f\3f\5f\u0674")
        buf.write(u"\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0680\nf\3g\3g\3")
        buf.write(u"g\3h\3h\3h\7h\u0688\nh\fh\16h\u068b\13h\3i\3i\5i\u068f")
        buf.write(u"\ni\3j\3j\5j\u0693\nj\3k\3k\5k\u0697\nk\3l\3l\3l\3m\3")
        buf.write(u"m\3m\3m\3m\3n\3n\3n\3n\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p")
        buf.write(u"\3p\3p\3p\3p\3p\5p\u06b4\np\3q\3q\5q\u06b8\nq\3r\3r\3")
        buf.write(u"r\5r\u06bd\nr\3s\3s\3t\3t\3u\3u\3u\5u\u06c6\nu\3v\3v")
        buf.write(u"\5v\u06ca\nv\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\5w\u06d8")
        buf.write(u"\nw\3x\3x\5x\u06dc\nx\3x\3x\3y\6y\u06e1\ny\ry\16y\u06e2")
        buf.write(u"\3z\3z\3{\3{\3{\3{\3|\3|\3|\3|\3|\3|\5|\u06f1\n|\3}\3")
        buf.write(u"}\3}\3~\3~\3\177\3\177\3\177\7\177\u06fb\n\177\f\177")
        buf.write(u"\16\177\u06fe\13\177\3\u0080\3\u0080\3\u0080\5\u0080")
        buf.write(u"\u0703\n\u0080\3\u0081\3\u0081\3\u0081\5\u0081\u0708")
        buf.write(u"\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083")
        buf.write(u"\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085\5\u0085\u0715")
        buf.write(u"\n\u0085\3\u0086\3\u0086\5\u0086\u0719\n\u0086\3\u0087")
        buf.write(u"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087")
        buf.write(u"\u0722\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write(u"\3\u0088\3\u0089\3\u0089\5\u0089\u072c\n\u0089\3\u0089")
        buf.write(u"\3\u0089\3\u008a\3\u008a\7\u008a\u0732\n\u008a\f\u008a")
        buf.write(u"\16\u008a\u0735\13\u008a\3\u008b\3\u008b\3\u008b\3\u008c")
        buf.write(u"\3\u008c\7\u008c\u073c\n\u008c\f\u008c\16\u008c\u073f")
        buf.write(u"\13\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write(u"\5\u008d\u0747\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write(u"\5\u008e\u074d\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write(u"\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write(u"\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\5\u0091")
        buf.write(u"\u0760\n\u0091\3\u0091\3\u0091\5\u0091\u0764\n\u0091")
        buf.write(u"\3\u0091\3\u0091\5\u0091\u0768\n\u0091\3\u0091\3\u0091")
        buf.write(u"\3\u0091\3\u0092\3\u0092\5\u0092\u076f\n\u0092\3\u0093")
        buf.write(u"\3\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\7\u0095")
        buf.write(u"\u0778\n\u0095\f\u0095\16\u0095\u077b\13\u0095\3\u0096")
        buf.write(u"\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write(u"\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097")
        buf.write(u"\u078b\n\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099")
        buf.write(u"\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write(u"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a")
        buf.write(u"\u079f\n\u009a\3\u009b\3\u009b\5\u009b\u07a3\n\u009b")
        buf.write(u"\3\u009b\3\u009b\3\u009c\3\u009c\5\u009c\u07a9\n\u009c")
        buf.write(u"\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u07b0")
        buf.write(u"\n\u009d\3\u009d\5\u009d\u07b3\n\u009d\3\u009e\3\u009e")
        buf.write(u"\5\u009e\u07b7\n\u009e\3\u009e\5\u009e\u07ba\n\u009e")
        buf.write(u"\3\u009f\3\u009f\7\u009f\u07be\n\u009f\f\u009f\16\u009f")
        buf.write(u"\u07c1\13\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0")
        buf.write(u"\u07c7\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1")
        buf.write(u"\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3")
        buf.write(u"\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write(u"\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write(u"\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u07e6\n\u00a7\3\u00a8")
        buf.write(u"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write(u"\3\u00a8\5\u00a8\u07f1\n\u00a8\3\u00a9\5\u00a9\u07f4")
        buf.write(u"\n\u00a9\3\u00a9\5\u00a9\u07f7\n\u00a9\3\u00a9\5\u00a9")
        buf.write(u"\u07fa\n\u00a9\3\u00a9\7\u00a9\u07fd\n\u00a9\f\u00a9")
        buf.write(u"\16\u00a9\u0800\13\u00a9\3\u00a9\5\u00a9\u0803\n\u00a9")
        buf.write(u"\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa")
        buf.write(u"\u080b\n\u00aa\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0810")
        buf.write(u"\n\u00ab\f\u00ab\16\u00ab\u0813\13\u00ab\3\u00ac\3\u00ac")
        buf.write(u"\5\u00ac\u0817\n\u00ac\3\u00ac\5\u00ac\u081a\n\u00ac")
        buf.write(u"\3\u00ac\5\u00ac\u081d\n\u00ac\3\u00ac\3\u00ac\3\u00ad")
        buf.write(u"\6\u00ad\u0822\n\u00ad\r\u00ad\16\u00ad\u0823\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\6\u00af\u082c")
        buf.write(u"\n\u00af\r\u00af\16\u00af\u082d\3\u00b0\3\u00b0\5\u00b0")
        buf.write(u"\u0832\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write(u"\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3\6\u00b3")
        buf.write(u"\u083f\n\u00b3\r\u00b3\16\u00b3\u0840\3\u00b4\3\u00b4")
        buf.write(u"\5\u00b4\u0845\n\u00b4\3\u00b5\5\u00b5\u0848\n\u00b5")
        buf.write(u"\3\u00b5\5\u00b5\u084b\n\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write(u"\3\u00b5\3\u00b5\5\u00b5\u0852\n\u00b5\3\u00b6\3\u00b6")
        buf.write(u"\3\u00b6\3\u00b6\3\u00b6\3\u00b7\5\u00b7\u085a\n\u00b7")
        buf.write(u"\3\u00b7\5\u00b7\u085d\n\u00b7\3\u00b7\5\u00b7\u0860")
        buf.write(u"\n\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0865\n\u00b7")
        buf.write(u"\3\u00b7\5\u00b7\u0868\n\u00b7\3\u00b7\5\u00b7\u086b")
        buf.write(u"\n\u00b7\3\u00b7\3\u00b7\5\u00b7\u086f\n\u00b7\3\u00b8")
        buf.write(u"\3\u00b8\7\u00b8\u0873\n\u00b8\f\u00b8\16\u00b8\u0876")
        buf.write(u"\13\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write(u"\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0881\n\u00b9\3\u00ba")
        buf.write(u"\3\u00ba\3\u00ba\3\u00ba\3\u00bb\5\u00bb\u0888\n\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u088d\n\u00bb\3\u00bb")
        buf.write(u"\7\u00bb\u0890\n\u00bb\f\u00bb\16\u00bb\u0893\13\u00bb")
        buf.write(u"\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd")
        buf.write(u"\u089b\n\u00bd\f\u00bd\16\u00bd\u089e\13\u00bd\3\u00be")
        buf.write(u"\3\u00be\3\u00be\7\u00be\u08a3\n\u00be\f\u00be\16\u00be")
        buf.write(u"\u08a6\13\u00be\3\u00bf\3\u00bf\7\u00bf\u08aa\n\u00bf")
        buf.write(u"\f\u00bf\16\u00bf\u08ad\13\u00bf\3\u00c0\3\u00c0\3\u00c0")
        buf.write(u"\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1")
        buf.write(u"\u08b8\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u08bc\n\u00c1")
        buf.write(u"\5\u00c1\u08be\n\u00c1\3\u00c2\3\u00c2\3\u00c2\5\u00c2")
        buf.write(u"\u08c3\n\u00c2\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u08c8")
        buf.write(u"\n\u00c3\f\u00c3\16\u00c3\u08cb\13\u00c3\3\u00c4\3\u00c4")
        buf.write(u"\3\u00c4\3\u00c4\3\u00c5\3\u00c5\5\u00c5\u08d3\n\u00c5")
        buf.write(u"\3\u00c5\3\u00c5\3\u00c6\6\u00c6\u08d8\n\u00c6\r\u00c6")
        buf.write(u"\16\u00c6\u08d9\3\u00c7\5\u00c7\u08dd\n\u00c7\3\u00c7")
        buf.write(u"\5\u00c7\u08e0\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write(u"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u08e9\n\u00c7\3\u00c7")
        buf.write(u"\5\u00c7\u08ec\n\u00c7\3\u00c8\6\u00c8\u08ef\n\u00c8")
        buf.write(u"\r\u00c8\16\u00c8\u08f0\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write(u"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write(u"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0902\n\u00c9")
        buf.write(u"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write(u"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write(u"\3\u00ca\5\u00ca\u0913\n\u00ca\3\u00cb\3\u00cb\3\u00cb")
        buf.write(u"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb")
        buf.write(u"\5\u00cb\u091f\n\u00cb\3\u00cc\3\u00cc\3\u00cc\7\u00cc")
        buf.write(u"\u0924\n\u00cc\f\u00cc\16\u00cc\u0927\13\u00cc\3\u00cd")
        buf.write(u"\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\7\u00ce")
        buf.write(u"\u0930\n\u00ce\f\u00ce\16\u00ce\u0933\13\u00ce\3\u00cf")
        buf.write(u"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u093a\n\u00cf")
        buf.write(u"\3\u00d0\3\u00d0\5\u00d0\u093e\n\u00d0\3\u00d1\3\u00d1")
        buf.write(u"\3\u00d1\3\u00d2\5\u00d2\u0944\n\u00d2\3\u00d2\5\u00d2")
        buf.write(u"\u0947\n\u00d2\3\u00d2\5\u00d2\u094a\n\u00d2\3\u00d2")
        buf.write(u"\3\u00d2\3\u00d2\5\u00d2\u094f\n\u00d2\3\u00d2\3\u00d2")
        buf.write(u"\5\u00d2\u0953\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u0957")
        buf.write(u"\n\u00d2\3\u00d3\6\u00d3\u095a\n\u00d3\r\u00d3\16\u00d3")
        buf.write(u"\u095b\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write(u"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4")
        buf.write(u"\u096a\n\u00d4\3\u00d5\3\u00d5\5\u00d5\u096e\n\u00d5")
        buf.write(u"\3\u00d6\3\u00d6\3\u00d7\3\u00d7\5\u00d7\u0974\n\u00d7")
        buf.write(u"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u097a\n\u00d8")
        buf.write(u"\5\u00d8\u097c\n\u00d8\3\u00d9\3\u00d9\3\u00d9\7\u00d9")
        buf.write(u"\u0981\n\u00d9\f\u00d9\16\u00d9\u0984\13\u00d9\3\u00da")
        buf.write(u"\5\u00da\u0987\n\u00da\3\u00da\5\u00da\u098a\n\u00da")
        buf.write(u"\3\u00da\3\u00da\3\u00da\5\u00da\u098f\n\u00da\3\u00da")
        buf.write(u"\5\u00da\u0992\n\u00da\3\u00db\3\u00db\3\u00db\3\u00dc")
        buf.write(u"\3\u00dc\3\u00dd\5\u00dd\u099a\n\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00de\5\u00de\u09a1\n\u00de\3\u00de")
        buf.write(u"\5\u00de\u09a4\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write(u"\3\u00de\3\u00de\3\u00df\6\u00df\u09ad\n\u00df\r\u00df")
        buf.write(u"\16\u00df\u09ae\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\5\u00e0\u09bd\n\u00e0\3\u00e1\5\u00e1\u09c0\n\u00e1")
        buf.write(u"\3\u00e1\5\u00e1\u09c3\n\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write(u"\5\u00e1\u09c8\n\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1")
        buf.write(u"\u09cd\n\u00e1\5\u00e1\u09cf\n\u00e1\3\u00e2\5\u00e2")
        buf.write(u"\u09d2\n\u00e2\3\u00e2\5\u00e2\u09d5\n\u00e2\3\u00e2")
        buf.write(u"\3\u00e2\3\u00e2\3\u00e3\5\u00e3\u09db\n\u00e3\3\u00e3")
        buf.write(u"\5\u00e3\u09de\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e4")
        buf.write(u"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4")
        buf.write(u"\u09ea\n\u00e4\3\u00e5\3\u00e5\5\u00e5\u09ee\n\u00e5")
        buf.write(u"\3\u00e6\5\u00e6\u09f1\n\u00e6\3\u00e6\5\u00e6\u09f4")
        buf.write(u"\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6")
        buf.write(u"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0a00\n\u00e6")
        buf.write(u"\3\u00e7\3\u00e7\7\u00e7\u0a04\n\u00e7\f\u00e7\16\u00e7")
        buf.write(u"\u0a07\13\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write(u"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write(u"\5\u00e8\u0a15\n\u00e8\3\u00e9\5\u00e9\u0a18\n\u00e9")
        buf.write(u"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9")
        buf.write(u"\3\u00e9\5\u00e9\u0a22\n\u00e9\3\u00ea\5\u00ea\u0a25")
        buf.write(u"\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb\5\u00eb\u0a2b")
        buf.write(u"\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00ec\5\u00ec\u0a31")
        buf.write(u"\n\u00ec\3\u00ec\5\u00ec\u0a34\n\u00ec\3\u00ec\3\u00ec")
        buf.write(u"\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\7\u00ed\u0a3d")
        buf.write(u"\n\u00ed\f\u00ed\16\u00ed\u0a40\13\u00ed\3\u00ee\3\u00ee")
        buf.write(u"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee")
        buf.write(u"\3\u00ee\3\u00ee\5\u00ee\u0a4d\n\u00ee\3\u00ef\3\u00ef")
        buf.write(u"\3\u00ef\3\u00ef\5\u00ef\u0a53\n\u00ef\3\u00ef\3\u00ef")
        buf.write(u"\3\u00ef\3\u00ef\3\u00ef\3\u00f0\5\u00f0\u0a5b\n\u00f0")
        buf.write(u"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\7\u00f1")
        buf.write(u"\u0a63\n\u00f1\f\u00f1\16\u00f1\u0a66\13\u00f1\3\u00f2")
        buf.write(u"\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0a6c\n\u00f2\3\u00f3")
        buf.write(u"\3\u00f3\3\u00f3\5\u00f3\u0a71\n\u00f3\3\u00f4\3\u00f4")
        buf.write(u"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5")
        buf.write(u"\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6")
        buf.write(u"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\5\u00f7\u0a98\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8")
        buf.write(u"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8")
        buf.write(u"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8")
        buf.write(u"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0ab0\n\u00f8")
        buf.write(u"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write(u"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write(u"\3\u00f9\3\u00f9\5\u00f9\u0ac2\n\u00f9\3\u00fa\3\u00fa")
        buf.write(u"\5\u00fa\u0ac6\n\u00fa\3\u00fb\5\u00fb\u0ac9\n\u00fb")
        buf.write(u"\3\u00fb\5\u00fb\u0acc\n\u00fb\3\u00fb\3\u00fb\3\u00fb")
        buf.write(u"\3\u00fc\6\u00fc\u0ad2\n\u00fc\r\u00fc\16\u00fc\u0ad3")
        buf.write(u"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd")
        buf.write(u"\u0adc\n\u00fd\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0ae1")
        buf.write(u"\n\u00fe\3\u00fe\3\u00fe\5\u00fe\u0ae5\n\u00fe\3\u00ff")
        buf.write(u"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0aeb\n\u00ff\3\u00ff")
        buf.write(u"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0af2\n\u00ff")
        buf.write(u"\3\u00ff\5\u00ff\u0af5\n\u00ff\3\u0100\3\u0100\5\u0100")
        buf.write(u"\u0af9\n\u0100\3\u0101\5\u0101\u0afc\n\u0101\3\u0101")
        buf.write(u"\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102\3\u0102")
        buf.write(u"\3\u0103\3\u0103\5\u0103\u0b08\n\u0103\3\u0104\3\u0104")
        buf.write(u"\3\u0105\3\u0105\5\u0105\u0b0e\n\u0105\3\u0106\3\u0106")
        buf.write(u"\5\u0106\u0b12\n\u0106\3\u0107\5\u0107\u0b15\n\u0107")
        buf.write(u"\3\u0107\5\u0107\u0b18\n\u0107\3\u0107\5\u0107\u0b1b")
        buf.write(u"\n\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u0b20\n\u0107")
        buf.write(u"\3\u0107\5\u0107\u0b23\n\u0107\3\u0107\5\u0107\u0b26")
        buf.write(u"\n\u0107\3\u0107\3\u0107\5\u0107\u0b2a\n\u0107\3\u0108")
        buf.write(u"\3\u0108\7\u0108\u0b2e\n\u0108\f\u0108\16\u0108\u0b31")
        buf.write(u"\13\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write(u"\5\u0109\u0b39\n\u0109\3\u010a\3\u010a\3\u010a\3\u010b")
        buf.write(u"\3\u010b\5\u010b\u0b40\n\u010b\3\u010b\3\u010b\3\u010c")
        buf.write(u"\3\u010c\7\u010c\u0b46\n\u010c\f\u010c\16\u010c\u0b49")
        buf.write(u"\13\u010c\3\u010d\5\u010d\u0b4c\n\u010d\3\u010d\5\u010d")
        buf.write(u"\u0b4f\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write(u"\3\u010d\5\u010d\u0b57\n\u010d\3\u010e\3\u010e\7\u010e")
        buf.write(u"\u0b5b\n\u010e\f\u010e\16\u010e\u0b5e\13\u010e\3\u010e")
        buf.write(u"\6\u010e\u0b61\n\u010e\r\u010e\16\u010e\u0b62\3\u010f")
        buf.write(u"\3\u010f\3\u010f\3\u010f\7\u010f\u0b69\n\u010f\f\u010f")
        buf.write(u"\16\u010f\u0b6c\13\u010f\3\u0110\6\u0110\u0b6f\n\u0110")
        buf.write(u"\r\u0110\16\u0110\u0b70\3\u0111\3\u0111\5\u0111\u0b75")
        buf.write(u"\n\u0111\3\u0111\3\u0111\3\u0112\3\u0112\7\u0112\u0b7b")
        buf.write(u"\n\u0112\f\u0112\16\u0112\u0b7e\13\u0112\3\u0113\3\u0113")
        buf.write(u"\3\u0113\3\u0113\3\u0113\5\u0113\u0b85\n\u0113\3\u0113")
        buf.write(u"\3\u0113\5\u0113\u0b89\n\u0113\3\u0114\3\u0114\3\u0114")
        buf.write(u"\7\u0114\u0b8e\n\u0114\f\u0114\16\u0114\u0b91\13\u0114")
        buf.write(u"\3\u0115\5\u0115\u0b94\n\u0115\3\u0115\5\u0115\u0b97")
        buf.write(u"\n\u0115\3\u0115\5\u0115\u0b9a\n\u0115\3\u0115\3\u0115")
        buf.write(u"\3\u0115\5\u0115\u0b9f\n\u0115\3\u0115\5\u0115\u0ba2")
        buf.write(u"\n\u0115\3\u0115\5\u0115\u0ba5\n\u0115\3\u0115\3\u0115")
        buf.write(u"\5\u0115\u0ba9\n\u0115\3\u0116\3\u0116\7\u0116\u0bad")
        buf.write(u"\n\u0116\f\u0116\16\u0116\u0bb0\13\u0116\3\u0117\3\u0117")
        buf.write(u"\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u0bb8\n\u0117")
        buf.write(u"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0119\5\u0119\u0bbf")
        buf.write(u"\n\u0119\3\u0119\5\u0119\u0bc2\n\u0119\3\u0119\3\u0119")
        buf.write(u"\3\u0119\5\u0119\u0bc7\n\u0119\3\u0119\5\u0119\u0bca")
        buf.write(u"\n\u0119\3\u0119\7\u0119\u0bcd\n\u0119\f\u0119\16\u0119")
        buf.write(u"\u0bd0\13\u0119\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b")
        buf.write(u"\3\u011c\3\u011c\5\u011c\u0bd9\n\u011c\3\u011c\3\u011c")
        buf.write(u"\3\u011d\6\u011d\u0bde\n\u011d\r\u011d\16\u011d\u0bdf")
        buf.write(u"\3\u011e\5\u011e\u0be3\n\u011e\3\u011e\5\u011e\u0be6")
        buf.write(u"\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u0beb\n\u011e")
        buf.write(u"\3\u011e\3\u011e\5\u011e\u0bef\n\u011e\3\u011e\3\u011e")
        buf.write(u"\5\u011e\u0bf3\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u0c04\n\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\5\u011e\u0c09\n\u011e\3\u011e")
        buf.write(u"\3\u011e\5\u011e\u0c0d\n\u011e\3\u011e\3\u011e\5\u011e")
        buf.write(u"\u0c11\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\5\u011e\u0c1a\n\u011e\3\u011f\5\u011f")
        buf.write(u"\u0c1d\n\u011f\3\u011f\5\u011f\u0c20\n\u011f\3\u011f")
        buf.write(u"\3\u011f\3\u011f\5\u011f\u0c25\n\u011f\3\u011f\3\u011f")
        buf.write(u"\5\u011f\u0c29\n\u011f\3\u011f\3\u011f\5\u011f\u0c2d")
        buf.write(u"\n\u011f\3\u011f\3\u011f\3\u0120\5\u0120\u0c32\n\u0120")
        buf.write(u"\3\u0120\5\u0120\u0c35\n\u0120\3\u0120\3\u0120\3\u0120")
        buf.write(u"\3\u0120\3\u0120\3\u0120\3\u0121\5\u0121\u0c3e\n\u0121")
        buf.write(u"\3\u0121\3\u0121\3\u0121\5\u0121\u0c43\n\u0121\3\u0121")
        buf.write(u"\3\u0121\3\u0121\5\u0121\u0c48\n\u0121\3\u0121\3\u0121")
        buf.write(u"\3\u0121\5\u0121\u0c4d\n\u0121\3\u0121\3\u0121\3\u0121")
        buf.write(u"\5\u0121\u0c52\n\u0121\5\u0121\u0c54\n\u0121\3\u0122")
        buf.write(u"\5\u0122\u0c57\n\u0122\3\u0122\5\u0122\u0c5a\n\u0122")
        buf.write(u"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0123\5\u0123")
        buf.write(u"\u0c62\n\u0123\3\u0123\5\u0123\u0c65\n\u0123\3\u0123")
        buf.write(u"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write(u"\3\u0123\3\u0124\5\u0124\u0c71\n\u0124\3\u0124\5\u0124")
        buf.write(u"\u0c74\n\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u0c79")
        buf.write(u"\n\u0124\3\u0124\3\u0124\5\u0124\u0c7d\n\u0124\3\u0125")
        buf.write(u"\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write(u"\5\u0126\u0c87\n\u0126\3\u0126\3\u0126\5\u0126\u0c8b")
        buf.write(u"\n\u0126\3\u0127\6\u0127\u0c8e\n\u0127\r\u0127\16\u0127")
        buf.write(u"\u0c8f\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\7\u0129")
        buf.write(u"\u0c97\n\u0129\f\u0129\16\u0129\u0c9a\13\u0129\3\u012a")
        buf.write(u"\5\u012a\u0c9d\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a")
        buf.write(u"\u0ca2\n\u012a\3\u012b\5\u012b\u0ca5\n\u012b\3\u012b")
        buf.write(u"\5\u012b\u0ca8\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write(u"\5\u012b\u0cae\n\u012b\3\u012b\3\u012b\5\u012b\u0cb2")
        buf.write(u"\n\u012b\3\u012b\3\u012b\5\u012b\u0cb6\n\u012b\3\u012b")
        buf.write(u"\3\u012b\3\u012c\3\u012c\7\u012c\u0cbc\n\u012c\f\u012c")
        buf.write(u"\16\u012c\u0cbf\13\u012c\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\3\u012d\5\u012d\u0cc7\n\u012d\3\u012e\3\u012e")
        buf.write(u"\3\u012f\6\u012f\u0ccc\n\u012f\r\u012f\16\u012f\u0ccd")
        buf.write(u"\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u0cd4\n\u0130")
        buf.write(u"\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0132\3\u0132")
        buf.write(u"\5\u0132\u0cdd\n\u0132\3\u0133\3\u0133\3\u0134\6\u0134")
        buf.write(u"\u0ce2\n\u0134\r\u0134\16\u0134\u0ce3\3\u0135\3\u0135")
        buf.write(u"\5\u0135\u0ce8\n\u0135\3\u0135\3\u0135\5\u0135\u0cec")
        buf.write(u"\n\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136\3\u0137")
        buf.write(u"\3\u0137\5\u0137\u0cf5\n\u0137\3\u0138\3\u0138\3\u0138")
        buf.write(u"\7\u0138\u0cfa\n\u0138\f\u0138\16\u0138\u0cfd\13\u0138")
        buf.write(u"\3\u0139\3\u0139\5\u0139\u0d01\n\u0139\3\u013a\3\u013a")
        buf.write(u"\3\u013b\3\u013b\5\u013b\u0d07\n\u013b\3\u013b\3\u013b")
        buf.write(u"\3\u013c\3\u013c\3\u013c\7\u013c\u0d0e\n\u013c\f\u013c")
        buf.write(u"\16\u013c\u0d11\13\u013c\3\u013d\3\u013d\3\u013e\3\u013e")
        buf.write(u"\3\u013e\7\u013e\u0d18\n\u013e\f\u013e\16\u013e\u0d1b")
        buf.write(u"\13\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140")
        buf.write(u"\3\u0141\3\u0141\3\u0142\3\u0142\3\u0143\3\u0143\3\u0144")
        buf.write(u"\3\u0144\3\u0145\3\u0145\3\u0146\3\u0146\3\u0147\3\u0147")
        buf.write(u"\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a\3\u014b")
        buf.write(u"\3\u014b\3\u014c\5\u014c\u0d3a\n\u014c\3\u014c\5\u014c")
        buf.write(u"\u0d3d\n\u014c\3\u014c\5\u014c\u0d40\n\u014c\3\u014c")
        buf.write(u"\3\u014c\5\u014c\u0d44\n\u014c\3\u014c\3\u014c\3\u014c")
        buf.write(u"\3\u014c\3\u014c\3\u014c\3\u014d\5\u014d\u0d4d\n\u014d")
        buf.write(u"\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write(u"\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write(u"\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write(u"\5\u014d\u0d64\n\u014d\3\u014e\3\u014e\5\u014e\u0d68")
        buf.write(u"\n\u014e\3\u014f\3\u014f\3\u014f\3\u0150\3\u0150\3\u0151")
        buf.write(u"\3\u0151\3\u0151\7\u0151\u0d72\n\u0151\f\u0151\16\u0151")
        buf.write(u"\u0d75\13\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151")
        buf.write(u"\7\u0151\u0d7c\n\u0151\f\u0151\16\u0151\u0d7f\13\u0151")
        buf.write(u"\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u0d85\n\u0151")
        buf.write(u"\3\u0152\3\u0152\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154")
        buf.write(u"\u0d8d\n\u0154\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156")
        buf.write(u"\3\u0156\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0158")
        buf.write(u"\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0159")
        buf.write(u"\3\u0159\3\u0159\7\u0159\u0da4\n\u0159\f\u0159\16\u0159")
        buf.write(u"\u0da7\13\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015b")
        buf.write(u"\3\u015b\3\u015b\5\u015b\u0db0\n\u015b\3\u015c\3\u015c")
        buf.write(u"\3\u015d\5\u015d\u0db5\n\u015d\3\u015d\5\u015d\u0db8")
        buf.write(u"\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015e")
        buf.write(u"\6\u015e\u0dc0\n\u015e\r\u015e\16\u015e\u0dc1\3\u015f")
        buf.write(u"\3\u015f\3\u0160\3\u0160\3\u0161\6\u0161\u0dc9\n\u0161")
        buf.write(u"\r\u0161\16\u0161\u0dca\3\u0162\3\u0162\3\u0162\3\u0162")
        buf.write(u"\3\u0162\3\u0163\3\u0163\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write(u"\3\u0164\3\u0164\3\u0165\3\u0165\3\u0166\3\u0166\3\u0167")
        buf.write(u"\3\u0167\3\u0168\3\u0168\3\u0169\3\u0169\3\u016a\3\u016a")
        buf.write(u"\3\u016b\3\u016b\3\u016c\3\u016c\3\u016d\3\u016d\3\u016e")
        buf.write(u"\3\u016e\3\u016f\3\u016f\3\u0170\3\u0170\3\u0171\3\u0171")
        buf.write(u"\3\u0172\3\u0172\3\u0173\3\u0173\3\u0174\3\u0174\3\u0175")
        buf.write(u"\3\u0175\3\u0176\3\u0176\3\u0177\3\u0177\3\u0178\3\u0178")
        buf.write(u"\3\u0179\3\u0179\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b")
        buf.write(u"\3\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d")
        buf.write(u"\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e")
        buf.write(u"\3\u017e\5\u017e\u0e18\n\u017e\3\u017f\3\u017f\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180")
        buf.write(u"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180")
        buf.write(u"\u0e69\n\u0180\3\u0181\3\u0181\3\u0181\5\u0181\u0e6e")
        buf.write(u"\n\u0181\3\u0181\5\u0181\u0e71\n\u0181\3\u0181\5\u0181")
        buf.write(u"\u0e74\n\u0181\3\u0181\3\u0181\5\u0181\u0e78\n\u0181")
        buf.write(u"\3\u0182\3\u0182\3\u0182\5\u0182\u0e7d\n\u0182\3\u0182")
        buf.write(u"\5\u0182\u0e80\n\u0182\3\u0182\5\u0182\u0e83\n\u0182")
        buf.write(u"\3\u0182\3\u0182\5\u0182\u0e87\n\u0182\3\u0183\3\u0183")
        buf.write(u"\3\u0183\5\u0183\u0e8c\n\u0183\3\u0183\5\u0183\u0e8f")
        buf.write(u"\n\u0183\3\u0183\5\u0183\u0e92\n\u0183\3\u0183\3\u0183")
        buf.write(u"\5\u0183\u0e96\n\u0183\3\u0184\3\u0184\3\u0184\5\u0184")
        buf.write(u"\u0e9b\n\u0184\3\u0184\3\u0184\5\u0184\u0e9f\n\u0184")
        buf.write(u"\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u0ea5\n\u0185")
        buf.write(u"\3\u0185\3\u0185\5\u0185\u0ea9\n\u0185\3\u0185\3\u0185")
        buf.write(u"\5\u0185\u0ead\n\u0185\3\u0185\3\u0185\3\u0186\3\u0186")
        buf.write(u"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186")
        buf.write(u"\3\u0186\5\u0186\u0ebb\n\u0186\3\u0187\3\u0187\3\u0187")
        buf.write(u"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189")
        buf.write(u"\3\u0189\3\u0189\3\u0189\3\u018a\3\u018a\3\u018a\3\u018a")
        buf.write(u"\3\u018a\3\u018a\3\u018a\3\u018a\3\u018b\3\u018b\3\u018b")
        buf.write(u"\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\3\u018c\5\u018c")
        buf.write(u"\u0edb\n\u018c\3\u018c\3\u018c\5\u018c\u0edf\n\u018c")
        buf.write(u"\3\u018c\3\u018c\3\u018d\3\u018d\5\u018d\u0ee5\n\u018d")
        buf.write(u"\3\u018d\3\u018d\5\u018d\u0ee9\n\u018d\3\u018d\3\u018d")
        buf.write(u"\5\u018d\u0eed\n\u018d\3\u018d\3\u018d\3\u018e\3\u018e")
        buf.write(u"\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u0ef8")
        buf.write(u"\n\u018f\3\u018f\3\u018f\3\u018f\3\u018f\7\u018f\u0efe")
        buf.write(u"\n\u018f\f\u018f\16\u018f\u0f01\13\u018f\3\u0190\3\u0190")
        buf.write(u"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190")
        buf.write(u"\5\u0190\u0f0c\n\u0190\3\u0190\3\u0190\3\u0190\3\u0191")
        buf.write(u"\3\u0191\5\u0191\u0f13\n\u0191\3\u0191\3\u0191\5\u0191")
        buf.write(u"\u0f17\n\u0191\3\u0191\3\u0191\5\u0191\u0f1b\n\u0191")
        buf.write(u"\3\u0191\3\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192")
        buf.write(u"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194")
        buf.write(u"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195")
        buf.write(u"\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196\5\u0196\u0f37")
        buf.write(u"\n\u0196\3\u0196\3\u0196\3\u0197\3\u0197\5\u0197\u0f3d")
        buf.write(u"\n\u0197\3\u0197\3\u0197\5\u0197\u0f41\n\u0197\3\u0198")
        buf.write(u"\3\u0198\3\u0198\2\2\u0199\2\4\6\b\n\f\16\20\22\24\26")
        buf.write(u"\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write(u"^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write(u"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write(u"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write(u"\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write(u"\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write(u"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write(u"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6")
        buf.write(u"\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108")
        buf.write(u"\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a")
        buf.write(u"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c")
        buf.write(u"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e")
        buf.write(u"\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150")
        buf.write(u"\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162")
        buf.write(u"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174")
        buf.write(u"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186")
        buf.write(u"\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198")
        buf.write(u"\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa")
        buf.write(u"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc")
        buf.write(u"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce")
        buf.write(u"\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0")
        buf.write(u"\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2")
        buf.write(u"\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204")
        buf.write(u"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216")
        buf.write(u"\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228")
        buf.write(u"\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a")
        buf.write(u"\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c")
        buf.write(u"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e")
        buf.write(u"\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270")
        buf.write(u"\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282")
        buf.write(u"\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294")
        buf.write(u"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6")
        buf.write(u"\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8")
        buf.write(u"\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca")
        buf.write(u"\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc")
        buf.write(u"\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee")
        buf.write(u"\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300")
        buf.write(u"\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312")
        buf.write(u"\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324")
        buf.write(u"\u0326\u0328\u032a\u032c\u032e\2\21\23\2\r\17\21\21\25")
        buf.write(u"\25!!$$\'\'\61\62\64\64;;=>EEGGKKQQUVkkmn\n\2\26\26\31")
        buf.write(u"\3188@@SSWWbcff\4\2##..\4\2\u0080\u0080\u008b\u008b\20")
        buf.write(u"\2\23\23\26\26\31\31\36\36##..88@@DDSSWW[[bcff\5\2w}")
        buf.write(u"\u008a\u008b\u0093\u0094\5\2yy\u008b\u008b\u0090\u0091")
        buf.write(u"\4\2HHPP\5\2HHPP^^\7\2++``~\177\u0086\u0087\u008e\u008f")
        buf.write(u"\4\2\67\67HH\5\2::BBLN\4\2**ee\6\2::BBLNee\4\2++``\u10b8")
        buf.write(u"\2\u0330\3\2\2\2\4\u0332\3\2\2\2\6\u0334\3\2\2\2\b\u033a")
        buf.write(u"\3\2\2\2\n\u0347\3\2\2\2\f\u0349\3\2\2\2\16\u0356\3\2")
        buf.write(u"\2\2\20\u035a\3\2\2\2\22\u035f\3\2\2\2\24\u0361\3\2\2")
        buf.write(u"\2\26\u0363\3\2\2\2\30\u0365\3\2\2\2\32\u0368\3\2\2\2")
        buf.write(u"\34\u03a7\3\2\2\2\36\u03ad\3\2\2\2 \u03af\3\2\2\2\"\u03b1")
        buf.write(u"\3\2\2\2$\u03b3\3\2\2\2&\u03b7\3\2\2\2(\u03bf\3\2\2\2")
        buf.write(u"*\u03c1\3\2\2\2,\u03c3\3\2\2\2.\u03c5\3\2\2\2\60\u03ce")
        buf.write(u"\3\2\2\2\62\u03d2\3\2\2\2\64\u03da\3\2\2\2\66\u03dc\3")
        buf.write(u"\2\2\28\u041b\3\2\2\2:\u041d\3\2\2\2<\u0421\3\2\2\2>")
        buf.write(u"\u0424\3\2\2\2@\u0428\3\2\2\2B\u042a\3\2\2\2D\u042c\3")
        buf.write(u"\2\2\2F\u0434\3\2\2\2H\u0440\3\2\2\2J\u0442\3\2\2\2L")
        buf.write(u"\u0451\3\2\2\2N\u045c\3\2\2\2P\u045e\3\2\2\2R\u0466\3")
        buf.write(u"\2\2\2T\u046c\3\2\2\2V\u046e\3\2\2\2X\u0475\3\2\2\2Z")
        buf.write(u"\u0482\3\2\2\2\\\u0484\3\2\2\2^\u0497\3\2\2\2`\u049d")
        buf.write(u"\3\2\2\2b\u04a9\3\2\2\2d\u04ab\3\2\2\2f\u04b8\3\2\2\2")
        buf.write(u"h\u04ba\3\2\2\2j\u04c6\3\2\2\2l\u04db\3\2\2\2n\u04e1")
        buf.write(u"\3\2\2\2p\u04e8\3\2\2\2r\u04ed\3\2\2\2t\u04f2\3\2\2\2")
        buf.write(u"v\u0504\3\2\2\2x\u0506\3\2\2\2z\u0558\3\2\2\2|\u055a")
        buf.write(u"\3\2\2\2~\u055d\3\2\2\2\u0080\u0560\3\2\2\2\u0082\u0565")
        buf.write(u"\3\2\2\2\u0084\u0571\3\2\2\2\u0086\u057b\3\2\2\2\u0088")
        buf.write(u"\u0586\3\2\2\2\u008a\u0598\3\2\2\2\u008c\u05a5\3\2\2")
        buf.write(u"\2\u008e\u05a7\3\2\2\2\u0090\u05ab\3\2\2\2\u0092\u05ad")
        buf.write(u"\3\2\2\2\u0094\u05b7\3\2\2\2\u0096\u05bf\3\2\2\2\u0098")
        buf.write(u"\u05c7\3\2\2\2\u009a\u05cf\3\2\2\2\u009c\u05d7\3\2\2")
        buf.write(u"\2\u009e\u05df\3\2\2\2\u00a0\u05e4\3\2\2\2\u00a2\u05ec")
        buf.write(u"\3\2\2\2\u00a4\u05f0\3\2\2\2\u00a6\u0601\3\2\2\2\u00a8")
        buf.write(u"\u0603\3\2\2\2\u00aa\u0609\3\2\2\2\u00ac\u0612\3\2\2")
        buf.write(u"\2\u00ae\u0617\3\2\2\2\u00b0\u061f\3\2\2\2\u00b2\u0621")
        buf.write(u"\3\2\2\2\u00b4\u0629\3\2\2\2\u00b6\u062d\3\2\2\2\u00b8")
        buf.write(u"\u062f\3\2\2\2\u00ba\u0632\3\2\2\2\u00bc\u063b\3\2\2")
        buf.write(u"\2\u00be\u0641\3\2\2\2\u00c0\u064d\3\2\2\2\u00c2\u064f")
        buf.write(u"\3\2\2\2\u00c4\u0654\3\2\2\2\u00c6\u0657\3\2\2\2\u00c8")
        buf.write(u"\u0663\3\2\2\2\u00ca\u0671\3\2\2\2\u00cc\u0681\3\2\2")
        buf.write(u"\2\u00ce\u0684\3\2\2\2\u00d0\u068c\3\2\2\2\u00d2\u0692")
        buf.write(u"\3\2\2\2\u00d4\u0696\3\2\2\2\u00d6\u0698\3\2\2\2\u00d8")
        buf.write(u"\u069b\3\2\2\2\u00da\u06a0\3\2\2\2\u00dc\u06a4\3\2\2")
        buf.write(u"\2\u00de\u06b3\3\2\2\2\u00e0\u06b7\3\2\2\2\u00e2\u06bc")
        buf.write(u"\3\2\2\2\u00e4\u06be\3\2\2\2\u00e6\u06c0\3\2\2\2\u00e8")
        buf.write(u"\u06c5\3\2\2\2\u00ea\u06c9\3\2\2\2\u00ec\u06d7\3\2\2")
        buf.write(u"\2\u00ee\u06d9\3\2\2\2\u00f0\u06e0\3\2\2\2\u00f2\u06e4")
        buf.write(u"\3\2\2\2\u00f4\u06e6\3\2\2\2\u00f6\u06f0\3\2\2\2\u00f8")
        buf.write(u"\u06f2\3\2\2\2\u00fa\u06f5\3\2\2\2\u00fc\u06f7\3\2\2")
        buf.write(u"\2\u00fe\u06ff\3\2\2\2\u0100\u0707\3\2\2\2\u0102\u0709")
        buf.write(u"\3\2\2\2\u0104\u070d\3\2\2\2\u0106\u0710\3\2\2\2\u0108")
        buf.write(u"\u0714\3\2\2\2\u010a\u0718\3\2\2\2\u010c\u071a\3\2\2")
        buf.write(u"\2\u010e\u0723\3\2\2\2\u0110\u0729\3\2\2\2\u0112\u072f")
        buf.write(u"\3\2\2\2\u0114\u0736\3\2\2\2\u0116\u0739\3\2\2\2\u0118")
        buf.write(u"\u0746\3\2\2\2\u011a\u074c\3\2\2\2\u011c\u074e\3\2\2")
        buf.write(u"\2\u011e\u0754\3\2\2\2\u0120\u075c\3\2\2\2\u0122\u076e")
        buf.write(u"\3\2\2\2\u0124\u0770\3\2\2\2\u0126\u0772\3\2\2\2\u0128")
        buf.write(u"\u0774\3\2\2\2\u012a\u077c\3\2\2\2\u012c\u078a\3\2\2")
        buf.write(u"\2\u012e\u078c\3\2\2\2\u0130\u078f\3\2\2\2\u0132\u079e")
        buf.write(u"\3\2\2\2\u0134\u07a0\3\2\2\2\u0136\u07a6\3\2\2\2\u0138")
        buf.write(u"\u07ac\3\2\2\2\u013a\u07b9\3\2\2\2\u013c\u07bb\3\2\2")
        buf.write(u"\2\u013e\u07c2\3\2\2\2\u0140\u07cb\3\2\2\2\u0142\u07ce")
        buf.write(u"\3\2\2\2\u0144\u07d1\3\2\2\2\u0146\u07d4\3\2\2\2\u0148")
        buf.write(u"\u07d7\3\2\2\2\u014a\u07dd\3\2\2\2\u014c\u07e5\3\2\2")
        buf.write(u"\2\u014e\u07f0\3\2\2\2\u0150\u07f3\3\2\2\2\u0152\u0806")
        buf.write(u"\3\2\2\2\u0154\u080c\3\2\2\2\u0156\u0814\3\2\2\2\u0158")
        buf.write(u"\u0821\3\2\2\2\u015a\u0825\3\2\2\2\u015c\u082b\3\2\2")
        buf.write(u"\2\u015e\u0831\3\2\2\2\u0160\u0833\3\2\2\2\u0162\u0839")
        buf.write(u"\3\2\2\2\u0164\u083e\3\2\2\2\u0166\u0844\3\2\2\2\u0168")
        buf.write(u"\u0847\3\2\2\2\u016a\u0853\3\2\2\2\u016c\u0859\3\2\2")
        buf.write(u"\2\u016e\u0870\3\2\2\2\u0170\u0880\3\2\2\2\u0172\u0882")
        buf.write(u"\3\2\2\2\u0174\u0887\3\2\2\2\u0176\u0894\3\2\2\2\u0178")
        buf.write(u"\u0896\3\2\2\2\u017a\u089f\3\2\2\2\u017c\u08a7\3\2\2")
        buf.write(u"\2\u017e\u08ae\3\2\2\2\u0180\u08bd\3\2\2\2\u0182\u08c2")
        buf.write(u"\3\2\2\2\u0184\u08c4\3\2\2\2\u0186\u08cc\3\2\2\2\u0188")
        buf.write(u"\u08d0\3\2\2\2\u018a\u08d7\3\2\2\2\u018c\u08eb\3\2\2")
        buf.write(u"\2\u018e\u08ee\3\2\2\2\u0190\u0901\3\2\2\2\u0192\u0912")
        buf.write(u"\3\2\2\2\u0194\u0914\3\2\2\2\u0196\u0920\3\2\2\2\u0198")
        buf.write(u"\u0928\3\2\2\2\u019a\u092c\3\2\2\2\u019c\u0939\3\2\2")
        buf.write(u"\2\u019e\u093d\3\2\2\2\u01a0\u093f\3\2\2\2\u01a2\u0943")
        buf.write(u"\3\2\2\2\u01a4\u0959\3\2\2\2\u01a6\u0969\3\2\2\2\u01a8")
        buf.write(u"\u096d\3\2\2\2\u01aa\u096f\3\2\2\2\u01ac\u0973\3\2\2")
        buf.write(u"\2\u01ae\u097b\3\2\2\2\u01b0\u097d\3\2\2\2\u01b2\u0991")
        buf.write(u"\3\2\2\2\u01b4\u0993\3\2\2\2\u01b6\u0996\3\2\2\2\u01b8")
        buf.write(u"\u0999\3\2\2\2\u01ba\u09a0\3\2\2\2\u01bc\u09ac\3\2\2")
        buf.write(u"\2\u01be\u09bc\3\2\2\2\u01c0\u09bf\3\2\2\2\u01c2\u09d1")
        buf.write(u"\3\2\2\2\u01c4\u09da\3\2\2\2\u01c6\u09e9\3\2\2\2\u01c8")
        buf.write(u"\u09ed\3\2\2\2\u01ca\u09f0\3\2\2\2\u01cc\u0a01\3\2\2")
        buf.write(u"\2\u01ce\u0a14\3\2\2\2\u01d0\u0a17\3\2\2\2\u01d2\u0a24")
        buf.write(u"\3\2\2\2\u01d4\u0a2a\3\2\2\2\u01d6\u0a30\3\2\2\2\u01d8")
        buf.write(u"\u0a3a\3\2\2\2\u01da\u0a4c\3\2\2\2\u01dc\u0a4e\3\2\2")
        buf.write(u"\2\u01de\u0a5a\3\2\2\2\u01e0\u0a60\3\2\2\2\u01e2\u0a6b")
        buf.write(u"\3\2\2\2\u01e4\u0a70\3\2\2\2\u01e6\u0a72\3\2\2\2\u01e8")
        buf.write(u"\u0a7a\3\2\2\2\u01ea\u0a7c\3\2\2\2\u01ec\u0a97\3\2\2")
        buf.write(u"\2\u01ee\u0aaf\3\2\2\2\u01f0\u0ac1\3\2\2\2\u01f2\u0ac5")
        buf.write(u"\3\2\2\2\u01f4\u0ac8\3\2\2\2\u01f6\u0ad1\3\2\2\2\u01f8")
        buf.write(u"\u0adb\3\2\2\2\u01fa\u0add\3\2\2\2\u01fc\u0af4\3\2\2")
        buf.write(u"\2\u01fe\u0af8\3\2\2\2\u0200\u0afb\3\2\2\2\u0202\u0b03")
        buf.write(u"\3\2\2\2\u0204\u0b07\3\2\2\2\u0206\u0b09\3\2\2\2\u0208")
        buf.write(u"\u0b0d\3\2\2\2\u020a\u0b11\3\2\2\2\u020c\u0b14\3\2\2")
        buf.write(u"\2\u020e\u0b2b\3\2\2\2\u0210\u0b38\3\2\2\2\u0212\u0b3a")
        buf.write(u"\3\2\2\2\u0214\u0b3d\3\2\2\2\u0216\u0b43\3\2\2\2\u0218")
        buf.write(u"\u0b4b\3\2\2\2\u021a\u0b58\3\2\2\2\u021c\u0b64\3\2\2")
        buf.write(u"\2\u021e\u0b6e\3\2\2\2\u0220\u0b72\3\2\2\2\u0222\u0b78")
        buf.write(u"\3\2\2\2\u0224\u0b88\3\2\2\2\u0226\u0b8a\3\2\2\2\u0228")
        buf.write(u"\u0b93\3\2\2\2\u022a\u0baa\3\2\2\2\u022c\u0bb7\3\2\2")
        buf.write(u"\2\u022e\u0bb9\3\2\2\2\u0230\u0bbe\3\2\2\2\u0232\u0bd1")
        buf.write(u"\3\2\2\2\u0234\u0bd3\3\2\2\2\u0236\u0bd6\3\2\2\2\u0238")
        buf.write(u"\u0bdd\3\2\2\2\u023a\u0be2\3\2\2\2\u023c\u0c1c\3\2\2")
        buf.write(u"\2\u023e\u0c31\3\2\2\2\u0240\u0c3d\3\2\2\2\u0242\u0c56")
        buf.write(u"\3\2\2\2\u0244\u0c61\3\2\2\2\u0246\u0c70\3\2\2\2\u0248")
        buf.write(u"\u0c7e\3\2\2\2\u024a\u0c8a\3\2\2\2\u024c\u0c8d\3\2\2")
        buf.write(u"\2\u024e\u0c91\3\2\2\2\u0250\u0c93\3\2\2\2\u0252\u0c9c")
        buf.write(u"\3\2\2\2\u0254\u0ca4\3\2\2\2\u0256\u0cb9\3\2\2\2\u0258")
        buf.write(u"\u0cc6\3\2\2\2\u025a\u0cc8\3\2\2\2\u025c\u0ccb\3\2\2")
        buf.write(u"\2\u025e\u0ccf\3\2\2\2\u0260\u0cd7\3\2\2\2\u0262\u0cdc")
        buf.write(u"\3\2\2\2\u0264\u0cde\3\2\2\2\u0266\u0ce1\3\2\2\2\u0268")
        buf.write(u"\u0ce5\3\2\2\2\u026a\u0cef\3\2\2\2\u026c\u0cf4\3\2\2")
        buf.write(u"\2\u026e\u0cf6\3\2\2\2\u0270\u0cfe\3\2\2\2\u0272\u0d02")
        buf.write(u"\3\2\2\2\u0274\u0d04\3\2\2\2\u0276\u0d0a\3\2\2\2\u0278")
        buf.write(u"\u0d12\3\2\2\2\u027a\u0d14\3\2\2\2\u027c\u0d1c\3\2\2")
        buf.write(u"\2\u027e\u0d20\3\2\2\2\u0280\u0d22\3\2\2\2\u0282\u0d24")
        buf.write(u"\3\2\2\2\u0284\u0d26\3\2\2\2\u0286\u0d28\3\2\2\2\u0288")
        buf.write(u"\u0d2a\3\2\2\2\u028a\u0d2c\3\2\2\2\u028c\u0d2e\3\2\2")
        buf.write(u"\2\u028e\u0d30\3\2\2\2\u0290\u0d32\3\2\2\2\u0292\u0d34")
        buf.write(u"\3\2\2\2\u0294\u0d36\3\2\2\2\u0296\u0d39\3\2\2\2\u0298")
        buf.write(u"\u0d63\3\2\2\2\u029a\u0d67\3\2\2\2\u029c\u0d69\3\2\2")
        buf.write(u"\2\u029e\u0d6c\3\2\2\2\u02a0\u0d84\3\2\2\2\u02a2\u0d86")
        buf.write(u"\3\2\2\2\u02a4\u0d88\3\2\2\2\u02a6\u0d8c\3\2\2\2\u02a8")
        buf.write(u"\u0d8e\3\2\2\2\u02aa\u0d91\3\2\2\2\u02ac\u0d94\3\2\2")
        buf.write(u"\2\u02ae\u0d99\3\2\2\2\u02b0\u0da0\3\2\2\2\u02b2\u0da8")
        buf.write(u"\3\2\2\2\u02b4\u0daf\3\2\2\2\u02b6\u0db1\3\2\2\2\u02b8")
        buf.write(u"\u0db4\3\2\2\2\u02ba\u0dbf\3\2\2\2\u02bc\u0dc3\3\2\2")
        buf.write(u"\2\u02be\u0dc5\3\2\2\2\u02c0\u0dc8\3\2\2\2\u02c2\u0dcc")
        buf.write(u"\3\2\2\2\u02c4\u0dd1\3\2\2\2\u02c6\u0dd3\3\2\2\2\u02c8")
        buf.write(u"\u0dd9\3\2\2\2\u02ca\u0ddb\3\2\2\2\u02cc\u0ddd\3\2\2")
        buf.write(u"\2\u02ce\u0ddf\3\2\2\2\u02d0\u0de1\3\2\2\2\u02d2\u0de3")
        buf.write(u"\3\2\2\2\u02d4\u0de5\3\2\2\2\u02d6\u0de7\3\2\2\2\u02d8")
        buf.write(u"\u0de9\3\2\2\2\u02da\u0deb\3\2\2\2\u02dc\u0ded\3\2\2")
        buf.write(u"\2\u02de\u0def\3\2\2\2\u02e0\u0df1\3\2\2\2\u02e2\u0df3")
        buf.write(u"\3\2\2\2\u02e4\u0df5\3\2\2\2\u02e6\u0df7\3\2\2\2\u02e8")
        buf.write(u"\u0df9\3\2\2\2\u02ea\u0dfb\3\2\2\2\u02ec\u0dfd\3\2\2")
        buf.write(u"\2\u02ee\u0dff\3\2\2\2\u02f0\u0e01\3\2\2\2\u02f2\u0e03")
        buf.write(u"\3\2\2\2\u02f4\u0e05\3\2\2\2\u02f6\u0e09\3\2\2\2\u02f8")
        buf.write(u"\u0e0d\3\2\2\2\u02fa\u0e17\3\2\2\2\u02fc\u0e19\3\2\2")
        buf.write(u"\2\u02fe\u0e68\3\2\2\2\u0300\u0e6a\3\2\2\2\u0302\u0e79")
        buf.write(u"\3\2\2\2\u0304\u0e88\3\2\2\2\u0306\u0e97\3\2\2\2\u0308")
        buf.write(u"\u0ea0\3\2\2\2\u030a\u0eb0\3\2\2\2\u030c\u0ebc\3\2\2")
        buf.write(u"\2\u030e\u0ebf\3\2\2\2\u0310\u0ec4\3\2\2\2\u0312\u0ec9")
        buf.write(u"\3\2\2\2\u0314\u0ed1\3\2\2\2\u0316\u0ed7\3\2\2\2\u0318")
        buf.write(u"\u0ee2\3\2\2\2\u031a\u0ef0\3\2\2\2\u031c\u0ef7\3\2\2")
        buf.write(u"\2\u031e\u0f02\3\2\2\2\u0320\u0f10\3\2\2\2\u0322\u0f1e")
        buf.write(u"\3\2\2\2\u0324\u0f23\3\2\2\2\u0326\u0f28\3\2\2\2\u0328")
        buf.write(u"\u0f30\3\2\2\2\u032a\u0f34\3\2\2\2\u032c\u0f3a\3\2\2")
        buf.write(u"\2\u032e\u0f42\3\2\2\2\u0330\u0331\5\b\5\2\u0331\3\3")
        buf.write(u"\2\2\2\u0332\u0333\5\b\5\2\u0333\5\3\2\2\2\u0334\u0335")
        buf.write(u"\t\2\2\2\u0335\7\3\2\2\2\u0336\u0337\5\6\4\2\u0337\u0338")
        buf.write(u"\5\n\6\2\u0338\u033b\3\2\2\2\u0339\u033b\5\u016a\u00b6")
        buf.write(u"\2\u033a\u0336\3\2\2\2\u033a\u0339\3\2\2\2\u033b\u0342")
        buf.write(u"\3\2\2\2\u033c\u033d\7z\2\2\u033d\u033e\5\6\4\2\u033e")
        buf.write(u"\u033f\5\n\6\2\u033f\u0341\3\2\2\2\u0340\u033c\3\2\2")
        buf.write(u"\2\u0341\u0344\3\2\2\2\u0342\u0340\3\2\2\2\u0342\u0343")
        buf.write(u"\3\2\2\2\u0343\t\3\2\2\2\u0344\u0342\3\2\2\2\u0345\u0348")
        buf.write(u"\5$\23\2\u0346\u0348\3\2\2\2\u0347\u0345\3\2\2\2\u0347")
        buf.write(u"\u0346\3\2\2\2\u0348\13\3\2\2\2\u0349\u034f\5\16\b\2")
        buf.write(u"\u034a\u034e\7\u008b\2\2\u034b\u034e\5\u0220\u0111\2")
        buf.write(u"\u034c\u034e\7\u0080\2\2\u034d\u034a\3\2\2\2\u034d\u034b")
        buf.write(u"\3\2\2\2\u034d\u034c\3\2\2\2\u034e\u0351\3\2\2\2\u034f")
        buf.write(u"\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350\r\3\2\2\2\u0351")
        buf.write(u"\u034f\3\2\2\2\u0352\u0357\5\20\t\2\u0353\u0357\5\36")
        buf.write(u"\20\2\u0354\u0355\7i\2\2\u0355\u0357\7\u0080\2\2\u0356")
        buf.write(u"\u0352\3\2\2\2\u0356\u0353\3\2\2\2\u0356\u0354\3\2\2")
        buf.write(u"\2\u0357\17\3\2\2\2\u0358\u035b\5\22\n\2\u0359\u035b")
        buf.write(u"\7\23\2\2\u035a\u0358\3\2\2\2\u035a\u0359\3\2\2\2\u035b")
        buf.write(u"\21\3\2\2\2\u035c\u0360\5\24\13\2\u035d\u0360\5\26\f")
        buf.write(u"\2\u035e\u0360\7\36\2\2\u035f\u035c\3\2\2\2\u035f\u035d")
        buf.write(u"\3\2\2\2\u035f\u035e\3\2\2\2\u0360\23\3\2\2\2\u0361\u0362")
        buf.write(u"\t\3\2\2\u0362\25\3\2\2\2\u0363\u0364\t\4\2\2\u0364\27")
        buf.write(u"\3\2\2\2\u0365\u0366\5\32\16\2\u0366\u0367\7\u008b\2")
        buf.write(u"\2\u0367\31\3\2\2\2\u0368\u036d\5\16\b\2\u0369\u036c")
        buf.write(u"\5\u0220\u0111\2\u036a\u036c\7\u0080\2\2\u036b\u0369")
        buf.write(u"\3\2\2\2\u036b\u036a\3\2\2\2\u036c\u036f\3\2\2\2\u036d")
        buf.write(u"\u036b\3\2\2\2\u036d\u036e\3\2\2\2\u036e\33\3\2\2\2\u036f")
        buf.write(u"\u036d\3\2\2\2\u0370\u037a\5\20\t\2\u0371\u0373\t\5\2")
        buf.write(u"\2\u0372\u0371\3\2\2\2\u0373\u0376\3\2\2\2\u0374\u0372")
        buf.write(u"\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0377\3\2\2\2\u0376")
        buf.write(u"\u0374\3\2\2\2\u0377\u0379\5\u0220\u0111\2\u0378\u0374")
        buf.write(u"\3\2\2\2\u0379\u037c\3\2\2\2\u037a\u0378\3\2\2\2\u037a")
        buf.write(u"\u037b\3\2\2\2\u037b\u0380\3\2\2\2\u037c\u037a\3\2\2")
        buf.write(u"\2\u037d\u037f\t\5\2\2\u037e\u037d\3\2\2\2\u037f\u0382")
        buf.write(u"\3\2\2\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2\u0381")
        buf.write(u"\u0383\3\2\2\2\u0382\u0380\3\2\2\2\u0383\u0384\5\u0220")
        buf.write(u"\u0111\2\u0384\u03a8\3\2\2\2\u0385\u038f\5\36\20\2\u0386")
        buf.write(u"\u0388\t\5\2\2\u0387\u0386\3\2\2\2\u0388\u038b\3\2\2")
        buf.write(u"\2\u0389\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038c")
        buf.write(u"\3\2\2\2\u038b\u0389\3\2\2\2\u038c\u038e\5\u0220\u0111")
        buf.write(u"\2\u038d\u0389\3\2\2\2\u038e\u0391\3\2\2\2\u038f\u038d")
        buf.write(u"\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u03a8\3\2\2\2\u0391")
        buf.write(u"\u038f\3\2\2\2\u0392\u0393\7i\2\2\u0393\u039d\7\u0080")
        buf.write(u"\2\2\u0394\u0396\t\5\2\2\u0395\u0394\3\2\2\2\u0396\u0399")
        buf.write(u"\3\2\2\2\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398")
        buf.write(u"\u039a\3\2\2\2\u0399\u0397\3\2\2\2\u039a\u039c\5\u0220")
        buf.write(u"\u0111\2\u039b\u0397\3\2\2\2\u039c\u039f\3\2\2\2\u039d")
        buf.write(u"\u039b\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a3\3\2\2")
        buf.write(u"\2\u039f\u039d\3\2\2\2\u03a0\u03a2\t\5\2\2\u03a1\u03a0")
        buf.write(u"\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3")
        buf.write(u"\u03a4\3\2\2\2\u03a4\u03a6\3\2\2\2\u03a5\u03a3\3\2\2")
        buf.write(u"\2\u03a6\u03a8\5\u0220\u0111\2\u03a7\u0370\3\2\2\2\u03a7")
        buf.write(u"\u0385\3\2\2\2\u03a7\u0392\3\2\2\2\u03a8\35\3\2\2\2\u03a9")
        buf.write(u"\u03ae\5\4\3\2\u03aa\u03ae\7D\2\2\u03ab\u03ae\5\u02f0")
        buf.write(u"\u0179\2\u03ac\u03ae\7[\2\2\u03ad\u03a9\3\2\2\2\u03ad")
        buf.write(u"\u03aa\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ac\3\2\2")
        buf.write(u"\2\u03ae\37\3\2\2\2\u03af\u03b0\5\4\3\2\u03b0!\3\2\2")
        buf.write(u"\2\u03b1\u03b2\5\4\3\2\u03b2#\3\2\2\2\u03b3\u03b4\7\u0089")
        buf.write(u"\2\2\u03b4\u03b5\5&\24\2\u03b5\u03b6\7\u008a\2\2\u03b6")
        buf.write(u"%\3\2\2\2\u03b7\u03bc\5(\25\2\u03b8\u03b9\7{\2\2\u03b9")
        buf.write(u"\u03bb\5(\25\2\u03ba\u03b8\3\2\2\2\u03bb\u03be\3\2\2")
        buf.write(u"\2\u03bc\u03ba\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\'\3")
        buf.write(u"\2\2\2\u03be\u03bc\3\2\2\2\u03bf\u03c0\5\f\7\2\u03c0")
        buf.write(u")\3\2\2\2\u03c1\u03c2\7i\2\2\u03c2+\3\2\2\2\u03c3\u03c4")
        buf.write(u"\5\u00e0q\2\u03c4-\3\2\2\2\u03c5\u03ca\5\60\31\2\u03c6")
        buf.write(u"\u03c7\7{\2\2\u03c7\u03c9\5\60\31\2\u03c8\u03c6\3\2\2")
        buf.write(u"\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8\3\2\2\2\u03ca\u03cb")
        buf.write(u"\3\2\2\2\u03cb/\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cd\u03cf")
        buf.write(u"\5\62\32\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf")
        buf.write(u"\u03d0\3\2\2\2\u03d0\u03d1\5\64\33\2\u03d1\61\3\2\2\2")
        buf.write(u"\u03d2\u03d3\5\6\4\2\u03d3\u03d4\7|\2\2\u03d4\63\3\2")
        buf.write(u"\2\2\u03d5\u03db\5\u00e0q\2\u03d6\u03d7\7P\2\2\u03d7")
        buf.write(u"\u03db\5,\27\2\u03d8\u03d9\7H\2\2\u03d9\u03db\5,\27\2")
        buf.write(u"\u03da\u03d5\3\2\2\2\u03da\u03d6\3\2\2\2\u03da\u03d8")
        buf.write(u"\3\2\2\2\u03db\65\3\2\2\2\u03dc\u03e0\58\35\2\u03dd\u03df")
        buf.write(u"\5:\36\2\u03de\u03dd\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0")
        buf.write(u"\u03de\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03f3\3\2\2")
        buf.write(u"\2\u03e2\u03e0\3\2\2\2\u03e3\u03ea\5\u0328\u0195\2\u03e4")
        buf.write(u"\u03ea\5\u032a\u0196\2\u03e5\u03ea\7\u008e\2\2\u03e6")
        buf.write(u"\u03ea\7\u008f\2\2\u03e7\u03e8\7\u0092\2\2\u03e8\u03ea")
        buf.write(u"\5\6\4\2\u03e9\u03e3\3\2\2\2\u03e9\u03e4\3\2\2\2\u03e9")
        buf.write(u"\u03e5\3\2\2\2\u03e9\u03e6\3\2\2\2\u03e9\u03e7\3\2\2")
        buf.write(u"\2\u03ea\u03ee\3\2\2\2\u03eb\u03ed\5:\36\2\u03ec\u03eb")
        buf.write(u"\3\2\2\2\u03ed\u03f0\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee")
        buf.write(u"\u03ef\3\2\2\2\u03ef\u03f2\3\2\2\2\u03f0\u03ee\3\2\2")
        buf.write(u"\2\u03f1\u03e9\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1")
        buf.write(u"\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\67\3\2\2\2\u03f5\u03f3")
        buf.write(u"\3\2\2\2\u03f6\u041c\5\u02fa\u017e\2\u03f7\u041c\5<\37")
        buf.write(u"\2\u03f8\u041c\5> \2\u03f9\u041c\5B\"\2\u03fa\u041c\5")
        buf.write(u"\u016a\u00b6\2\u03fb\u041c\5F$\2\u03fc\u041c\5H%\2\u03fd")
        buf.write(u"\u0413\7B\2\2\u03fe\u040d\5\f\7\2\u03ff\u040e\5\u032c")
        buf.write(u"\u0197\2\u0400\u040e\5L\'\2\u0401\u0402\7v\2\2\u0402")
        buf.write(u"\u0403\5D#\2\u0403\u0405\7w\2\2\u0404\u0406\5\u021e\u0110")
        buf.write(u"\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408")
        buf.write(u"\3\2\2\2\u0407\u0409\5\u0224\u0113\2\u0408\u0407\3\2")
        buf.write(u"\2\2\u0408\u0409\3\2\2\2\u0409\u040e\3\2\2\2\u040a\u040b")
        buf.write(u"\5\u021e\u0110\2\u040b\u040c\5\u0224\u0113\2\u040c\u040e")
        buf.write(u"\3\2\2\2\u040d\u03ff\3\2\2\2\u040d\u0400\3\2\2\2\u040d")
        buf.write(u"\u0401\3\2\2\2\u040d\u040a\3\2\2\2\u040e\u0414\3\2\2")
        buf.write(u"\2\u040f\u0414\5b\62\2\u0410\u0411\5\u0220\u0111\2\u0411")
        buf.write(u"\u0412\5\u0224\u0113\2\u0412\u0414\3\2\2\2\u0413\u03fe")
        buf.write(u"\3\2\2\2\u0413\u040f\3\2\2\2\u0413\u0410\3\2\2\2\u0414")
        buf.write(u"\u041c\3\2\2\2\u0415\u041c\5h\65\2\u0416\u041c\5p9\2")
        buf.write(u"\u0417\u041c\5r:\2\u0418\u041c\5t;\2\u0419\u041c\5\u00a4")
        buf.write(u"S\2\u041a\u041c\5\u02ac\u0157\2\u041b\u03f6\3\2\2\2\u041b")
        buf.write(u"\u03f7\3\2\2\2\u041b\u03f8\3\2\2\2\u041b\u03f9\3\2\2")
        buf.write(u"\2\u041b\u03fa\3\2\2\2\u041b\u03fb\3\2\2\2\u041b\u03fc")
        buf.write(u"\3\2\2\2\u041b\u03fd\3\2\2\2\u041b\u0415\3\2\2\2\u041b")
        buf.write(u"\u0416\3\2\2\2\u041b\u0417\3\2\2\2\u041b\u0418\3\2\2")
        buf.write(u"\2\u041b\u0419\3\2\2\2\u041b\u041a\3\2\2\2\u041c9\3\2")
        buf.write(u"\2\2\u041d\u041e\7v\2\2\u041e\u041f\5D#\2\u041f\u0420")
        buf.write(u"\7w\2\2\u0420;\3\2\2\2\u0421\u0422\5\6\4\2\u0422\u0423")
        buf.write(u"\5\n\6\2\u0423=\3\2\2\2\u0424\u0425\7x\2\2\u0425\u0426")
        buf.write(u"\5\u00e0q\2\u0426\u0427\7y\2\2\u0427?\3\2\2\2\u0428\u0429")
        buf.write(u"\5\66\34\2\u0429A\3\2\2\2\u042a\u042b\t\6\2\2\u042bC")
        buf.write(u"\3\2\2\2\u042c\u0431\5\u00e0q\2\u042d\u042e\7{\2\2\u042e")
        buf.write(u"\u0430\5\u00e0q\2\u042f\u042d\3\2\2\2\u0430\u0433\3\2")
        buf.write(u"\2\2\u0431\u042f\3\2\2\2\u0431\u0432\3\2\2\2\u0432E\3")
        buf.write(u"\2\2\2\u0433\u0431\3\2\2\2\u0434\u0435\7^\2\2\u0435G")
        buf.write(u"\3\2\2\2\u0436\u0437\7\22\2\2\u0437\u0438\7z\2\2\u0438")
        buf.write(u"\u0439\5\6\4\2\u0439\u043a\5\n\6\2\u043a\u0441\3\2\2")
        buf.write(u"\2\u043b\u043c\7\22\2\2\u043c\u043d\7v\2\2\u043d\u043e")
        buf.write(u"\5D#\2\u043e\u043f\7w\2\2\u043f\u0441\3\2\2\2\u0440\u0436")
        buf.write(u"\3\2\2\2\u0440\u043b\3\2\2\2\u0441I\3\2\2\2\u0442\u0443")
        buf.write(u"\7B\2\2\u0443\u044d\5\f\7\2\u0444\u0446\7x\2\2\u0445")
        buf.write(u"\u0447\5.\30\2\u0446\u0445\3\2\2\2\u0446\u0447\3\2\2")
        buf.write(u"\2\u0447\u0448\3\2\2\2\u0448\u044a\7y\2\2\u0449\u044b")
        buf.write(u"\5L\'\2\u044a\u0449\3\2\2\2\u044a\u044b\3\2\2\2\u044b")
        buf.write(u"\u044e\3\2\2\2\u044c\u044e\5L\'\2\u044d\u0444\3\2\2\2")
        buf.write(u"\u044d\u044c\3\2\2\2\u044eK\3\2\2\2\u044f\u0452\5N(\2")
        buf.write(u"\u0450\u0452\5V,\2\u0451\u044f\3\2\2\2\u0451\u0450\3")
        buf.write(u"\2\2\2\u0452M\3\2\2\2\u0453\u0454\7t\2\2\u0454\u045d")
        buf.write(u"\7u\2\2\u0455\u0456\7t\2\2\u0456\u0458\5P)\2\u0457\u0459")
        buf.write(u"\7{\2\2\u0458\u0457\3\2\2\2\u0458\u0459\3\2\2\2\u0459")
        buf.write(u"\u045a\3\2\2\2\u045a\u045b\7u\2\2\u045b\u045d\3\2\2\2")
        buf.write(u"\u045c\u0453\3\2\2\2\u045c\u0455\3\2\2\2\u045dO\3\2\2")
        buf.write(u"\2\u045e\u0463\5R*\2\u045f\u0460\7{\2\2\u0460\u0462\5")
        buf.write(u"R*\2\u0461\u045f\3\2\2\2\u0462\u0465\3\2\2\2\u0463\u0461")
        buf.write(u"\3\2\2\2\u0463\u0464\3\2\2\2\u0464Q\3\2\2\2\u0465\u0463")
        buf.write(u"\3\2\2\2\u0466\u0467\5\6\4\2\u0467\u0468\7\u0088\2\2")
        buf.write(u"\u0468\u0469\5T+\2\u0469S\3\2\2\2\u046a\u046d\5\u00e0")
        buf.write(u"q\2\u046b\u046d\5L\'\2\u046c\u046a\3\2\2\2\u046c\u046b")
        buf.write(u"\3\2\2\2\u046dU\3\2\2\2\u046e\u046f\7t\2\2\u046f\u0471")
        buf.write(u"\5X-\2\u0470\u0472\7{\2\2\u0471\u0470\3\2\2\2\u0471\u0472")
        buf.write(u"\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0474\7u\2\2\u0474")
        buf.write(u"W\3\2\2\2\u0475\u047a\5Z.\2\u0476\u0477\7{\2\2\u0477")
        buf.write(u"\u0479\5Z.\2\u0478\u0476\3\2\2\2\u0479\u047c\3\2\2\2")
        buf.write(u"\u047a\u0478\3\2\2\2\u047a\u047b\3\2\2\2\u047bY\3\2\2")
        buf.write(u"\2\u047c\u047a\3\2\2\2\u047d\u0483\5\u00e2r\2\u047e\u047f")
        buf.write(u"\7t\2\2\u047f\u0480\5D#\2\u0480\u0481\7u\2\2\u0481\u0483")
        buf.write(u"\3\2\2\2\u0482\u047d\3\2\2\2\u0482\u047e\3\2\2\2\u0483")
        buf.write(u"[\3\2\2\2\u0484\u0495\7B\2\2\u0485\u0486\5\u021a\u010e")
        buf.write(u"\2\u0486\u0487\5\u0224\u0113\2\u0487\u0496\3\2\2\2\u0488")
        buf.write(u"\u0489\5\u021c\u010f\2\u0489\u048a\7v\2\2\u048a\u048b")
        buf.write(u"\5D#\2\u048b\u048d\7w\2\2\u048c\u048e\5\u021e\u0110\2")
        buf.write(u"\u048d\u048c\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u0490")
        buf.write(u"\3\2\2\2\u048f\u0491\5\u0224\u0113\2\u0490\u048f\3\2")
        buf.write(u"\2\2\u0490\u0491\3\2\2\2\u0491\u0496\3\2\2\2\u0492\u0493")
        buf.write(u"\5\u0220\u0111\2\u0493\u0494\5\u0224\u0113\2\u0494\u0496")
        buf.write(u"\3\2\2\2\u0495\u0485\3\2\2\2\u0495\u0488\3\2\2\2\u0495")
        buf.write(u"\u0492\3\2\2\2\u0496]\3\2\2\2\u0497\u0498\7B\2\2\u0498")
        buf.write(u"\u0499\5\"\22\2\u0499\u049a\7x\2\2\u049a\u049b\5\u00e0")
        buf.write(u"q\2\u049b\u049c\7y\2\2\u049c_\3\2\2\2\u049d\u049e\7B")
        buf.write(u"\2\2\u049e\u049f\5b\62\2\u049fa\3\2\2\2\u04a0\u04a1\7")
        buf.write(u"t\2\2\u04a1\u04aa\7u\2\2\u04a2\u04a3\7t\2\2\u04a3\u04a5")
        buf.write(u"\5d\63\2\u04a4\u04a6\7{\2\2\u04a5\u04a4\3\2\2\2\u04a5")
        buf.write(u"\u04a6\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\7u\2\2")
        buf.write(u"\u04a8\u04aa\3\2\2\2\u04a9\u04a0\3\2\2\2\u04a9\u04a2")
        buf.write(u"\3\2\2\2\u04aac\3\2\2\2\u04ab\u04b0\5f\64\2\u04ac\u04ad")
        buf.write(u"\7{\2\2\u04ad\u04af\5f\64\2\u04ae\u04ac\3\2\2\2\u04af")
        buf.write(u"\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0\u04b1\3\2\2")
        buf.write(u"\2\u04b1e\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b3\u04b9\5\66")
        buf.write(u"\34\2\u04b4\u04b5\5\6\4\2\u04b5\u04b6\7\u0088\2\2\u04b6")
        buf.write(u"\u04b7\5\u00e0q\2\u04b7\u04b9\3\2\2\2\u04b8\u04b3\3\2")
        buf.write(u"\2\2\u04b8\u04b4\3\2\2\2\u04b9g\3\2\2\2\u04ba\u04bb\5")
        buf.write(u"\u032e\u0198\2\u04bb\u04c4\7x\2\2\u04bc\u04bd\5j\66\2")
        buf.write(u"\u04bd\u04be\7y\2\2\u04be\u04c5\3\2\2\2\u04bf\u04c0\5")
        buf.write(u"\f\7\2\u04c0\u04c1\7y\2\2\u04c1\u04c5\3\2\2\2\u04c2\u04c3")
        buf.write(u"\7i\2\2\u04c3\u04c5\7y\2\2\u04c4\u04bc\3\2\2\2\u04c4")
        buf.write(u"\u04bf\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c5i\3\2\2\2\u04c6")
        buf.write(u"\u04cf\5\6\4\2\u04c7\u04c9\5l\67\2\u04c8\u04c7\3\2\2")
        buf.write(u"\2\u04c8\u04c9\3\2\2\2\u04c9\u04d0\3\2\2\2\u04ca\u04cb")
        buf.write(u"\7\u008c\2\2\u04cb\u04cd\5\6\4\2\u04cc\u04ce\5l\67\2")
        buf.write(u"\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04d0")
        buf.write(u"\3\2\2\2\u04cf\u04c8\3\2\2\2\u04cf\u04ca\3\2\2\2\u04d0")
        buf.write(u"\u04d8\3\2\2\2\u04d1\u04d2\7z\2\2\u04d2\u04d4\5\6\4\2")
        buf.write(u"\u04d3\u04d5\5l\67\2\u04d4\u04d3\3\2\2\2\u04d4\u04d5")
        buf.write(u"\3\2\2\2\u04d5\u04d7\3\2\2\2\u04d6\u04d1\3\2\2\2\u04d7")
        buf.write(u"\u04da\3\2\2\2\u04d8\u04d6\3\2\2\2\u04d8\u04d9\3\2\2")
        buf.write(u"\2\u04d9k\3\2\2\2\u04da\u04d8\3\2\2\2\u04db\u04dd\7\u0089")
        buf.write(u"\2\2\u04dc\u04de\5n8\2\u04dd\u04dc\3\2\2\2\u04dd\u04de")
        buf.write(u"\3\2\2\2\u04de\u04df\3\2\2\2\u04df\u04e0\7\u008a\2\2")
        buf.write(u"\u04e0m\3\2\2\2\u04e1\u04e5\7{\2\2\u04e2\u04e4\7{\2\2")
        buf.write(u"\u04e3\u04e2\3\2\2\2\u04e4\u04e7\3\2\2\2\u04e5\u04e3")
        buf.write(u"\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6o\3\2\2\2\u04e7\u04e5")
        buf.write(u"\3\2\2\2\u04e8\u04e9\7\32\2\2\u04e9\u04ea\7x\2\2\u04ea")
        buf.write(u"\u04eb\5\u00e0q\2\u04eb\u04ec\7y\2\2\u04ecq\3\2\2\2\u04ed")
        buf.write(u"\u04ee\7d\2\2\u04ee\u04ef\7x\2\2\u04ef\u04f0\5\u00e0")
        buf.write(u"q\2\u04f0\u04f1\7y\2\2\u04f1s\3\2\2\2\u04f2\u04f3\7\37")
        buf.write(u"\2\2\u04f3\u04f4\7x\2\2\u04f4\u04f5\5\f\7\2\u04f5\u04f6")
        buf.write(u"\7y\2\2\u04f6u\3\2\2\2\u04f7\u0505\5\u0080A\2\u04f8\u0505")
        buf.write(u"\5\66\34\2\u04f9\u04fa\7~\2\2\u04fa\u0505\5v<\2\u04fb")
        buf.write(u"\u04fc\7\177\2\2\u04fc\u0505\5v<\2\u04fd\u04fe\7\u0086")
        buf.write(u"\2\2\u04fe\u0505\5v<\2\u04ff\u0500\7\u0087\2\2\u0500")
        buf.write(u"\u0505\5v<\2\u0501\u0505\5|?\2\u0502\u0505\5~@\2\u0503")
        buf.write(u"\u0505\5\u02a6\u0154\2\u0504\u04f7\3\2\2\2\u0504\u04f8")
        buf.write(u"\3\2\2\2\u0504\u04f9\3\2\2\2\u0504\u04fb\3\2\2\2\u0504")
        buf.write(u"\u04fd\3\2\2\2\u0504\u04ff\3\2\2\2\u0504\u0501\3\2\2")
        buf.write(u"\2\u0504\u0502\3\2\2\2\u0504\u0503\3\2\2\2\u0505w\3\2")
        buf.write(u"\2\2\u0506\u0507\7x\2\2\u0507\u0508\5\f\7\2\u0508\u0509")
        buf.write(u"\7y\2\2\u0509\u050a\5z>\2\u050ay\3\2\2\2\u050b\u0559")
        buf.write(u"\7\u0087\2\2\u050c\u0559\7\u0086\2\2\u050d\u0559\7x\2")
        buf.write(u"\2\u050e\u0559\5\6\4\2\u050f\u0559\5\u02fa\u017e\2\u0510")
        buf.write(u"\u0559\7\f\2\2\u0511\u0559\7\22\2\2\u0512\u0559\7\23")
        buf.write(u"\2\2\u0513\u0559\7\24\2\2\u0514\u0559\7\26\2\2\u0515")
        buf.write(u"\u0559\7\27\2\2\u0516\u0559\7\30\2\2\u0517\u0559\7\31")
        buf.write(u"\2\2\u0518\u0559\7\32\2\2\u0519\u0559\7\33\2\2\u051a")
        buf.write(u"\u0559\7\34\2\2\u051b\u0559\7\35\2\2\u051c\u0559\7\36")
        buf.write(u"\2\2\u051d\u0559\7\37\2\2\u051e\u0559\7 \2\2\u051f\u0559")
        buf.write(u"\7\"\2\2\u0520\u0559\7#\2\2\u0521\u0559\7%\2\2\u0522")
        buf.write(u"\u0559\7&\2\2\u0523\u0559\7(\2\2\u0524\u0559\7)\2\2\u0525")
        buf.write(u"\u0559\7*\2\2\u0526\u0559\7,\2\2\u0527\u0559\7-\2\2\u0528")
        buf.write(u"\u0559\7.\2\2\u0529\u0559\7/\2\2\u052a\u0559\7\60\2\2")
        buf.write(u"\u052b\u0559\7\63\2\2\u052c\u0559\7\65\2\2\u052d\u0559")
        buf.write(u"\7\66\2\2\u052e\u0559\7\67\2\2\u052f\u0559\78\2\2\u0530")
        buf.write(u"\u0559\79\2\2\u0531\u0559\7:\2\2\u0532\u0559\7?\2\2\u0533")
        buf.write(u"\u0559\7@\2\2\u0534\u0559\7A\2\2\u0535\u0559\7B\2\2\u0536")
        buf.write(u"\u0559\7D\2\2\u0537\u0559\7F\2\2\u0538\u0559\7H\2\2\u0539")
        buf.write(u"\u0559\7I\2\2\u053a\u0559\7J\2\2\u053b\u0559\7L\2\2\u053c")
        buf.write(u"\u0559\7M\2\2\u053d\u0559\7N\2\2\u053e\u0559\7O\2\2\u053f")
        buf.write(u"\u0559\7P\2\2\u0540\u0559\7R\2\2\u0541\u0559\7S\2\2\u0542")
        buf.write(u"\u0559\7T\2\2\u0543\u0559\7W\2\2\u0544\u0559\7X\2\2\u0545")
        buf.write(u"\u0559\7Y\2\2\u0546\u0559\7Z\2\2\u0547\u0559\7[\2\2\u0548")
        buf.write(u"\u0559\7\\\2\2\u0549\u0559\7]\2\2\u054a\u0559\7^\2\2")
        buf.write(u"\u054b\u0559\7_\2\2\u054c\u0559\7a\2\2\u054d\u0559\5")
        buf.write(u"\u032e\u0198\2\u054e\u0559\7b\2\2\u054f\u0559\7c\2\2")
        buf.write(u"\u0550\u0559\7d\2\2\u0551\u0559\7e\2\2\u0552\u0559\7")
        buf.write(u"f\2\2\u0553\u0559\7g\2\2\u0554\u0559\7h\2\2\u0555\u0559")
        buf.write(u"\7i\2\2\u0556\u0559\7j\2\2\u0557\u0559\7l\2\2\u0558\u050b")
        buf.write(u"\3\2\2\2\u0558\u050c\3\2\2\2\u0558\u050d\3\2\2\2\u0558")
        buf.write(u"\u050e\3\2\2\2\u0558\u050f\3\2\2\2\u0558\u0510\3\2\2")
        buf.write(u"\2\u0558\u0511\3\2\2\2\u0558\u0512\3\2\2\2\u0558\u0513")
        buf.write(u"\3\2\2\2\u0558\u0514\3\2\2\2\u0558\u0515\3\2\2\2\u0558")
        buf.write(u"\u0516\3\2\2\2\u0558\u0517\3\2\2\2\u0558\u0518\3\2\2")
        buf.write(u"\2\u0558\u0519\3\2\2\2\u0558\u051a\3\2\2\2\u0558\u051b")
        buf.write(u"\3\2\2\2\u0558\u051c\3\2\2\2\u0558\u051d\3\2\2\2\u0558")
        buf.write(u"\u051e\3\2\2\2\u0558\u051f\3\2\2\2\u0558\u0520\3\2\2")
        buf.write(u"\2\u0558\u0521\3\2\2\2\u0558\u0522\3\2\2\2\u0558\u0523")
        buf.write(u"\3\2\2\2\u0558\u0524\3\2\2\2\u0558\u0525\3\2\2\2\u0558")
        buf.write(u"\u0526\3\2\2\2\u0558\u0527\3\2\2\2\u0558\u0528\3\2\2")
        buf.write(u"\2\u0558\u0529\3\2\2\2\u0558\u052a\3\2\2\2\u0558\u052b")
        buf.write(u"\3\2\2\2\u0558\u052c\3\2\2\2\u0558\u052d\3\2\2\2\u0558")
        buf.write(u"\u052e\3\2\2\2\u0558\u052f\3\2\2\2\u0558\u0530\3\2\2")
        buf.write(u"\2\u0558\u0531\3\2\2\2\u0558\u0532\3\2\2\2\u0558\u0533")
        buf.write(u"\3\2\2\2\u0558\u0534\3\2\2\2\u0558\u0535\3\2\2\2\u0558")
        buf.write(u"\u0536\3\2\2\2\u0558\u0537\3\2\2\2\u0558\u0538\3\2\2")
        buf.write(u"\2\u0558\u0539\3\2\2\2\u0558\u053a\3\2\2\2\u0558\u053b")
        buf.write(u"\3\2\2\2\u0558\u053c\3\2\2\2\u0558\u053d\3\2\2\2\u0558")
        buf.write(u"\u053e\3\2\2\2\u0558\u053f\3\2\2\2\u0558\u0540\3\2\2")
        buf.write(u"\2\u0558\u0541\3\2\2\2\u0558\u0542\3\2\2\2\u0558\u0543")
        buf.write(u"\3\2\2\2\u0558\u0544\3\2\2\2\u0558\u0545\3\2\2\2\u0558")
        buf.write(u"\u0546\3\2\2\2\u0558\u0547\3\2\2\2\u0558\u0548\3\2\2")
        buf.write(u"\2\u0558\u0549\3\2\2\2\u0558\u054a\3\2\2\2\u0558\u054b")
        buf.write(u"\3\2\2\2\u0558\u054c\3\2\2\2\u0558\u054d\3\2\2\2\u0558")
        buf.write(u"\u054e\3\2\2\2\u0558\u054f\3\2\2\2\u0558\u0550\3\2\2")
        buf.write(u"\2\u0558\u0551\3\2\2\2\u0558\u0552\3\2\2\2\u0558\u0553")
        buf.write(u"\3\2\2\2\u0558\u0554\3\2\2\2\u0558\u0555\3\2\2\2\u0558")
        buf.write(u"\u0556\3\2\2\2\u0558\u0557\3\2\2\2\u0559{\3\2\2\2\u055a")
        buf.write(u"\u055b\7\u008e\2\2\u055b\u055c\5v<\2\u055c}\3\2\2\2\u055d")
        buf.write(u"\u055e\7\u008f\2\2\u055e\u055f\5v<\2\u055f\177\3\2\2")
        buf.write(u"\2\u0560\u0561\7x\2\2\u0561\u0562\5\f\7\2\u0562\u0563")
        buf.write(u"\7y\2\2\u0563\u0564\5v<\2\u0564\u0081\3\2\2\2\u0565\u056e")
        buf.write(u"\5v<\2\u0566\u0567\7\u0080\2\2\u0567\u056d\5v<\2\u0568")
        buf.write(u"\u0569\7\u0081\2\2\u0569\u056d\5v<\2\u056a\u056b\7\u0082")
        buf.write(u"\2\2\u056b\u056d\5v<\2\u056c\u0566\3\2\2\2\u056c\u0568")
        buf.write(u"\3\2\2\2\u056c\u056a\3\2\2\2\u056d\u0570\3\2\2\2\u056e")
        buf.write(u"\u056c\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0083\3\2\2")
        buf.write(u"\2\u0570\u056e\3\2\2\2\u0571\u0578\5\u0082B\2\u0572\u0573")
        buf.write(u"\7~\2\2\u0573\u0577\5\u0082B\2\u0574\u0575\7\177\2\2")
        buf.write(u"\u0575\u0577\5\u0082B\2\u0576\u0572\3\2\2\2\u0576\u0574")
        buf.write(u"\3\2\2\2\u0577\u057a\3\2\2\2\u0578\u0576\3\2\2\2\u0578")
        buf.write(u"\u0579\3\2\2\2\u0579\u0085\3\2\2\2\u057a\u0578\3\2\2")
        buf.write(u"\2\u057b\u0583\5\u0084C\2\u057c\u057d\7\u009f\2\2\u057d")
        buf.write(u"\u0582\5\u0084C\2\u057e\u057f\5\u02f6\u017c\2\u057f\u0580")
        buf.write(u"\5\u0084C\2\u0580\u0582\3\2\2\2\u0581\u057c\3\2\2\2\u0581")
        buf.write(u"\u057e\3\2\2\2\u0582\u0585\3\2\2\2\u0583\u0581\3\2\2")
        buf.write(u"\2\u0583\u0584\3\2\2\2\u0584\u0087\3\2\2\2\u0585\u0583")
        buf.write(u"\3\2\2\2\u0586\u0595\5\u0086D\2\u0587\u0588\7\u0089\2")
        buf.write(u"\2\u0588\u0594\5\u0086D\2\u0589\u058a\7\u008a\2\2\u058a")
        buf.write(u"\u0594\5\u0086D\2\u058b\u058c\7\u0095\2\2\u058c\u0594")
        buf.write(u"\5\u0086D\2\u058d\u058e\7\u0096\2\2\u058e\u0594\5\u0086")
        buf.write(u"D\2\u058f\u0590\7<\2\2\u0590\u0594\5\u008eH\2\u0591\u0592")
        buf.write(u"\7\20\2\2\u0592\u0594\5\f\7\2\u0593\u0587\3\2\2\2\u0593")
        buf.write(u"\u0589\3\2\2\2\u0593\u058b\3\2\2\2\u0593\u058d\3\2\2")
        buf.write(u"\2\u0593\u058f\3\2\2\2\u0593\u0591\3\2\2\2\u0594\u0597")
        buf.write(u"\3\2\2\2\u0595\u0593\3\2\2\2\u0595\u0596\3\2\2\2\u0596")
        buf.write(u"\u0089\3\2\2\2\u0597\u0595\3\2\2\2\u0598\u0599\5\6\4")
        buf.write(u"\2\u0599\u059a\7\u0089\2\2\u059a\u059f\5\f\7\2\u059b")
        buf.write(u"\u059c\7{\2\2\u059c\u059e\5\f\7\2\u059d\u059b\3\2\2\2")
        buf.write(u"\u059e\u05a1\3\2\2\2\u059f\u059d\3\2\2\2\u059f\u05a0")
        buf.write(u"\3\2\2\2\u05a0\u05a2\3\2\2\2\u05a1\u059f\3\2\2\2\u05a2")
        buf.write(u"\u05a3\7\u008a\2\2\u05a3\u05a4\5\u008cG\2\u05a4\u008b")
        buf.write(u"\3\2\2\2\u05a5\u05a6\t\7\2\2\u05a6\u008d\3\2\2\2\u05a7")
        buf.write(u"\u05a9\5\32\16\2\u05a8\u05aa\7\u008b\2\2\u05a9\u05a8")
        buf.write(u"\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u008f\3\2\2\2\u05ab")
        buf.write(u"\u05ac\t\b\2\2\u05ac\u0091\3\2\2\2\u05ad\u05b4\5\u0088")
        buf.write(u"E\2\u05ae\u05af\7\u0093\2\2\u05af\u05b3\5\u0088E\2\u05b0")
        buf.write(u"\u05b1\7\u0094\2\2\u05b1\u05b3\5\u0088E\2\u05b2\u05ae")
        buf.write(u"\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b3\u05b6\3\2\2\2\u05b4")
        buf.write(u"\u05b2\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u0093\3\2\2")
        buf.write(u"\2\u05b6\u05b4\3\2\2\2\u05b7\u05bc\5\u0092J\2\u05b8\u05b9")
        buf.write(u"\7\u0083\2\2\u05b9\u05bb\5\u0092J\2\u05ba\u05b8\3\2\2")
        buf.write(u"\2\u05bb\u05be\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bc\u05bd")
        buf.write(u"\3\2\2\2\u05bd\u0095\3\2\2\2\u05be\u05bc\3\2\2\2\u05bf")
        buf.write(u"\u05c4\5\u0094K\2\u05c0\u05c1\7\u0085\2\2\u05c1\u05c3")
        buf.write(u"\5\u0094K\2\u05c2\u05c0\3\2\2\2\u05c3\u05c6\3\2\2\2\u05c4")
        buf.write(u"\u05c2\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u0097\3\2\2")
        buf.write(u"\2\u05c6\u05c4\3\2\2\2\u05c7\u05cc\5\u0096L\2\u05c8\u05c9")
        buf.write(u"\7\u0084\2\2\u05c9\u05cb\5\u0096L\2\u05ca\u05c8\3\2\2")
        buf.write(u"\2\u05cb\u05ce\3\2\2\2\u05cc\u05ca\3\2\2\2\u05cc\u05cd")
        buf.write(u"\3\2\2\2\u05cd\u0099\3\2\2\2\u05ce\u05cc\3\2\2\2\u05cf")
        buf.write(u"\u05d4\5\u0098M\2\u05d0\u05d1\7\u0090\2\2\u05d1\u05d3")
        buf.write(u"\5\u0098M\2\u05d2\u05d0\3\2\2\2\u05d3\u05d6\3\2\2\2\u05d4")
        buf.write(u"\u05d2\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u009b\3\2\2")
        buf.write(u"\2\u05d6\u05d4\3\2\2\2\u05d7\u05dc\5\u009aN\2\u05d8\u05d9")
        buf.write(u"\7\u0091\2\2\u05d9\u05db\5\u009aN\2\u05da\u05d8\3\2\2")
        buf.write(u"\2\u05db\u05de\3\2\2\2\u05dc\u05da\3\2\2\2\u05dc\u05dd")
        buf.write(u"\3\2\2\2\u05dd\u009d\3\2\2\2\u05de\u05dc\3\2\2\2\u05df")
        buf.write(u"\u05e2\5\u009cO\2\u05e0\u05e1\7\u008d\2\2\u05e1\u05e3")
        buf.write(u"\5\u009eP\2\u05e2\u05e0\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3")
        buf.write(u"\u009f\3\2\2\2\u05e4\u05ea\5\u009eP\2\u05e5\u05e6\7\u008b")
        buf.write(u"\2\2\u05e6\u05e7\5\u00e0q\2\u05e7\u05e8\7|\2\2\u05e8")
        buf.write(u"\u05e9\5\u00e0q\2\u05e9\u05eb\3\2\2\2\u05ea\u05e5\3\2")
        buf.write(u"\2\2\u05ea\u05eb\3\2\2\2\u05eb\u00a1\3\2\2\2\u05ec\u05ed")
        buf.write(u"\5\u00a6T\2\u05ed\u05ee\5\u02f4\u017b\2\u05ee\u05ef\5")
        buf.write(u"\u00b6\\\2\u05ef\u00a3\3\2\2\2\u05f0\u05f2\7 \2\2\u05f1")
        buf.write(u"\u05f3\5\u00a8U\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2")
        buf.write(u"\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f5\5\u00eex\2\u05f5")
        buf.write(u"\u00a5\3\2\2\2\u05f6\u05f7\7x\2\2\u05f7\u0602\7y\2\2")
        buf.write(u"\u05f8\u05f9\7x\2\2\u05f9\u05fa\5\u00aaV\2\u05fa\u05fb")
        buf.write(u"\7y\2\2\u05fb\u0602\3\2\2\2\u05fc\u05fd\7x\2\2\u05fd")
        buf.write(u"\u05fe\5\u00b2Z\2\u05fe\u05ff\7y\2\2\u05ff\u0602\3\2")
        buf.write(u"\2\2\u0600\u0602\5\u00b4[\2\u0601\u05f6\3\2\2\2\u0601")
        buf.write(u"\u05f8\3\2\2\2\u0601\u05fc\3\2\2\2\u0601\u0600\3\2\2")
        buf.write(u"\2\u0602\u00a7\3\2\2\2\u0603\u0605\7x\2\2\u0604\u0606")
        buf.write(u"\5\u00aaV\2\u0605\u0604\3\2\2\2\u0605\u0606\3\2\2\2\u0606")
        buf.write(u"\u0607\3\2\2\2\u0607\u0608\7y\2\2\u0608\u00a9\3\2\2\2")
        buf.write(u"\u0609\u060e\5\u00acW\2\u060a\u060b\7{\2\2\u060b\u060d")
        buf.write(u"\5\u00acW\2\u060c\u060a\3\2\2\2\u060d\u0610\3\2\2\2\u060e")
        buf.write(u"\u060c\3\2\2\2\u060e\u060f\3\2\2\2\u060f\u00ab\3\2\2")
        buf.write(u"\2\u0610\u060e\3\2\2\2\u0611\u0613\5\u00aeX\2\u0612\u0611")
        buf.write(u"\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0614\3\2\2\2\u0614")
        buf.write(u"\u0615\5\f\7\2\u0615\u0616\5\6\4\2\u0616\u00ad\3\2\2")
        buf.write(u"\2\u0617\u0618\t\t\2\2\u0618\u00af\3\2\2\2\u0619\u061b")
        buf.write(u"\7x\2\2\u061a\u061c\5\u00b2Z\2\u061b\u061a\3\2\2\2\u061b")
        buf.write(u"\u061c\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u0620\7y\2\2")
        buf.write(u"\u061e\u0620\5\u00b4[\2\u061f\u0619\3\2\2\2\u061f\u061e")
        buf.write(u"\3\2\2\2\u0620\u00b1\3\2\2\2\u0621\u0626\5\u00b4[\2\u0622")
        buf.write(u"\u0623\7{\2\2\u0623\u0625\5\u00b4[\2\u0624\u0622\3\2")
        buf.write(u"\2\2\u0625\u0628\3\2\2\2\u0626\u0624\3\2\2\2\u0626\u0627")
        buf.write(u"\3\2\2\2\u0627\u00b3\3\2\2\2\u0628\u0626\3\2\2\2\u0629")
        buf.write(u"\u062a\5\6\4\2\u062a\u00b5\3\2\2\2\u062b\u062e\5\u00e0")
        buf.write(u"q\2\u062c\u062e\5\u00eex\2\u062d\u062b\3\2\2\2\u062d")
        buf.write(u"\u062c\3\2\2\2\u062e\u00b7\3\2\2\2\u062f\u0630\5\u00ba")
        buf.write(u"^\2\u0630\u0631\5\u00bc_\2\u0631\u00b9\3\2\2\2\u0632")
        buf.write(u"\u0634\5\u02c8\u0165\2\u0633\u0635\5\f\7\2\u0634\u0633")
        buf.write(u"\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0636\3\2\2\2\u0636")
        buf.write(u"\u0637\5\6\4\2\u0637\u0638\7\67\2\2\u0638\u0639\5\u00e0")
        buf.write(u"q\2\u0639\u00bb\3\2\2\2\u063a\u063c\5\u00be`\2\u063b")
        buf.write(u"\u063a\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063d\3\2\2")
        buf.write(u"\2\u063d\u063f\5\u00d4k\2\u063e\u0640\5\u00dan\2\u063f")
        buf.write(u"\u063e\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u00bd\3\2\2")
        buf.write(u"\2\u0641\u0645\5\u00c0a\2\u0642\u0644\5\u00c0a\2\u0643")
        buf.write(u"\u0642\3\2\2\2\u0644\u0647\3\2\2\2\u0645\u0643\3\2\2")
        buf.write(u"\2\u0645\u0646\3\2\2\2\u0646\u00bf\3\2\2\2\u0647\u0645")
        buf.write(u"\3\2\2\2\u0648\u064e\5\u00ba^\2\u0649\u064e\5\u00c2b")
        buf.write(u"\2\u064a\u064e\5\u00c4c\2\u064b\u064e\5\u00caf\2\u064c")
        buf.write(u"\u064e\5\u00ccg\2\u064d\u0648\3\2\2\2\u064d\u0649\3\2")
        buf.write(u"\2\2\u064d\u064a\3\2\2\2\u064d\u064b\3\2\2\2\u064d\u064c")
        buf.write(u"\3\2\2\2\u064e\u00c1\3\2\2\2\u064f\u0650\5\u02ca\u0166")
        buf.write(u"\2\u0650\u0651\5\6\4\2\u0651\u0652\7\u0088\2\2\u0652")
        buf.write(u"\u0653\5\u00e0q\2\u0653\u00c3\3\2\2\2\u0654\u0655\5\u02cc")
        buf.write(u"\u0167\2\u0655\u0656\5\u00e6t\2\u0656\u00c5\3\2\2\2\u0657")
        buf.write(u"\u0659\5\u02ce\u0168\2\u0658\u065a\5\f\7\2\u0659\u0658")
        buf.write(u"\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065b\3\2\2\2\u065b")
        buf.write(u"\u065c\5\6\4\2\u065c\u065d\7\67\2\2\u065d\u065e\5\u00e0")
        buf.write(u"q\2\u065e\u065f\5\u02d0\u0169\2\u065f\u0660\5\u00e0q")
        buf.write(u"\2\u0660\u0661\5\u02d2\u016a\2\u0661\u0662\5\u00e0q\2")
        buf.write(u"\u0662\u00c7\3\2\2\2\u0663\u0665\5\u02ce\u0168\2\u0664")
        buf.write(u"\u0666\5\f\7\2\u0665\u0664\3\2\2\2\u0665\u0666\3\2\2")
        buf.write(u"\2\u0666\u0667\3\2\2\2\u0667\u0668\5\6\4\2\u0668\u0669")
        buf.write(u"\7\67\2\2\u0669\u066a\5\u00e0q\2\u066a\u066b\5\u02d0")
        buf.write(u"\u0169\2\u066b\u066c\5\u00e0q\2\u066c\u066d\5\u02d2\u016a")
        buf.write(u"\2\u066d\u066e\5\u00e0q\2\u066e\u066f\5\u02d4\u016b\2")
        buf.write(u"\u066f\u0670\5\6\4\2\u0670\u00c9\3\2\2\2\u0671\u0673")
        buf.write(u"\5\u02ce\u0168\2\u0672\u0674\5\f\7\2\u0673\u0672\3\2")
        buf.write(u"\2\2\u0673\u0674\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0676")
        buf.write(u"\5\6\4\2\u0676\u0677\7\67\2\2\u0677\u0678\5\u00e0q\2")
        buf.write(u"\u0678\u0679\5\u02d0\u0169\2\u0679\u067a\5\u00e0q\2\u067a")
        buf.write(u"\u067b\5\u02d2\u016a\2\u067b\u067f\5\u00e0q\2\u067c\u067d")
        buf.write(u"\5\u02d4\u016b\2\u067d\u067e\5\6\4\2\u067e\u0680\3\2")
        buf.write(u"\2\2\u067f\u067c\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u00cb")
        buf.write(u"\3\2\2\2\u0681\u0682\5\u02d6\u016c\2\u0682\u0683\5\u00ce")
        buf.write(u"h\2\u0683\u00cd\3\2\2\2\u0684\u0689\5\u00d0i\2\u0685")
        buf.write(u"\u0686\7{\2\2\u0686\u0688\5\u00d0i\2\u0687\u0685\3\2")
        buf.write(u"\2\2\u0688\u068b\3\2\2\2\u0689\u0687\3\2\2\2\u0689\u068a")
        buf.write(u"\3\2\2\2\u068a\u00cf\3\2\2\2\u068b\u0689\3\2\2\2\u068c")
        buf.write(u"\u068e\5\u00e0q\2\u068d\u068f\5\u00d2j\2\u068e\u068d")
        buf.write(u"\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u00d1\3\2\2\2\u0690")
        buf.write(u"\u0693\5\u02d8\u016d\2\u0691\u0693\5\u02da\u016e\2\u0692")
        buf.write(u"\u0690\3\2\2\2\u0692\u0691\3\2\2\2\u0693\u00d3\3\2\2")
        buf.write(u"\2\u0694\u0697\5\u00d6l\2\u0695\u0697\5\u00d8m\2\u0696")
        buf.write(u"\u0694\3\2\2\2\u0696\u0695\3\2\2\2\u0697\u00d5\3\2\2")
        buf.write(u"\2\u0698\u0699\5\u02dc\u016f\2\u0699\u069a\5\u00e0q\2")
        buf.write(u"\u069a\u00d7\3\2\2\2\u069b\u069c\5\u02de\u0170\2\u069c")
        buf.write(u"\u069d\5\u00e0q\2\u069d\u069e\5\u02e0\u0171\2\u069e\u069f")
        buf.write(u"\5\u00e0q\2\u069f\u00d9\3\2\2\2\u06a0\u06a1\5\u02d4\u016b")
        buf.write(u"\2\u06a1\u06a2\5\6\4\2\u06a2\u06a3\5\u00bc_\2\u06a3\u00db")
        buf.write(u"\3\2\2\2\u06a4\u06a5\5v<\2\u06a5\u06a6\5\u00dep\2\u06a6")
        buf.write(u"\u06a7\5\u00e0q\2\u06a7\u00dd\3\2\2\2\u06a8\u06b4\7\u0088")
        buf.write(u"\2\2\u06a9\u06b4\7\u0097\2\2\u06aa\u06b4\7\u0098\2\2")
        buf.write(u"\u06ab\u06b4\7\u0099\2\2\u06ac\u06b4\7\u009a\2\2\u06ad")
        buf.write(u"\u06b4\7\u009b\2\2\u06ae\u06b4\7\u009c\2\2\u06af\u06b4")
        buf.write(u"\7\u009d\2\2\u06b0\u06b4\7\u009e\2\2\u06b1\u06b4\7\u00a0")
        buf.write(u"\2\2\u06b2\u06b4\5\u02f8\u017d\2\u06b3\u06a8\3\2\2\2")
        buf.write(u"\u06b3\u06a9\3\2\2\2\u06b3\u06aa\3\2\2\2\u06b3\u06ab")
        buf.write(u"\3\2\2\2\u06b3\u06ac\3\2\2\2\u06b3\u06ad\3\2\2\2\u06b3")
        buf.write(u"\u06ae\3\2\2\2\u06b3\u06af\3\2\2\2\u06b3\u06b0\3\2\2")
        buf.write(u"\2\u06b3\u06b1\3\2\2\2\u06b3\u06b2\3\2\2\2\u06b4\u00df")
        buf.write(u"\3\2\2\2\u06b5\u06b8\5\u00dco\2\u06b6\u06b8\5\u00e2r")
        buf.write(u"\2\u06b7\u06b5\3\2\2\2\u06b7\u06b6\3\2\2\2\u06b8\u00e1")
        buf.write(u"\3\2\2\2\u06b9\u06bd\5\u00a2R\2\u06ba\u06bd\5\u00b8]")
        buf.write(u"\2\u06bb\u06bd\5\u00a0Q\2\u06bc\u06b9\3\2\2\2\u06bc\u06ba")
        buf.write(u"\3\2\2\2\u06bc\u06bb\3\2\2\2\u06bd\u00e3\3\2\2\2\u06be")
        buf.write(u"\u06bf\5\u00e0q\2\u06bf\u00e5\3\2\2\2\u06c0\u06c1\5\u00e0")
        buf.write(u"q\2\u06c1\u00e7\3\2\2\2\u06c2\u06c6\5\u00f4{\2\u06c3")
        buf.write(u"\u06c6\5\u00f6|\2\u06c4\u06c6\5\u00eav\2\u06c5\u06c2")
        buf.write(u"\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c5\u06c4\3\2\2\2\u06c6")
        buf.write(u"\u00e9\3\2\2\2\u06c7\u06ca\5\u00eex\2\u06c8\u06ca\5\u00ec")
        buf.write(u"w\2\u06c9\u06c7\3\2\2\2\u06c9\u06c8\3\2\2\2\u06ca\u00eb")
        buf.write(u"\3\2\2\2\u06cb\u06d8\5\u00f2z\2\u06cc\u06d8\5\u0104\u0083")
        buf.write(u"\2\u06cd\u06d8\5\u0108\u0085\2\u06ce\u06d8\5\u011a\u008e")
        buf.write(u"\2\u06cf\u06d8\5\u012c\u0097\2\u06d0\u06d8\5\u0138\u009d")
        buf.write(u"\2\u06d1\u06d8\5\u0144\u00a3\2\u06d2\u06d8\5\u0146\u00a4")
        buf.write(u"\2\u06d3\u06d8\5\u0148\u00a5\2\u06d4\u06d8\5\u014a\u00a6")
        buf.write(u"\2\u06d5\u06d8\5\u014e\u00a8\2\u06d6\u06d8\5\u029a\u014e")
        buf.write(u"\2\u06d7\u06cb\3\2\2\2\u06d7\u06cc\3\2\2\2\u06d7\u06cd")
        buf.write(u"\3\2\2\2\u06d7\u06ce\3\2\2\2\u06d7\u06cf\3\2\2\2\u06d7")
        buf.write(u"\u06d0\3\2\2\2\u06d7\u06d1\3\2\2\2\u06d7\u06d2\3\2\2")
        buf.write(u"\2\u06d7\u06d3\3\2\2\2\u06d7\u06d4\3\2\2\2\u06d7\u06d5")
        buf.write(u"\3\2\2\2\u06d7\u06d6\3\2\2\2\u06d8\u00ed\3\2\2\2\u06d9")
        buf.write(u"\u06db\7t\2\2\u06da\u06dc\5\u00f0y\2\u06db\u06da\3\2")
        buf.write(u"\2\2\u06db\u06dc\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06de")
        buf.write(u"\7u\2\2\u06de\u00ef\3\2\2\2\u06df\u06e1\5\u00e8u\2\u06e0")
        buf.write(u"\u06df\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u06e0\3\2\2")
        buf.write(u"\2\u06e2\u06e3\3\2\2\2\u06e3\u00f1\3\2\2\2\u06e4\u06e5")
        buf.write(u"\7}\2\2\u06e5\u00f3\3\2\2\2\u06e6\u06e7\5\6\4\2\u06e7")
        buf.write(u"\u06e8\7|\2\2\u06e8\u06e9\5\u00e8u\2\u06e9\u00f5\3\2")
        buf.write(u"\2\2\u06ea\u06eb\5\u00f8}\2\u06eb\u06ec\7}\2\2\u06ec")
        buf.write(u"\u06f1\3\2\2\2\u06ed\u06ee\5\u0102\u0082\2\u06ee\u06ef")
        buf.write(u"\7}\2\2\u06ef\u06f1\3\2\2\2\u06f0\u06ea\3\2\2\2\u06f0")
        buf.write(u"\u06ed\3\2\2\2\u06f1\u00f7\3\2\2\2\u06f2\u06f3\5\u00fa")
        buf.write(u"~\2\u06f3\u06f4\5\u00fc\177\2\u06f4\u00f9\3\2\2\2\u06f5")
        buf.write(u"\u06f6\5\f\7\2\u06f6\u00fb\3\2\2\2\u06f7\u06fc\5\u00fe")
        buf.write(u"\u0080\2\u06f8\u06f9\7{\2\2\u06f9\u06fb\5\u00fe\u0080")
        buf.write(u"\2\u06fa\u06f8\3\2\2\2\u06fb\u06fe\3\2\2\2\u06fc\u06fa")
        buf.write(u"\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u00fd\3\2\2\2\u06fe")
        buf.write(u"\u06fc\3\2\2\2\u06ff\u0702\5\6\4\2\u0700\u0701\7\u0088")
        buf.write(u"\2\2\u0701\u0703\5\u0100\u0081\2\u0702\u0700\3\2\2\2")
        buf.write(u"\u0702\u0703\3\2\2\2\u0703\u00ff\3\2\2\2\u0704\u0708")
        buf.write(u"\5\u00e0q\2\u0705\u0708\5\u0224\u0113\2\u0706\u0708\5")
        buf.write(u"\u02c4\u0163\2\u0707\u0704\3\2\2\2\u0707\u0705\3\2\2")
        buf.write(u"\2\u0707\u0706\3\2\2\2\u0708\u0101\3\2\2\2\u0709\u070a")
        buf.write(u"\7\34\2\2\u070a\u070b\5\f\7\2\u070b\u070c\5\u0196\u00cc")
        buf.write(u"\2\u070c\u0103\3\2\2\2\u070d\u070e\5\u0106\u0084\2\u070e")
        buf.write(u"\u070f\7}\2\2\u070f\u0105\3\2\2\2\u0710\u0711\5\u00e0")
        buf.write(u"q\2\u0711\u0107\3\2\2\2\u0712\u0715\5\u010c\u0087\2\u0713")
        buf.write(u"\u0715\5\u010e\u0088\2\u0714\u0712\3\2\2\2\u0714\u0713")
        buf.write(u"\3\2\2\2\u0715\u0109\3\2\2\2\u0716\u0719\5\u00eex\2\u0717")
        buf.write(u"\u0719\5\u00ecw\2\u0718\u0716\3\2\2\2\u0718\u0717\3\2")
        buf.write(u"\2\2\u0719\u010b\3\2\2\2\u071a\u071b\7\65\2\2\u071b\u071c")
        buf.write(u"\7x\2\2\u071c\u071d\5\u00e6t\2\u071d\u071e\7y\2\2\u071e")
        buf.write(u"\u0721\5\u010a\u0086\2\u071f\u0720\7%\2\2\u0720\u0722")
        buf.write(u"\5\u010a\u0086\2\u0721\u071f\3\2\2\2\u0721\u0722\3\2")
        buf.write(u"\2\2\u0722\u010d\3\2\2\2\u0723\u0724\7]\2\2\u0724\u0725")
        buf.write(u"\7x\2\2\u0725\u0726\5\u00e0q\2\u0726\u0727\7y\2\2\u0727")
        buf.write(u"\u0728\5\u0110\u0089\2\u0728\u010f\3\2\2\2\u0729\u072b")
        buf.write(u"\7t\2\2\u072a\u072c\5\u0112\u008a\2\u072b\u072a\3\2\2")
        buf.write(u"\2\u072b\u072c\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u072e")
        buf.write(u"\7u\2\2\u072e\u0111\3\2\2\2\u072f\u0733\5\u0114\u008b")
        buf.write(u"\2\u0730\u0732\5\u0114\u008b\2\u0731\u0730\3\2\2\2\u0732")
        buf.write(u"\u0735\3\2\2\2\u0733\u0731\3\2\2\2\u0733\u0734\3\2\2")
        buf.write(u"\2\u0734\u0113\3\2\2\2\u0735\u0733\3\2\2\2\u0736\u0737")
        buf.write(u"\5\u0116\u008c\2\u0737\u0738\5\u00f0y\2\u0738\u0115\3")
        buf.write(u"\2\2\2\u0739\u073d\5\u0118\u008d\2\u073a\u073c\5\u0118")
        buf.write(u"\u008d\2\u073b\u073a\3\2\2\2\u073c\u073f\3\2\2\2\u073d")
        buf.write(u"\u073b\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u0117\3\2\2")
        buf.write(u"\2\u073f\u073d\3\2\2\2\u0740\u0741\7\27\2\2\u0741\u0742")
        buf.write(u"\5\u00e4s\2\u0742\u0743\7|\2\2\u0743\u0747\3\2\2\2\u0744")
        buf.write(u"\u0745\7\37\2\2\u0745\u0747\7|\2\2\u0746\u0740\3\2\2")
        buf.write(u"\2\u0746\u0744\3\2\2\2\u0747\u0119\3\2\2\2\u0748\u074d")
        buf.write(u"\5\u011c\u008f\2\u0749\u074d\5\u011e\u0090\2\u074a\u074d")
        buf.write(u"\5\u0120\u0091\2\u074b\u074d\5\u012a\u0096\2\u074c\u0748")
        buf.write(u"\3\2\2\2\u074c\u0749\3\2\2\2\u074c\u074a\3\2\2\2\u074c")
        buf.write(u"\u074b\3\2\2\2\u074d\u011b\3\2\2\2\u074e\u074f\7l\2\2")
        buf.write(u"\u074f\u0750\7x\2\2\u0750\u0751\5\u00e6t\2\u0751\u0752")
        buf.write(u"\7y\2\2\u0752\u0753\5\u00eav\2\u0753\u011d\3\2\2\2\u0754")
        buf.write(u"\u0755\7\"\2\2\u0755\u0756\5\u00eav\2\u0756\u0757\7l")
        buf.write(u"\2\2\u0757\u0758\7x\2\2\u0758\u0759\5\u00e6t\2\u0759")
        buf.write(u"\u075a\7y\2\2\u075a\u075b\7}\2\2\u075b\u011f\3\2\2\2")
        buf.write(u"\u075c\u075d\7/\2\2\u075d\u075f\7x\2\2\u075e\u0760\5")
        buf.write(u"\u0122\u0092\2\u075f\u075e\3\2\2\2\u075f\u0760\3\2\2")
        buf.write(u"\2\u0760\u0761\3\2\2\2\u0761\u0763\7}\2\2\u0762\u0764")
        buf.write(u"\5\u0124\u0093\2\u0763\u0762\3\2\2\2\u0763\u0764\3\2")
        buf.write(u"\2\2\u0764\u0765\3\2\2\2\u0765\u0767\7}\2\2\u0766\u0768")
        buf.write(u"\5\u0126\u0094\2\u0767\u0766\3\2\2\2\u0767\u0768\3\2")
        buf.write(u"\2\2\u0768\u0769\3\2\2\2\u0769\u076a\7y\2\2\u076a\u076b")
        buf.write(u"\5\u00eav\2\u076b\u0121\3\2\2\2\u076c\u076f\5\u00f8}")
        buf.write(u"\2\u076d\u076f\5\u0128\u0095\2\u076e\u076c\3\2\2\2\u076e")
        buf.write(u"\u076d\3\2\2\2\u076f\u0123\3\2\2\2\u0770\u0771\5\u00e6")
        buf.write(u"t\2\u0771\u0125\3\2\2\2\u0772\u0773\5\u0128\u0095\2\u0773")
        buf.write(u"\u0127\3\2\2\2\u0774\u0779\5\u0106\u0084\2\u0775\u0776")
        buf.write(u"\7{\2\2\u0776\u0778\5\u0106\u0084\2\u0777\u0775\3\2\2")
        buf.write(u"\2\u0778\u077b\3\2\2\2\u0779\u0777\3\2\2\2\u0779\u077a")
        buf.write(u"\3\2\2\2\u077a\u0129\3\2\2\2\u077b\u0779\3\2\2\2\u077c")
        buf.write(u"\u077d\7\60\2\2\u077d\u077e\7x\2\2\u077e\u077f\5\u00fa")
        buf.write(u"~\2\u077f\u0780\5\6\4\2\u0780\u0781\7\67\2\2\u0781\u0782")
        buf.write(u"\5\u00e0q\2\u0782\u0783\7y\2\2\u0783\u0784\5\u00eav\2")
        buf.write(u"\u0784\u012b\3\2\2\2\u0785\u078b\5\u012e\u0098\2\u0786")
        buf.write(u"\u078b\5\u0130\u0099\2\u0787\u078b\5\u0132\u009a\2\u0788")
        buf.write(u"\u078b\5\u0134\u009b\2\u0789\u078b\5\u0136\u009c\2\u078a")
        buf.write(u"\u0785\3\2\2\2\u078a\u0786\3\2\2\2\u078a\u0787\3\2\2")
        buf.write(u"\2\u078a\u0788\3\2\2\2\u078a\u0789\3\2\2\2\u078b\u012d")
        buf.write(u"\3\2\2\2\u078c\u078d\7\24\2\2\u078d\u078e\7}\2\2\u078e")
        buf.write(u"\u012f\3\2\2\2\u078f\u0790\7\35\2\2\u0790\u0791\7}\2")
        buf.write(u"\2\u0791\u0131\3\2\2\2\u0792\u0793\7\63\2\2\u0793\u0794")
        buf.write(u"\5\6\4\2\u0794\u0795\7}\2\2\u0795\u079f\3\2\2\2\u0796")
        buf.write(u"\u0797\7\63\2\2\u0797\u0798\7\27\2\2\u0798\u0799\5\u00e4")
        buf.write(u"s\2\u0799\u079a\7}\2\2\u079a\u079f\3\2\2\2\u079b\u079c")
        buf.write(u"\7\63\2\2\u079c\u079d\7\37\2\2\u079d\u079f\7}\2\2\u079e")
        buf.write(u"\u0792\3\2\2\2\u079e\u0796\3\2\2\2\u079e\u079b\3\2\2")
        buf.write(u"\2\u079f\u0133\3\2\2\2\u07a0\u07a2\7R\2\2\u07a1\u07a3")
        buf.write(u"\5\u00e0q\2\u07a2\u07a1\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3")
        buf.write(u"\u07a4\3\2\2\2\u07a4\u07a5\7}\2\2\u07a5\u0135\3\2\2\2")
        buf.write(u"\u07a6\u07a8\7_\2\2\u07a7\u07a9\5\u00e0q\2\u07a8\u07a7")
        buf.write(u"\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa")
        buf.write(u"\u07ab\7}\2\2\u07ab\u0137\3\2\2\2\u07ac\u07ad\7a\2\2")
        buf.write(u"\u07ad\u07af\5\u00eex\2\u07ae\u07b0\5\u013a\u009e\2\u07af")
        buf.write(u"\u07ae\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u07b2\3\2\2")
        buf.write(u"\2\u07b1\u07b3\5\u0142\u00a2\2\u07b2\u07b1\3\2\2\2\u07b2")
        buf.write(u"\u07b3\3\2\2\2\u07b3\u0139\3\2\2\2\u07b4\u07b6\5\u013c")
        buf.write(u"\u009f\2\u07b5\u07b7\5\u0140\u00a1\2\u07b6\u07b5\3\2")
        buf.write(u"\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07ba\3\2\2\2\u07b8\u07ba")
        buf.write(u"\5\u0140\u00a1\2\u07b9\u07b4\3\2\2\2\u07b9\u07b8\3\2")
        buf.write(u"\2\2\u07ba\u013b\3\2\2\2\u07bb\u07bf\5\u013e\u00a0\2")
        buf.write(u"\u07bc\u07be\5\u013e\u00a0\2\u07bd\u07bc\3\2\2\2\u07be")
        buf.write(u"\u07c1\3\2\2\2\u07bf\u07bd\3\2\2\2\u07bf\u07c0\3\2\2")
        buf.write(u"\2\u07c0\u013d\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c2\u07c3")
        buf.write(u"\7\30\2\2\u07c3\u07c4\7x\2\2\u07c4\u07c6\5\36\20\2\u07c5")
        buf.write(u"\u07c7\5\6\4\2\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2\2")
        buf.write(u"\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\7y\2\2\u07c9\u07ca")
        buf.write(u"\5\u00eex\2\u07ca\u013f\3\2\2\2\u07cb\u07cc\7\30\2\2")
        buf.write(u"\u07cc\u07cd\5\u00eex\2\u07cd\u0141\3\2\2\2\u07ce\u07cf")
        buf.write(u"\7,\2\2\u07cf\u07d0\5\u00eex\2\u07d0\u0143\3\2\2\2\u07d1")
        buf.write(u"\u07d2\7\32\2\2\u07d2\u07d3\5\u00eex\2\u07d3\u0145\3")
        buf.write(u"\2\2\2\u07d4\u07d5\7d\2\2\u07d5\u07d6\5\u00eex\2\u07d6")
        buf.write(u"\u0147\3\2\2\2\u07d7\u07d8\7?\2\2\u07d8\u07d9\7x\2\2")
        buf.write(u"\u07d9\u07da\5\u00e0q\2\u07da\u07db\7y\2\2\u07db\u07dc")
        buf.write(u"\5\u00eav\2\u07dc\u0149\3\2\2\2\u07dd\u07de\7g\2\2\u07de")
        buf.write(u"\u07df\7x\2\2\u07df\u07e0\5\u014c\u00a7\2\u07e0\u07e1")
        buf.write(u"\7y\2\2\u07e1\u07e2\5\u00eav\2\u07e2\u014b\3\2\2\2\u07e3")
        buf.write(u"\u07e6\5\u00f8}\2\u07e4\u07e6\5\u00e0q\2\u07e5\u07e3")
        buf.write(u"\3\2\2\2\u07e5\u07e4\3\2\2\2\u07e6\u014d\3\2\2\2\u07e7")
        buf.write(u"\u07e8\5\u02e6\u0174\2\u07e8\u07e9\7R\2\2\u07e9\u07ea")
        buf.write(u"\5\u00e0q\2\u07ea\u07eb\7}\2\2\u07eb\u07f1\3\2\2\2\u07ec")
        buf.write(u"\u07ed\5\u02e6\u0174\2\u07ed\u07ee\7\24\2\2\u07ee\u07ef")
        buf.write(u"\7}\2\2\u07ef\u07f1\3\2\2\2\u07f0\u07e7\3\2\2\2\u07f0")
        buf.write(u"\u07ec\3\2\2\2\u07f1\u014f\3\2\2\2\u07f2\u07f4\7\5\2")
        buf.write(u"\2\u07f3\u07f2\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f6")
        buf.write(u"\3\2\2\2\u07f5\u07f7\5\u0158\u00ad\2\u07f6\u07f5\3\2")
        buf.write(u"\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07f9\3\2\2\2\u07f8\u07fa")
        buf.write(u"\5\u015c\u00af\2\u07f9\u07f8\3\2\2\2\u07f9\u07fa\3\2")
        buf.write(u"\2\2\u07fa\u07fe\3\2\2\2\u07fb\u07fd\5\u025e\u0130\2")
        buf.write(u"\u07fc\u07fb\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe\u07fc")
        buf.write(u"\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0802\3\2\2\2\u0800")
        buf.write(u"\u07fe\3\2\2\2\u0801\u0803\5\u0164\u00b3\2\u0802\u0801")
        buf.write(u"\3\2\2\2\u0802\u0803\3\2\2\2\u0803\u0804\3\2\2\2\u0804")
        buf.write(u"\u0805\7\2\2\3\u0805\u0151\3\2\2\2\u0806\u0807\7A\2\2")
        buf.write(u"\u0807\u0808\5\u0154\u00ab\2\u0808\u080a\5\u0156\u00ac")
        buf.write(u"\2\u0809\u080b\7}\2\2\u080a\u0809\3\2\2\2\u080a\u080b")
        buf.write(u"\3\2\2\2\u080b\u0153\3\2\2\2\u080c\u0811\5\6\4\2\u080d")
        buf.write(u"\u080e\7z\2\2\u080e\u0810\5\6\4\2\u080f\u080d\3\2\2\2")
        buf.write(u"\u0810\u0813\3\2\2\2\u0811\u080f\3\2\2\2\u0811\u0812")
        buf.write(u"\3\2\2\2\u0812\u0155\3\2\2\2\u0813\u0811\3\2\2\2\u0814")
        buf.write(u"\u0816\7t\2\2\u0815\u0817\5\u0158\u00ad\2\u0816\u0815")
        buf.write(u"\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0819\3\2\2\2\u0818")
        buf.write(u"\u081a\5\u015c\u00af\2\u0819\u0818\3\2\2\2\u0819\u081a")
        buf.write(u"\3\2\2\2\u081a\u081c\3\2\2\2\u081b\u081d\5\u0164\u00b3")
        buf.write(u"\2\u081c\u081b\3\2\2\2\u081c\u081d\3\2\2\2\u081d\u081e")
        buf.write(u"\3\2\2\2\u081e\u081f\7u\2\2\u081f\u0157\3\2\2\2\u0820")
        buf.write(u"\u0822\5\u015a\u00ae\2\u0821\u0820\3\2\2\2\u0822\u0823")
        buf.write(u"\3\2\2\2\u0823\u0821\3\2\2\2\u0823\u0824\3\2\2\2\u0824")
        buf.write(u"\u0159\3\2\2\2\u0825\u0826\7*\2\2\u0826\u0827\5\u02e4")
        buf.write(u"\u0173\2\u0827\u0828\5\6\4\2\u0828\u0829\7}\2\2\u0829")
        buf.write(u"\u015b\3\2\2\2\u082a\u082c\5\u015e\u00b0\2\u082b\u082a")
        buf.write(u"\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082b\3\2\2\2\u082d")
        buf.write(u"\u082e\3\2\2\2\u082e\u015d\3\2\2\2\u082f\u0832\5\u0160")
        buf.write(u"\u00b1\2\u0830\u0832\5\u0162\u00b2\2\u0831\u082f\3\2")
        buf.write(u"\2\2\u0831\u0830\3\2\2\2\u0832\u015f\3\2\2\2\u0833\u0834")
        buf.write(u"\7g\2\2\u0834\u0835\5\6\4\2\u0835\u0836\7\u0088\2\2\u0836")
        buf.write(u"\u0837\5\b\5\2\u0837\u0838\7}\2\2\u0838\u0161\3\2\2\2")
        buf.write(u"\u0839\u083a\7g\2\2\u083a\u083b\5\2\2\2\u083b\u083c\7")
        buf.write(u"}\2\2\u083c\u0163\3\2\2\2\u083d\u083f\5\u0166\u00b4\2")
        buf.write(u"\u083e\u083d\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u083e")
        buf.write(u"\3\2\2\2\u0840\u0841\3\2\2\2\u0841\u0165\3\2\2\2\u0842")
        buf.write(u"\u0845\5\u0152\u00aa\2\u0843\u0845\5\u0168\u00b5\2\u0844")
        buf.write(u"\u0842\3\2\2\2\u0844\u0843\3\2\2\2\u0845\u0167\3\2\2")
        buf.write(u"\2\u0846\u0848\5\u0264\u0133\2\u0847\u0846\3\2\2\2\u0847")
        buf.write(u"\u0848\3\2\2\2\u0848\u084a\3\2\2\2\u0849\u084b\5\u018e")
        buf.write(u"\u00c8\2\u084a\u0849\3\2\2\2\u084a\u084b\3\2\2\2\u084b")
        buf.write(u"\u0851\3\2\2\2\u084c\u0852\5\u0300\u0181\2\u084d\u0852")
        buf.write(u"\5\u0302\u0182\2\u084e\u0852\5\u0304\u0183\2\u084f\u0852")
        buf.write(u"\5\u0306\u0184\2\u0850\u0852\5\u0308\u0185\2\u0851\u084c")
        buf.write(u"\3\2\2\2\u0851\u084d\3\2\2\2\u0851\u084e\3\2\2\2\u0851")
        buf.write(u"\u084f\3\2\2\2\u0851\u0850\3\2\2\2\u0852\u0169\3\2\2")
        buf.write(u"\2\u0853\u0854\5\6\4\2\u0854\u0855\7\u008c\2\2\u0855")
        buf.write(u"\u0856\5\6\4\2\u0856\u0857\5\n\6\2\u0857\u016b\3\2\2")
        buf.write(u"\2\u0858\u085a\5\u0264\u0133\2\u0859\u0858\3\2\2\2\u0859")
        buf.write(u"\u085a\3\2\2\2\u085a\u085c\3\2\2\2\u085b\u085d\5\u016e")
        buf.write(u"\u00b8\2\u085c\u085b\3\2\2\2\u085c\u085d\3\2\2\2\u085d")
        buf.write(u"\u085f\3\2\2\2\u085e\u0860\5\u02e2\u0172\2\u085f\u085e")
        buf.write(u"\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u0861\3\2\2\2\u0861")
        buf.write(u"\u0862\7\33\2\2\u0862\u0864\5\6\4\2\u0863\u0865\5\u0172")
        buf.write(u"\u00ba\2\u0864\u0863\3\2\2\2\u0864\u0865\3\2\2\2\u0865")
        buf.write(u"\u0867\3\2\2\2\u0866\u0868\5\u0178\u00bd\2\u0867\u0866")
        buf.write(u"\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u086a\3\2\2\2\u0869")
        buf.write(u"\u086b\5\u017c\u00bf\2\u086a\u0869\3\2\2\2\u086a\u086b")
        buf.write(u"\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086e\5\u0188\u00c5")
        buf.write(u"\2\u086d\u086f\7}\2\2\u086e\u086d\3\2\2\2\u086e\u086f")
        buf.write(u"\3\2\2\2\u086f\u016d\3\2\2\2\u0870\u0874\5\u0170\u00b9")
        buf.write(u"\2\u0871\u0873\5\u0170\u00b9\2\u0872\u0871\3\2\2\2\u0873")
        buf.write(u"\u0876\3\2\2\2\u0874\u0872\3\2\2\2\u0874\u0875\3\2\2")
        buf.write(u"\2\u0875\u016f\3\2\2\2\u0876\u0874\3\2\2\2\u0877\u0881")
        buf.write(u"\7B\2\2\u0878\u0881\7N\2\2\u0879\u0881\7M\2\2\u087a\u0881")
        buf.write(u"\7:\2\2\u087b\u0881\7L\2\2\u087c\u0881\7\f\2\2\u087d")
        buf.write(u"\u0881\7T\2\2\u087e\u0881\7Z\2\2\u087f\u0881\5\u0280")
        buf.write(u"\u0141\2\u0880\u0877\3\2\2\2\u0880\u0878\3\2\2\2\u0880")
        buf.write(u"\u0879\3\2\2\2\u0880\u087a\3\2\2\2\u0880\u087b\3\2\2")
        buf.write(u"\2\u0880\u087c\3\2\2\2\u0880\u087d\3\2\2\2\u0880\u087e")
        buf.write(u"\3\2\2\2\u0880\u087f\3\2\2\2\u0881\u0171\3\2\2\2\u0882")
        buf.write(u"\u0883\7\u0089\2\2\u0883\u0884\5\u0174\u00bb\2\u0884")
        buf.write(u"\u0885\7\u008a\2\2\u0885\u0173\3\2\2\2\u0886\u0888\5")
        buf.write(u"\u0264\u0133\2\u0887\u0886\3\2\2\2\u0887\u0888\3\2\2")
        buf.write(u"\2\u0888\u0889\3\2\2\2\u0889\u0891\5\u0176\u00bc\2\u088a")
        buf.write(u"\u088c\7{\2\2\u088b\u088d\5\u0264\u0133\2\u088c\u088b")
        buf.write(u"\3\2\2\2\u088c\u088d\3\2\2\2\u088d\u088e\3\2\2\2\u088e")
        buf.write(u"\u0890\5\u0176\u00bc\2\u088f\u088a\3\2\2\2\u0890\u0893")
        buf.write(u"\3\2\2\2\u0891\u088f\3\2\2\2\u0891\u0892\3\2\2\2\u0892")
        buf.write(u"\u0175\3\2\2\2\u0893\u0891\3\2\2\2\u0894\u0895\5\6\4")
        buf.write(u"\2\u0895\u0177\3\2\2\2\u0896\u0897\7|\2\2\u0897\u089c")
        buf.write(u"\5\36\20\2\u0898\u0899\7{\2\2\u0899\u089b\5 \21\2\u089a")
        buf.write(u"\u0898\3\2\2\2\u089b\u089e\3\2\2\2\u089c\u089a\3\2\2")
        buf.write(u"\2\u089c\u089d\3\2\2\2\u089d\u0179\3\2\2\2\u089e\u089c")
        buf.write(u"\3\2\2\2\u089f\u08a4\5 \21\2\u08a0\u08a1\7{\2\2\u08a1")
        buf.write(u"\u08a3\5 \21\2\u08a2\u08a0\3\2\2\2\u08a3\u08a6\3\2\2")
        buf.write(u"\2\u08a4\u08a2\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u017b")
        buf.write(u"\3\2\2\2\u08a6\u08a4\3\2\2\2\u08a7\u08ab\5\u017e\u00c0")
        buf.write(u"\2\u08a8\u08aa\5\u017e\u00c0\2\u08a9\u08a8\3\2\2\2\u08aa")
        buf.write(u"\u08ad\3\2\2\2\u08ab\u08a9\3\2\2\2\u08ab\u08ac\3\2\2")
        buf.write(u"\2\u08ac\u017d\3\2\2\2\u08ad\u08ab\3\2\2\2\u08ae\u08af")
        buf.write(u"\5\u02cc\u0167\2\u08af\u08b0\5\u0176\u00bc\2\u08b0\u08b1")
        buf.write(u"\7|\2\2\u08b1\u08b2\5\u0180\u00c1\2\u08b2\u017f\3\2\2")
        buf.write(u"\2\u08b3\u08be\5\u0186\u00c4\2\u08b4\u08b7\5\u0182\u00c2")
        buf.write(u"\2\u08b5\u08b6\7{\2\2\u08b6\u08b8\5\u0184\u00c3\2\u08b7")
        buf.write(u"\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08bb\3\2\2")
        buf.write(u"\2\u08b9\u08ba\7{\2\2\u08ba\u08bc\5\u0186\u00c4\2\u08bb")
        buf.write(u"\u08b9\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08be\3\2\2")
        buf.write(u"\2\u08bd\u08b3\3\2\2\2\u08bd\u08b4\3\2\2\2\u08be\u0181")
        buf.write(u"\3\2\2\2\u08bf\u08c3\5\36\20\2\u08c0\u08c3\7\33\2\2\u08c1")
        buf.write(u"\u08c3\7\\\2\2\u08c2\u08bf\3\2\2\2\u08c2\u08c0\3\2\2")
        buf.write(u"\2\u08c2\u08c1\3\2\2\2\u08c3\u0183\3\2\2\2\u08c4\u08c9")
        buf.write(u"\5 \21\2\u08c5\u08c6\7{\2\2\u08c6\u08c8\5 \21\2\u08c7")
        buf.write(u"\u08c5\3\2\2\2\u08c8\u08cb\3\2\2\2\u08c9\u08c7\3\2\2")
        buf.write(u"\2\u08c9\u08ca\3\2\2\2\u08ca\u0185\3\2\2\2\u08cb\u08c9")
        buf.write(u"\3\2\2\2\u08cc\u08cd\7B\2\2\u08cd\u08ce\7x\2\2\u08ce")
        buf.write(u"\u08cf\7y\2\2\u08cf\u0187\3\2\2\2\u08d0\u08d2\7t\2\2")
        buf.write(u"\u08d1\u08d3\5\u018a\u00c6\2\u08d2\u08d1\3\2\2\2\u08d2")
        buf.write(u"\u08d3\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\7u\2\2")
        buf.write(u"\u08d5\u0189\3\2\2\2\u08d6\u08d8\5\u018c\u00c7\2\u08d7")
        buf.write(u"\u08d6\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u08d7\3\2\2")
        buf.write(u"\2\u08d9\u08da\3\2\2\2\u08da\u018b\3\2\2\2\u08db\u08dd")
        buf.write(u"\5\u0264\u0133\2\u08dc\u08db\3\2\2\2\u08dc\u08dd\3\2")
        buf.write(u"\2\2\u08dd\u08df\3\2\2\2\u08de\u08e0\5\u018e\u00c8\2")
        buf.write(u"\u08df\u08de\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e8")
        buf.write(u"\3\2\2\2\u08e1\u08e9\5\u0192\u00ca\2\u08e2\u08e3\7\u0087")
        buf.write(u"\2\2\u08e3\u08e4\5\6\4\2\u08e4\u08e5\7x\2\2\u08e5\u08e6")
        buf.write(u"\7y\2\2\u08e6\u08e7\5\u0208\u0105\2\u08e7\u08e9\3\2\2")
        buf.write(u"\2\u08e8\u08e1\3\2\2\2\u08e8\u08e2\3\2\2\2\u08e9\u08ec")
        buf.write(u"\3\2\2\2\u08ea\u08ec\7\4\2\2\u08eb\u08dc\3\2\2\2\u08eb")
        buf.write(u"\u08ea\3\2\2\2\u08ec\u018d\3\2\2\2\u08ed\u08ef\5\u0190")
        buf.write(u"\u00c9\2\u08ee\u08ed\3\2\2\2\u08ef\u08f0\3\2\2\2\u08f0")
        buf.write(u"\u08ee\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u018f\3\2\2")
        buf.write(u"\2\u08f2\u0902\7B\2\2\u08f3\u0902\7N\2\2\u08f4\u0902")
        buf.write(u"\7M\2\2\u08f5\u0902\7:\2\2\u08f6\u0902\7L\2\2\u08f7\u0902")
        buf.write(u"\7O\2\2\u08f8\u0902\7j\2\2\u08f9\u0902\7h\2\2\u08fa\u0902")
        buf.write(u"\7T\2\2\u08fb\u0902\7I\2\2\u08fc\u0902\7\f\2\2\u08fd")
        buf.write(u"\u0902\7Z\2\2\u08fe\u0902\7e\2\2\u08ff\u0902\7*\2\2\u0900")
        buf.write(u"\u0902\5\u02e2\u0172\2\u0901\u08f2\3\2\2\2\u0901\u08f3")
        buf.write(u"\3\2\2\2\u0901\u08f4\3\2\2\2\u0901\u08f5\3\2\2\2\u0901")
        buf.write(u"\u08f6\3\2\2\2\u0901\u08f7\3\2\2\2\u0901\u08f8\3\2\2")
        buf.write(u"\2\u0901\u08f9\3\2\2\2\u0901\u08fa\3\2\2\2\u0901\u08fb")
        buf.write(u"\3\2\2\2\u0901\u08fc\3\2\2\2\u0901\u08fd\3\2\2\2\u0901")
        buf.write(u"\u08fe\3\2\2\2\u0901\u08ff\3\2\2\2\u0901\u0900\3\2\2")
        buf.write(u"\2\u0902\u0191\3\2\2\2\u0903\u0913\5\u0310\u0189\2\u0904")
        buf.write(u"\u0913\5\u0194\u00cb\2\u0905\u0913\5\u030a\u0186\2\u0906")
        buf.write(u"\u0907\5\u01f0\u00f9\2\u0907\u0908\5\u01f2\u00fa\2\u0908")
        buf.write(u"\u0913\3\2\2\2\u0909\u0913\5\u0316\u018c\2\u090a\u090b")
        buf.write(u"\5*\26\2\u090b\u090c\5\u0318\u018d\2\u090c\u0913\3\2")
        buf.write(u"\2\2\u090d\u0913\5\u0300\u0181\2\u090e\u0913\5\u0302")
        buf.write(u"\u0182\2\u090f\u0913\5\u0304\u0183\2\u0910\u0913\5\u0306")
        buf.write(u"\u0184\2\u0911\u0913\5\u0308\u0185\2\u0912\u0903\3\2")
        buf.write(u"\2\2\u0912\u0904\3\2\2\2\u0912\u0905\3\2\2\2\u0912\u0906")
        buf.write(u"\3\2\2\2\u0912\u0909\3\2\2\2\u0912\u090a\3\2\2\2\u0912")
        buf.write(u"\u090d\3\2\2\2\u0912\u090e\3\2\2\2\u0912\u090f\3\2\2")
        buf.write(u"\2\u0912\u0910\3\2\2\2\u0912\u0911\3\2\2\2\u0913\u0193")
        buf.write(u"\3\2\2\2\u0914\u091e\5\f\7\2\u0915\u0916\5 \21\2\u0916")
        buf.write(u"\u0917\7z\2\2\u0917\u0918\5\u0312\u018a\2\u0918\u091f")
        buf.write(u"\3\2\2\2\u0919\u091f\5\u0318\u018d\2\u091a\u091f\5\u030e")
        buf.write(u"\u0188\2\u091b\u091f\5\u0312\u018a\2\u091c\u091f\5\u031e")
        buf.write(u"\u0190\2\u091d\u091f\5\u030c\u0187\2\u091e\u0915\3\2")
        buf.write(u"\2\2\u091e\u0919\3\2\2\2\u091e\u091a\3\2\2\2\u091e\u091b")
        buf.write(u"\3\2\2\2\u091e\u091c\3\2\2\2\u091e\u091d\3\2\2\2\u091f")
        buf.write(u"\u0195\3\2\2\2\u0920\u0925\5\u0198\u00cd\2\u0921\u0922")
        buf.write(u"\7{\2\2\u0922\u0924\5\u0198\u00cd\2\u0923\u0921\3\2\2")
        buf.write(u"\2\u0924\u0927\3\2\2\2\u0925\u0923\3\2\2\2\u0925\u0926")
        buf.write(u"\3\2\2\2\u0926\u0197\3\2\2\2\u0927\u0925\3\2\2\2\u0928")
        buf.write(u"\u0929\5\6\4\2\u0929\u092a\7\u0088\2\2\u092a\u092b\5")
        buf.write(u"\u00e4s\2\u092b\u0199\3\2\2\2\u092c\u0931\5\u019c\u00cf")
        buf.write(u"\2\u092d\u092e\7{\2\2\u092e\u0930\5\u019c\u00cf\2\u092f")
        buf.write(u"\u092d\3\2\2\2\u0930\u0933\3\2\2\2\u0931\u092f\3\2\2")
        buf.write(u"\2\u0931\u0932\3\2\2\2\u0932\u019b\3\2\2\2\u0933\u0931")
        buf.write(u"\3\2\2\2\u0934\u093a\5\6\4\2\u0935\u0936\5\6\4\2\u0936")
        buf.write(u"\u0937\7\u0088\2\2\u0937\u0938\5\u019e\u00d0\2\u0938")
        buf.write(u"\u093a\3\2\2\2\u0939\u0934\3\2\2\2\u0939\u0935\3\2\2")
        buf.write(u"\2\u093a\u019d\3\2\2\2\u093b\u093e\5\u00e0q\2\u093c\u093e")
        buf.write(u"\5\u0224\u0113\2\u093d\u093b\3\2\2\2\u093d\u093c\3\2")
        buf.write(u"\2\2\u093e\u019f\3\2\2\2\u093f\u0940\5\u01a2\u00d2\2")
        buf.write(u"\u0940\u0941\5\u01ac\u00d7\2\u0941\u01a1\3\2\2\2\u0942")
        buf.write(u"\u0944\5\u0264\u0133\2\u0943\u0942\3\2\2\2\u0943\u0944")
        buf.write(u"\3\2\2\2\u0944\u0946\3\2\2\2\u0945\u0947\5\u01a4\u00d3")
        buf.write(u"\2\u0946\u0945\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0949")
        buf.write(u"\3\2\2\2\u0948\u094a\5\u02e2\u0172\2\u0949\u0948\3\2")
        buf.write(u"\2\2\u0949\u094a\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094c")
        buf.write(u"\5\u01a8\u00d5\2\u094c\u094e\5\u01aa\u00d6\2\u094d\u094f")
        buf.write(u"\5\u0172\u00ba\2\u094e\u094d\3\2\2\2\u094e\u094f\3\2")
        buf.write(u"\2\2\u094f\u0950\3\2\2\2\u0950\u0952\7x\2\2\u0951\u0953")
        buf.write(u"\5\u01ae\u00d8\2\u0952\u0951\3\2\2\2\u0952\u0953\3\2")
        buf.write(u"\2\2\u0953\u0954\3\2\2\2\u0954\u0956\7y\2\2\u0955\u0957")
        buf.write(u"\5\u017c\u00bf\2\u0956\u0955\3\2\2\2\u0956\u0957\3\2")
        buf.write(u"\2\2\u0957\u01a3\3\2\2\2\u0958\u095a\5\u01a6\u00d4\2")
        buf.write(u"\u0959\u0958\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u0959")
        buf.write(u"\3\2\2\2\u095b\u095c\3\2\2\2\u095c\u01a5\3\2\2\2\u095d")
        buf.write(u"\u096a\7B\2\2\u095e\u096a\7N\2\2\u095f\u096a\7M\2\2\u0960")
        buf.write(u"\u096a\7:\2\2\u0961\u096a\7L\2\2\u0962\u096a\7Z\2\2\u0963")
        buf.write(u"\u096a\7h\2\2\u0964\u096a\7T\2\2\u0965\u096a\7I\2\2\u0966")
        buf.write(u"\u096a\7\f\2\2\u0967\u096a\7*\2\2\u0968\u096a\5\u028a")
        buf.write(u"\u0146\2\u0969\u095d\3\2\2\2\u0969\u095e\3\2\2\2\u0969")
        buf.write(u"\u095f\3\2\2\2\u0969\u0960\3\2\2\2\u0969\u0961\3\2\2")
        buf.write(u"\2\u0969\u0962\3\2\2\2\u0969\u0963\3\2\2\2\u0969\u0964")
        buf.write(u"\3\2\2\2\u0969\u0965\3\2\2\2\u0969\u0966\3\2\2\2\u0969")
        buf.write(u"\u0967\3\2\2\2\u0969\u0968\3\2\2\2\u096a\u01a7\3\2\2")
        buf.write(u"\2\u096b\u096e\5\f\7\2\u096c\u096e\7i\2\2\u096d\u096b")
        buf.write(u"\3\2\2\2\u096d\u096c\3\2\2\2\u096e\u01a9\3\2\2\2\u096f")
        buf.write(u"\u0970\5 \21\2\u0970\u01ab\3\2\2\2\u0971\u0974\5\u00ee")
        buf.write(u"x\2\u0972\u0974\7}\2\2\u0973\u0971\3\2\2\2\u0973\u0972")
        buf.write(u"\3\2\2\2\u0974\u01ad\3\2\2\2\u0975\u097c\5\u01b8\u00dd")
        buf.write(u"\2\u0976\u0979\5\u01b0\u00d9\2\u0977\u0978\7{\2\2\u0978")
        buf.write(u"\u097a\5\u01b8\u00dd\2\u0979\u0977\3\2\2\2\u0979\u097a")
        buf.write(u"\3\2\2\2\u097a\u097c\3\2\2\2\u097b\u0975\3\2\2\2\u097b")
        buf.write(u"\u0976\3\2\2\2\u097c\u01af\3\2\2\2\u097d\u0982\5\u01b2")
        buf.write(u"\u00da\2\u097e\u097f\7{\2\2\u097f\u0981\5\u01b2\u00da")
        buf.write(u"\2\u0980\u097e\3\2\2\2\u0981\u0984\3\2\2\2\u0982\u0980")
        buf.write(u"\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u01b1\3\2\2\2\u0984")
        buf.write(u"\u0982\3\2\2\2\u0985\u0987\5\u0264\u0133\2\u0986\u0985")
        buf.write(u"\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u0989\3\2\2\2\u0988")
        buf.write(u"\u098a\5\u01b6\u00dc\2\u0989\u0988\3\2\2\2\u0989\u098a")
        buf.write(u"\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098c\5\f\7\2\u098c")
        buf.write(u"\u098e\5\6\4\2\u098d\u098f\5\u01b4\u00db\2\u098e\u098d")
        buf.write(u"\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0992\3\2\2\2\u0990")
        buf.write(u"\u0992\5\u02f2\u017a\2\u0991\u0986\3\2\2\2\u0991\u0990")
        buf.write(u"\3\2\2\2\u0992\u01b3\3\2\2\2\u0993\u0994\7\u0088\2\2")
        buf.write(u"\u0994\u0995\5\u00e0q\2\u0995\u01b5\3\2\2\2\u0996\u0997")
        buf.write(u"\t\n\2\2\u0997\u01b7\3\2\2\2\u0998\u099a\5\u0264\u0133")
        buf.write(u"\2\u0999\u0998\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u099b")
        buf.write(u"\3\2\2\2\u099b\u099c\7J\2\2\u099c\u099d\5\u021a\u010e")
        buf.write(u"\2\u099d\u099e\5\6\4\2\u099e\u01b9\3\2\2\2\u099f\u09a1")
        buf.write(u"\5\u0264\u0133\2\u09a0\u099f\3\2\2\2\u09a0\u09a1\3\2")
        buf.write(u"\2\2\u09a1\u09a3\3\2\2\2\u09a2\u09a4\5\u01bc\u00df\2")
        buf.write(u"\u09a3\u09a2\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5")
        buf.write(u"\3\2\2\2\u09a5\u09a6\5\f\7\2\u09a6\u09a7\5\u01aa\u00d6")
        buf.write(u"\2\u09a7\u09a8\7t\2\2\u09a8\u09a9\5\u01c0\u00e1\2\u09a9")
        buf.write(u"\u09aa\7u\2\2\u09aa\u01bb\3\2\2\2\u09ab\u09ad\5\u01be")
        buf.write(u"\u00e0\2\u09ac\u09ab\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae")
        buf.write(u"\u09ac\3\2\2\2\u09ae\u09af\3\2\2\2\u09af\u01bd\3\2\2")
        buf.write(u"\2\u09b0\u09bd\7B\2\2\u09b1\u09bd\7N\2\2\u09b2\u09bd")
        buf.write(u"\7M\2\2\u09b3\u09bd\7:\2\2\u09b4\u09bd\7L\2\2\u09b5\u09bd")
        buf.write(u"\7Z\2\2\u09b6\u09bd\7h\2\2\u09b7\u09bd\7T\2\2\u09b8\u09bd")
        buf.write(u"\7I\2\2\u09b9\u09bd\7\f\2\2\u09ba\u09bd\7*\2\2\u09bb")
        buf.write(u"\u09bd\5\u028c\u0147\2\u09bc\u09b0\3\2\2\2\u09bc\u09b1")
        buf.write(u"\3\2\2\2\u09bc\u09b2\3\2\2\2\u09bc\u09b3\3\2\2\2\u09bc")
        buf.write(u"\u09b4\3\2\2\2\u09bc\u09b5\3\2\2\2\u09bc\u09b6\3\2\2")
        buf.write(u"\2\u09bc\u09b7\3\2\2\2\u09bc\u09b8\3\2\2\2\u09bc\u09b9")
        buf.write(u"\3\2\2\2\u09bc\u09ba\3\2\2\2\u09bc\u09bb\3\2\2\2\u09bd")
        buf.write(u"\u01bf\3\2\2\2\u09be\u09c0\5\u0264\u0133\2\u09bf\u09be")
        buf.write(u"\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u09c2\3\2\2\2\u09c1")
        buf.write(u"\u09c3\5\u01c6\u00e4\2\u09c2\u09c1\3\2\2\2\u09c2\u09c3")
        buf.write(u"\3\2\2\2\u09c3\u09ce\3\2\2\2\u09c4\u09c5\5\u02e8\u0175")
        buf.write(u"\2\u09c5\u09c7\5\u01c8\u00e5\2\u09c6\u09c8\5\u01c4\u00e3")
        buf.write(u"\2\u09c7\u09c6\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8\u09cf")
        buf.write(u"\3\2\2\2\u09c9\u09ca\5\u02ea\u0176\2\u09ca\u09cc\5\u01c8")
        buf.write(u"\u00e5\2\u09cb\u09cd\5\u01c2\u00e2\2\u09cc\u09cb\3\2")
        buf.write(u"\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09cf\3\2\2\2\u09ce\u09c4")
        buf.write(u"\3\2\2\2\u09ce\u09c9\3\2\2\2\u09cf\u01c1\3\2\2\2\u09d0")
        buf.write(u"\u09d2\5\u0264\u0133\2\u09d1\u09d0\3\2\2\2\u09d1\u09d2")
        buf.write(u"\3\2\2\2\u09d2\u09d4\3\2\2\2\u09d3\u09d5\5\u01c6\u00e4")
        buf.write(u"\2\u09d4\u09d3\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5\u09d6")
        buf.write(u"\3\2\2\2\u09d6\u09d7\5\u02e8\u0175\2\u09d7\u09d8\5\u01c8")
        buf.write(u"\u00e5\2\u09d8\u01c3\3\2\2\2\u09d9\u09db\5\u0264\u0133")
        buf.write(u"\2\u09da\u09d9\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09dd")
        buf.write(u"\3\2\2\2\u09dc\u09de\5\u01c6\u00e4\2\u09dd\u09dc\3\2")
        buf.write(u"\2\2\u09dd\u09de\3\2\2\2\u09de\u09df\3\2\2\2\u09df\u09e0")
        buf.write(u"\5\u02ea\u0176\2\u09e0\u09e1\5\u01c8\u00e5\2\u09e1\u01c5")
        buf.write(u"\3\2\2\2\u09e2\u09ea\7M\2\2\u09e3\u09ea\7:\2\2\u09e4")
        buf.write(u"\u09ea\7L\2\2\u09e5\u09e6\7M\2\2\u09e6\u09ea\7:\2\2\u09e7")
        buf.write(u"\u09e8\7:\2\2\u09e8\u09ea\7M\2\2\u09e9\u09e2\3\2\2\2")
        buf.write(u"\u09e9\u09e3\3\2\2\2\u09e9\u09e4\3\2\2\2\u09e9\u09e5")
        buf.write(u"\3\2\2\2\u09e9\u09e7\3\2\2\2\u09ea\u01c7\3\2\2\2\u09eb")
        buf.write(u"\u09ee\5\u00eex\2\u09ec\u09ee\7}\2\2\u09ed\u09eb\3\2")
        buf.write(u"\2\2\u09ed\u09ec\3\2\2\2\u09ee\u01c9\3\2\2\2\u09ef\u09f1")
        buf.write(u"\5\u0264\u0133\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1\3\2")
        buf.write(u"\2\2\u09f1\u09f3\3\2\2\2\u09f2\u09f4\5\u01cc\u00e7\2")
        buf.write(u"\u09f3\u09f2\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f5")
        buf.write(u"\3\2\2\2\u09f5\u09f6\7(\2\2\u09f6\u09ff\5\f\7\2\u09f7")
        buf.write(u"\u09f8\5\u019a\u00ce\2\u09f8\u09f9\7}\2\2\u09f9\u0a00")
        buf.write(u"\3\2\2\2\u09fa\u09fb\5\u01aa\u00d6\2\u09fb\u09fc\7t\2")
        buf.write(u"\2\u09fc\u09fd\5\u01d0\u00e9\2\u09fd\u09fe\7u\2\2\u09fe")
        buf.write(u"\u0a00\3\2\2\2\u09ff\u09f7\3\2\2\2\u09ff\u09fa\3\2\2")
        buf.write(u"\2\u0a00\u01cb\3\2\2\2\u0a01\u0a05\5\u01ce\u00e8\2\u0a02")
        buf.write(u"\u0a04\5\u01ce\u00e8\2\u0a03\u0a02\3\2\2\2\u0a04\u0a07")
        buf.write(u"\3\2\2\2\u0a05\u0a03\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06")
        buf.write(u"\u01cd\3\2\2\2\u0a07\u0a05\3\2\2\2\u0a08\u0a15\7B\2\2")
        buf.write(u"\u0a09\u0a15\7N\2\2\u0a0a\u0a15\7M\2\2\u0a0b\u0a15\7")
        buf.write(u":\2\2\u0a0c\u0a15\7L\2\2\u0a0d\u0a15\7Z\2\2\u0a0e\u0a15")
        buf.write(u"\7h\2\2\u0a0f\u0a15\7T\2\2\u0a10\u0a15\7I\2\2\u0a11\u0a15")
        buf.write(u"\7\f\2\2\u0a12\u0a15\7*\2\2\u0a13\u0a15\5\u028e\u0148")
        buf.write(u"\2\u0a14\u0a08\3\2\2\2\u0a14\u0a09\3\2\2\2\u0a14\u0a0a")
        buf.write(u"\3\2\2\2\u0a14\u0a0b\3\2\2\2\u0a14\u0a0c\3\2\2\2\u0a14")
        buf.write(u"\u0a0d\3\2\2\2\u0a14\u0a0e\3\2\2\2\u0a14\u0a0f\3\2\2")
        buf.write(u"\2\u0a14\u0a10\3\2\2\2\u0a14\u0a11\3\2\2\2\u0a14\u0a12")
        buf.write(u"\3\2\2\2\u0a14\u0a13\3\2\2\2\u0a15\u01cf\3\2\2\2\u0a16")
        buf.write(u"\u0a18\5\u0264\u0133\2\u0a17\u0a16\3\2\2\2\u0a17\u0a18")
        buf.write(u"\3\2\2\2\u0a18\u0a21\3\2\2\2\u0a19\u0a1a\5\u02ec\u0177")
        buf.write(u"\2\u0a1a\u0a1b\5\u00eex\2\u0a1b\u0a1c\5\u01d4\u00eb\2")
        buf.write(u"\u0a1c\u0a22\3\2\2\2\u0a1d\u0a1e\5\u02ee\u0178\2\u0a1e")
        buf.write(u"\u0a1f\5\u00eex\2\u0a1f\u0a20\5\u01d2\u00ea\2\u0a20\u0a22")
        buf.write(u"\3\2\2\2\u0a21\u0a19\3\2\2\2\u0a21\u0a1d\3\2\2\2\u0a22")
        buf.write(u"\u01d1\3\2\2\2\u0a23\u0a25\5\u0264\u0133\2\u0a24\u0a23")
        buf.write(u"\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a26\3\2\2\2\u0a26")
        buf.write(u"\u0a27\5\u02ec\u0177\2\u0a27\u0a28\5\u00eex\2\u0a28\u01d3")
        buf.write(u"\3\2\2\2\u0a29\u0a2b\5\u0264\u0133\2\u0a2a\u0a29\3\2")
        buf.write(u"\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a2d")
        buf.write(u"\5\u02ee\u0178\2\u0a2d\u0a2e\5\u00eex\2\u0a2e\u01d5\3")
        buf.write(u"\2\2\2\u0a2f\u0a31\5\u0264\u0133\2\u0a30\u0a2f\3\2\2")
        buf.write(u"\2\u0a30\u0a31\3\2\2\2\u0a31\u0a33\3\2\2\2\u0a32\u0a34")
        buf.write(u"\5\u01d8\u00ed\2\u0a33\u0a32\3\2\2\2\u0a33\u0a34\3\2")
        buf.write(u"\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a36\5\u01dc\u00ef\2")
        buf.write(u"\u0a36\u0a37\7t\2\2\u0a37\u0a38\5\u01c0\u00e1\2\u0a38")
        buf.write(u"\u0a39\7u\2\2\u0a39\u01d7\3\2\2\2\u0a3a\u0a3e\5\u01da")
        buf.write(u"\u00ee\2\u0a3b\u0a3d\5\u01da\u00ee\2\u0a3c\u0a3b\3\2")
        buf.write(u"\2\2\u0a3d\u0a40\3\2\2\2\u0a3e\u0a3c\3\2\2\2\u0a3e\u0a3f")
        buf.write(u"\3\2\2\2\u0a3f\u01d9\3\2\2\2\u0a40\u0a3e\3\2\2\2\u0a41")
        buf.write(u"\u0a4d\7B\2\2\u0a42\u0a4d\7N\2\2\u0a43\u0a4d\7M\2\2\u0a44")
        buf.write(u"\u0a4d\7:\2\2\u0a45\u0a4d\7L\2\2\u0a46\u0a4d\7h\2\2\u0a47")
        buf.write(u"\u0a4d\7T\2\2\u0a48\u0a4d\7I\2\2\u0a49\u0a4d\7\f\2\2")
        buf.write(u"\u0a4a\u0a4d\7*\2\2\u0a4b\u0a4d\5\u0290\u0149\2\u0a4c")
        buf.write(u"\u0a41\3\2\2\2\u0a4c\u0a42\3\2\2\2\u0a4c\u0a43\3\2\2")
        buf.write(u"\2\u0a4c\u0a44\3\2\2\2\u0a4c\u0a45\3\2\2\2\u0a4c\u0a46")
        buf.write(u"\3\2\2\2\u0a4c\u0a47\3\2\2\2\u0a4c\u0a48\3\2\2\2\u0a4c")
        buf.write(u"\u0a49\3\2\2\2\u0a4c\u0a4a\3\2\2\2\u0a4c\u0a4b\3\2\2")
        buf.write(u"\2\u0a4d\u01db\3\2\2\2\u0a4e\u0a52\5\f\7\2\u0a4f\u0a50")
        buf.write(u"\5 \21\2\u0a50\u0a51\7z\2\2\u0a51\u0a53\3\2\2\2\u0a52")
        buf.write(u"\u0a4f\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a54\3\2\2")
        buf.write(u"\2\u0a54\u0a55\7^\2\2\u0a55\u0a56\7v\2\2\u0a56\u0a57")
        buf.write(u"\5\u01ae\u00d8\2\u0a57\u0a58\7w\2\2\u0a58\u01dd\3\2\2")
        buf.write(u"\2\u0a59\u0a5b\5\u0264\u0133\2\u0a5a\u0a59\3\2\2\2\u0a5a")
        buf.write(u"\u0a5b\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a5d\5\u01e0")
        buf.write(u"\u00f1\2\u0a5d\u0a5e\5\u01e4\u00f3\2\u0a5e\u0a5f\5\u01f2")
        buf.write(u"\u00fa\2\u0a5f\u01df\3\2\2\2\u0a60\u0a64\5\u01e2\u00f2")
        buf.write(u"\2\u0a61\u0a63\5\u01e2\u00f2\2\u0a62\u0a61\3\2\2\2\u0a63")
        buf.write(u"\u0a66\3\2\2\2\u0a64\u0a62\3\2\2\2\u0a64\u0a65\3\2\2")
        buf.write(u"\2\u0a65\u01e1\3\2\2\2\u0a66\u0a64\3\2\2\2\u0a67\u0a6c")
        buf.write(u"\7N\2\2\u0a68\u0a6c\7Z\2\2\u0a69\u0a6c\7*\2\2\u0a6a\u0a6c")
        buf.write(u"\5\u0292\u014a\2\u0a6b\u0a67\3\2\2\2\u0a6b\u0a68\3\2")
        buf.write(u"\2\2\u0a6b\u0a69\3\2\2\2\u0a6b\u0a6a\3\2\2\2\u0a6c\u01e3")
        buf.write(u"\3\2\2\2\u0a6d\u0a71\5\u01e6\u00f4\2\u0a6e\u0a71\5\u01ea")
        buf.write(u"\u00f6\2\u0a6f\u0a71\5\u01f0\u00f9\2\u0a70\u0a6d\3\2")
        buf.write(u"\2\2\u0a70\u0a6e\3\2\2\2\u0a70\u0a6f\3\2\2\2\u0a71\u01e5")
        buf.write(u"\3\2\2\2\u0a72\u0a73\5\f\7\2\u0a73\u0a74\7F\2\2\u0a74")
        buf.write(u"\u0a75\5\u01e8\u00f5\2\u0a75\u0a76\7x\2\2\u0a76\u0a77")
        buf.write(u"\5\f\7\2\u0a77\u0a78\5\6\4\2\u0a78\u0a79\7y\2\2\u0a79")
        buf.write(u"\u01e7\3\2\2\2\u0a7a\u0a7b\t\13\2\2\u0a7b\u01e9\3\2\2")
        buf.write(u"\2\u0a7c\u0a7d\5\f\7\2\u0a7d\u0a7e\7F\2\2\u0a7e\u0a7f")
        buf.write(u"\5\u01ec\u00f7\2\u0a7f\u0a80\7x\2\2\u0a80\u0a81\5\f\7")
        buf.write(u"\2\u0a81\u0a82\5\6\4\2\u0a82\u0a83\7{\2\2\u0a83\u0a84")
        buf.write(u"\5\f\7\2\u0a84\u0a85\5\6\4\2\u0a85\u0a86\7y\2\2\u0a86")
        buf.write(u"\u01eb\3\2\2\2\u0a87\u0a98\7~\2\2\u0a88\u0a98\7\177\2")
        buf.write(u"\2\u0a89\u0a98\7\u0080\2\2\u0a8a\u0a98\7\u0081\2\2\u0a8b")
        buf.write(u"\u0a98\7\u0082\2\2\u0a8c\u0a98\7\u0083\2\2\u0a8d\u0a98")
        buf.write(u"\7\u0084\2\2\u0a8e\u0a98\7\u0085\2\2\u0a8f\u0a98\7\u009f")
        buf.write(u"\2\2\u0a90\u0a98\5\u02f6\u017c\2\u0a91\u0a98\7\u0093")
        buf.write(u"\2\2\u0a92\u0a98\7\u0094\2\2\u0a93\u0a98\7\u008a\2\2")
        buf.write(u"\u0a94\u0a98\7\u0089\2\2\u0a95\u0a98\7\u0096\2\2\u0a96")
        buf.write(u"\u0a98\7\u0095\2\2\u0a97\u0a87\3\2\2\2\u0a97\u0a88\3")
        buf.write(u"\2\2\2\u0a97\u0a89\3\2\2\2\u0a97\u0a8a\3\2\2\2\u0a97")
        buf.write(u"\u0a8b\3\2\2\2\u0a97\u0a8c\3\2\2\2\u0a97\u0a8d\3\2\2")
        buf.write(u"\2\u0a97\u0a8e\3\2\2\2\u0a97\u0a8f\3\2\2\2\u0a97\u0a90")
        buf.write(u"\3\2\2\2\u0a97\u0a91\3\2\2\2\u0a97\u0a92\3\2\2\2\u0a97")
        buf.write(u"\u0a93\3\2\2\2\u0a97\u0a94\3\2\2\2\u0a97\u0a95\3\2\2")
        buf.write(u"\2\u0a97\u0a96\3\2\2\2\u0a98\u01ed\3\2\2\2\u0a99\u0ab0")
        buf.write(u"\7~\2\2\u0a9a\u0ab0\7\177\2\2\u0a9b\u0ab0\7\u0086\2\2")
        buf.write(u"\u0a9c\u0ab0\7\u0087\2\2\u0a9d\u0ab0\7\u008e\2\2\u0a9e")
        buf.write(u"\u0ab0\7\u008f\2\2\u0a9f\u0ab0\7`\2\2\u0aa0\u0ab0\7+")
        buf.write(u"\2\2\u0aa1\u0ab0\7\u0080\2\2\u0aa2\u0ab0\7\u0081\2\2")
        buf.write(u"\u0aa3\u0ab0\7\u0082\2\2\u0aa4\u0ab0\7\u0083\2\2\u0aa5")
        buf.write(u"\u0ab0\7\u0084\2\2\u0aa6\u0ab0\7\u0085\2\2\u0aa7\u0ab0")
        buf.write(u"\7\u009f\2\2\u0aa8\u0ab0\5\u02f6\u017c\2\u0aa9\u0ab0")
        buf.write(u"\7\u0093\2\2\u0aaa\u0ab0\7\u0094\2\2\u0aab\u0ab0\7\u008a")
        buf.write(u"\2\2\u0aac\u0ab0\7\u0089\2\2\u0aad\u0ab0\7\u0096\2\2")
        buf.write(u"\u0aae\u0ab0\7\u0095\2\2\u0aaf\u0a99\3\2\2\2\u0aaf\u0a9a")
        buf.write(u"\3\2\2\2\u0aaf\u0a9b\3\2\2\2\u0aaf\u0a9c\3\2\2\2\u0aaf")
        buf.write(u"\u0a9d\3\2\2\2\u0aaf\u0a9e\3\2\2\2\u0aaf\u0a9f\3\2\2")
        buf.write(u"\2\u0aaf\u0aa0\3\2\2\2\u0aaf\u0aa1\3\2\2\2\u0aaf\u0aa2")
        buf.write(u"\3\2\2\2\u0aaf\u0aa3\3\2\2\2\u0aaf\u0aa4\3\2\2\2\u0aaf")
        buf.write(u"\u0aa5\3\2\2\2\u0aaf\u0aa6\3\2\2\2\u0aaf\u0aa7\3\2\2")
        buf.write(u"\2\u0aaf\u0aa8\3\2\2\2\u0aaf\u0aa9\3\2\2\2\u0aaf\u0aaa")
        buf.write(u"\3\2\2\2\u0aaf\u0aab\3\2\2\2\u0aaf\u0aac\3\2\2\2\u0aaf")
        buf.write(u"\u0aad\3\2\2\2\u0aaf\u0aae\3\2\2\2\u0ab0\u01ef\3\2\2")
        buf.write(u"\2\u0ab1\u0ab2\7\66\2\2\u0ab2\u0ab3\7F\2\2\u0ab3\u0ab4")
        buf.write(u"\5\f\7\2\u0ab4\u0ab5\7x\2\2\u0ab5\u0ab6\5\f\7\2\u0ab6")
        buf.write(u"\u0ab7\5\6\4\2\u0ab7\u0ab8\7y\2\2\u0ab8\u0ac2\3\2\2\2")
        buf.write(u"\u0ab9\u0aba\7)\2\2\u0aba\u0abb\7F\2\2\u0abb\u0abc\5")
        buf.write(u"\f\7\2\u0abc\u0abd\7x\2\2\u0abd\u0abe\5\f\7\2\u0abe\u0abf")
        buf.write(u"\5\6\4\2\u0abf\u0ac0\7y\2\2\u0ac0\u0ac2\3\2\2\2\u0ac1")
        buf.write(u"\u0ab1\3\2\2\2\u0ac1\u0ab9\3\2\2\2\u0ac2\u01f1\3\2\2")
        buf.write(u"\2\u0ac3\u0ac6\5\u00eex\2\u0ac4\u0ac6\7}\2\2\u0ac5\u0ac3")
        buf.write(u"\3\2\2\2\u0ac5\u0ac4\3\2\2\2\u0ac6\u01f3\3\2\2\2\u0ac7")
        buf.write(u"\u0ac9\5\u0264\u0133\2\u0ac8\u0ac7\3\2\2\2\u0ac8\u0ac9")
        buf.write(u"\3\2\2\2\u0ac9\u0acb\3\2\2\2\u0aca\u0acc\5\u01f6\u00fc")
        buf.write(u"\2\u0acb\u0aca\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0acd")
        buf.write(u"\3\2\2\2\u0acd\u0ace\5\u01fa\u00fe\2\u0ace\u0acf\5\u01fe")
        buf.write(u"\u0100\2\u0acf\u01f5\3\2\2\2\u0ad0\u0ad2\5\u01f8\u00fd")
        buf.write(u"\2\u0ad1\u0ad0\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3\u0ad1")
        buf.write(u"\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u01f7\3\2\2\2\u0ad5")
        buf.write(u"\u0adc\7N\2\2\u0ad6\u0adc\7M\2\2\u0ad7\u0adc\7:\2\2\u0ad8")
        buf.write(u"\u0adc\7L\2\2\u0ad9\u0adc\7*\2\2\u0ada\u0adc\5\u0294")
        buf.write(u"\u014b\2\u0adb\u0ad5\3\2\2\2\u0adb\u0ad6\3\2\2\2\u0adb")
        buf.write(u"\u0ad7\3\2\2\2\u0adb\u0ad8\3\2\2\2\u0adb\u0ad9\3\2\2")
        buf.write(u"\2\u0adb\u0ada\3\2\2\2\u0adc\u01f9\3\2\2\2\u0add\u0ade")
        buf.write(u"\5\6\4\2\u0ade\u0ae0\7x\2\2\u0adf\u0ae1\5\u01ae\u00d8")
        buf.write(u"\2\u0ae0\u0adf\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae2")
        buf.write(u"\3\2\2\2\u0ae2\u0ae4\7y\2\2\u0ae3\u0ae5\5\u01fc\u00ff")
        buf.write(u"\2\u0ae4\u0ae3\3\2\2\2\u0ae4\u0ae5\3\2\2\2\u0ae5\u01fb")
        buf.write(u"\3\2\2\2\u0ae6\u0ae7\7|\2\2\u0ae7\u0ae8\7\22\2\2\u0ae8")
        buf.write(u"\u0aea\7x\2\2\u0ae9\u0aeb\5.\30\2\u0aea\u0ae9\3\2\2\2")
        buf.write(u"\u0aea\u0aeb\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec\u0af5")
        buf.write(u"\7y\2\2\u0aed\u0aee\7|\2\2\u0aee\u0aef\7^\2\2\u0aef\u0af1")
        buf.write(u"\7x\2\2\u0af0\u0af2\5.\30\2\u0af1\u0af0\3\2\2\2\u0af1")
        buf.write(u"\u0af2\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0af5\7y\2\2")
        buf.write(u"\u0af4\u0ae6\3\2\2\2\u0af4\u0aed\3\2\2\2\u0af5\u01fd")
        buf.write(u"\3\2\2\2\u0af6\u0af9\5\u00eex\2\u0af7\u0af9\7}\2\2\u0af8")
        buf.write(u"\u0af6\3\2\2\2\u0af8\u0af7\3\2\2\2\u0af9\u01ff\3\2\2")
        buf.write(u"\2\u0afa\u0afc\5\u0264\u0133\2\u0afb\u0afa\3\2\2\2\u0afb")
        buf.write(u"\u0afc\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0afe\5\u0202")
        buf.write(u"\u0102\2\u0afe\u0aff\5\6\4\2\u0aff\u0b00\7x\2\2\u0b00")
        buf.write(u"\u0b01\7y\2\2\u0b01\u0b02\5\u0204\u0103\2\u0b02\u0201")
        buf.write(u"\3\2\2\2\u0b03\u0b04\5\u0298\u014d\2\u0b04\u0203\3\2")
        buf.write(u"\2\2\u0b05\u0b08\5\u00eex\2\u0b06\u0b08\7}\2\2\u0b07")
        buf.write(u"\u0b05\3\2\2\2\u0b07\u0b06\3\2\2\2\u0b08\u0205\3\2\2")
        buf.write(u"\2\u0b09\u0b0a\5\u0296\u014c\2\u0b0a\u0207\3\2\2\2\u0b0b")
        buf.write(u"\u0b0e\5\u00eex\2\u0b0c\u0b0e\7}\2\2\u0b0d\u0b0b\3\2")
        buf.write(u"\2\2\u0b0d\u0b0c\3\2\2\2\u0b0e\u0209\3\2\2\2\u0b0f\u0b12")
        buf.write(u"\5\u00eex\2\u0b10\u0b12\7}\2\2\u0b11\u0b0f\3\2\2\2\u0b11")
        buf.write(u"\u0b10\3\2\2\2\u0b12\u020b\3\2\2\2\u0b13\u0b15\5\u0264")
        buf.write(u"\u0133\2\u0b14\u0b13\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15")
        buf.write(u"\u0b17\3\2\2\2\u0b16\u0b18\5\u020e\u0108\2\u0b17\u0b16")
        buf.write(u"\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b1a\3\2\2\2\u0b19")
        buf.write(u"\u0b1b\5\u02e2\u0172\2\u0b1a\u0b19\3\2\2\2\u0b1a\u0b1b")
        buf.write(u"\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1d\7\\\2\2\u0b1d")
        buf.write(u"\u0b1f\5\6\4\2\u0b1e\u0b20\5\u0172\u00ba\2\u0b1f\u0b1e")
        buf.write(u"\3\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20\u0b22\3\2\2\2\u0b21")
        buf.write(u"\u0b23\5\u0212\u010a\2\u0b22\u0b21\3\2\2\2\u0b22\u0b23")
        buf.write(u"\3\2\2\2\u0b23\u0b25\3\2\2\2\u0b24\u0b26\5\u017c\u00bf")
        buf.write(u"\2\u0b25\u0b24\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b27")
        buf.write(u"\3\2\2\2\u0b27\u0b29\5\u0214\u010b\2\u0b28\u0b2a\7}\2")
        buf.write(u"\2\u0b29\u0b28\3\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u020d")
        buf.write(u"\3\2\2\2\u0b2b\u0b2f\5\u0210\u0109\2\u0b2c\u0b2e\5\u0210")
        buf.write(u"\u0109\2\u0b2d\u0b2c\3\2\2\2\u0b2e\u0b31\3\2\2\2\u0b2f")
        buf.write(u"\u0b2d\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u020f\3\2\2")
        buf.write(u"\2\u0b31\u0b2f\3\2\2\2\u0b32\u0b39\7B\2\2\u0b33\u0b39")
        buf.write(u"\7N\2\2\u0b34\u0b39\7M\2\2\u0b35\u0b39\7:\2\2\u0b36\u0b39")
        buf.write(u"\7L\2\2\u0b37\u0b39\5\u0282\u0142\2\u0b38\u0b32\3\2\2")
        buf.write(u"\2\u0b38\u0b33\3\2\2\2\u0b38\u0b34\3\2\2\2\u0b38\u0b35")
        buf.write(u"\3\2\2\2\u0b38\u0b36\3\2\2\2\u0b38\u0b37\3\2\2\2\u0b39")
        buf.write(u"\u0211\3\2\2\2\u0b3a\u0b3b\7|\2\2\u0b3b\u0b3c\5\u017a")
        buf.write(u"\u00be\2\u0b3c\u0213\3\2\2\2\u0b3d\u0b3f\7t\2\2\u0b3e")
        buf.write(u"\u0b40\5\u0216\u010c\2\u0b3f\u0b3e\3\2\2\2\u0b3f\u0b40")
        buf.write(u"\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b42\7u\2\2\u0b42")
        buf.write(u"\u0215\3\2\2\2\u0b43\u0b47\5\u0218\u010d\2\u0b44\u0b46")
        buf.write(u"\5\u0218\u010d\2\u0b45\u0b44\3\2\2\2\u0b46\u0b49\3\2")
        buf.write(u"\2\2\u0b47\u0b45\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48\u0217")
        buf.write(u"\3\2\2\2\u0b49\u0b47\3\2\2\2\u0b4a\u0b4c\5\u0264\u0133")
        buf.write(u"\2\u0b4b\u0b4a\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b4e")
        buf.write(u"\3\2\2\2\u0b4d\u0b4f\5\u018e\u00c8\2\u0b4e\u0b4d\3\2")
        buf.write(u"\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b56\3\2\2\2\u0b50\u0b57")
        buf.write(u"\5\u0192\u00ca\2\u0b51\u0b52\7-\2\2\u0b52\u0b53\5\u02be")
        buf.write(u"\u0160\2\u0b53\u0b54\5\u02c0\u0161\2\u0b54\u0b55\7}\2")
        buf.write(u"\2\u0b55\u0b57\3\2\2\2\u0b56\u0b50\3\2\2\2\u0b56\u0b51")
        buf.write(u"\3\2\2\2\u0b57\u0219\3\2\2\2\u0b58\u0b60\5\16\b\2\u0b59")
        buf.write(u"\u0b5b\t\5\2\2\u0b5a\u0b59\3\2\2\2\u0b5b\u0b5e\3\2\2")
        buf.write(u"\2\u0b5c\u0b5a\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b5f")
        buf.write(u"\3\2\2\2\u0b5e\u0b5c\3\2\2\2\u0b5f\u0b61\5\u0220\u0111")
        buf.write(u"\2\u0b60\u0b5c\3\2\2\2\u0b61\u0b62\3\2\2\2\u0b62\u0b60")
        buf.write(u"\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u021b\3\2\2\2\u0b64")
        buf.write(u"\u0b6a\5\16\b\2\u0b65\u0b69\5\u0220\u0111\2\u0b66\u0b69")
        buf.write(u"\7\u008b\2\2\u0b67\u0b69\7\u0080\2\2\u0b68\u0b65\3\2")
        buf.write(u"\2\2\u0b68\u0b66\3\2\2\2\u0b68\u0b67\3\2\2\2\u0b69\u0b6c")
        buf.write(u"\3\2\2\2\u0b6a\u0b68\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b")
        buf.write(u"\u021d\3\2\2\2\u0b6c\u0b6a\3\2\2\2\u0b6d\u0b6f\5\u0220")
        buf.write(u"\u0111\2\u0b6e\u0b6d\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70")
        buf.write(u"\u0b6e\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u021f\3\2\2")
        buf.write(u"\2\u0b72\u0b74\7v\2\2\u0b73\u0b75\5\u0222\u0112\2\u0b74")
        buf.write(u"\u0b73\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0b76\3\2\2")
        buf.write(u"\2\u0b76\u0b77\7w\2\2\u0b77\u0221\3\2\2\2\u0b78\u0b7c")
        buf.write(u"\7{\2\2\u0b79\u0b7b\7{\2\2\u0b7a\u0b79\3\2\2\2\u0b7b")
        buf.write(u"\u0b7e\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7c\u0b7d\3\2\2")
        buf.write(u"\2\u0b7d\u0223\3\2\2\2\u0b7e\u0b7c\3\2\2\2\u0b7f\u0b80")
        buf.write(u"\7t\2\2\u0b80\u0b89\7u\2\2\u0b81\u0b82\7t\2\2\u0b82\u0b84")
        buf.write(u"\5\u0226\u0114\2\u0b83\u0b85\7{\2\2\u0b84\u0b83\3\2\2")
        buf.write(u"\2\u0b84\u0b85\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b87")
        buf.write(u"\7u\2\2\u0b87\u0b89\3\2\2\2\u0b88\u0b7f\3\2\2\2\u0b88")
        buf.write(u"\u0b81\3\2\2\2\u0b89\u0225\3\2\2\2\u0b8a\u0b8f\5\u019e")
        buf.write(u"\u00d0\2\u0b8b\u0b8c\7{\2\2\u0b8c\u0b8e\5\u019e\u00d0")
        buf.write(u"\2\u0b8d\u0b8b\3\2\2\2\u0b8e\u0b91\3\2\2\2\u0b8f\u0b8d")
        buf.write(u"\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0227\3\2\2\2\u0b91")
        buf.write(u"\u0b8f\3\2\2\2\u0b92\u0b94\5\u0264\u0133\2\u0b93\u0b92")
        buf.write(u"\3\2\2\2\u0b93\u0b94\3\2\2\2\u0b94\u0b96\3\2\2\2\u0b95")
        buf.write(u"\u0b97\5\u022a\u0116\2\u0b96\u0b95\3\2\2\2\u0b96\u0b97")
        buf.write(u"\3\2\2\2\u0b97\u0b99\3\2\2\2\u0b98\u0b9a\5\u02e2\u0172")
        buf.write(u"\2\u0b99\u0b98\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a\u0b9b")
        buf.write(u"\3\2\2\2\u0b9b\u0b9c\79\2\2\u0b9c\u0b9e\5\6\4\2\u0b9d")
        buf.write(u"\u0b9f\5\u022e\u0118\2\u0b9e\u0b9d\3\2\2\2\u0b9e\u0b9f")
        buf.write(u"\3\2\2\2\u0b9f\u0ba1\3\2\2\2\u0ba0\u0ba2\5\u0234\u011b")
        buf.write(u"\2\u0ba1\u0ba0\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba4")
        buf.write(u"\3\2\2\2\u0ba3\u0ba5\5\u017c\u00bf\2\u0ba4\u0ba3\3\2")
        buf.write(u"\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5\u0ba6\3\2\2\2\u0ba6\u0ba8")
        buf.write(u"\5\u0236\u011c\2\u0ba7\u0ba9\7}\2\2\u0ba8\u0ba7\3\2\2")
        buf.write(u"\2\u0ba8\u0ba9\3\2\2\2\u0ba9\u0229\3\2\2\2\u0baa\u0bae")
        buf.write(u"\5\u022c\u0117\2\u0bab\u0bad\5\u022c\u0117\2\u0bac\u0bab")
        buf.write(u"\3\2\2\2\u0bad\u0bb0\3\2\2\2\u0bae\u0bac\3\2\2\2\u0bae")
        buf.write(u"\u0baf\3\2\2\2\u0baf\u022b\3\2\2\2\u0bb0\u0bae\3\2\2")
        buf.write(u"\2\u0bb1\u0bb8\7B\2\2\u0bb2\u0bb8\7N\2\2\u0bb3\u0bb8")
        buf.write(u"\7M\2\2\u0bb4\u0bb8\7:\2\2\u0bb5\u0bb8\7L\2\2\u0bb6\u0bb8")
        buf.write(u"\5\u0284\u0143\2\u0bb7\u0bb1\3\2\2\2\u0bb7\u0bb2\3\2")
        buf.write(u"\2\2\u0bb7\u0bb3\3\2\2\2\u0bb7\u0bb4\3\2\2\2\u0bb7\u0bb5")
        buf.write(u"\3\2\2\2\u0bb7\u0bb6\3\2\2\2\u0bb8\u022d\3\2\2\2\u0bb9")
        buf.write(u"\u0bba\7\u0089\2\2\u0bba\u0bbb\5\u0230\u0119\2\u0bbb")
        buf.write(u"\u0bbc\7\u008a\2\2\u0bbc\u022f\3\2\2\2\u0bbd\u0bbf\5")
        buf.write(u"\u0264\u0133\2\u0bbe\u0bbd\3\2\2\2\u0bbe\u0bbf\3\2\2")
        buf.write(u"\2\u0bbf\u0bc1\3\2\2\2\u0bc0\u0bc2\5\u0232\u011a\2\u0bc1")
        buf.write(u"\u0bc0\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc3\3\2\2")
        buf.write(u"\2\u0bc3\u0bce\5\u0176\u00bc\2\u0bc4\u0bc6\7{\2\2\u0bc5")
        buf.write(u"\u0bc7\5\u0264\u0133\2\u0bc6\u0bc5\3\2\2\2\u0bc6\u0bc7")
        buf.write(u"\3\2\2\2\u0bc7\u0bc9\3\2\2\2\u0bc8\u0bca\5\u0232\u011a")
        buf.write(u"\2\u0bc9\u0bc8\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bcb")
        buf.write(u"\3\2\2\2\u0bcb\u0bcd\5\u0176\u00bc\2\u0bcc\u0bc4\3\2")
        buf.write(u"\2\2\u0bcd\u0bd0\3\2\2\2\u0bce\u0bcc\3\2\2\2\u0bce\u0bcf")
        buf.write(u"\3\2\2\2\u0bcf\u0231\3\2\2\2\u0bd0\u0bce\3\2\2\2\u0bd1")
        buf.write(u"\u0bd2\t\f\2\2\u0bd2\u0233\3\2\2\2\u0bd3\u0bd4\7|\2\2")
        buf.write(u"\u0bd4\u0bd5\5\u017a\u00be\2\u0bd5\u0235\3\2\2\2\u0bd6")
        buf.write(u"\u0bd8\7t\2\2\u0bd7\u0bd9\5\u0238\u011d\2\u0bd8\u0bd7")
        buf.write(u"\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda")
        buf.write(u"\u0bdb\7u\2\2\u0bdb\u0237\3\2\2\2\u0bdc\u0bde\5\u023a")
        buf.write(u"\u011e\2\u0bdd\u0bdc\3\2\2\2\u0bde\u0bdf\3\2\2\2\u0bdf")
        buf.write(u"\u0bdd\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0239\3\2\2")
        buf.write(u"\2\u0be1\u0be3\5\u0264\u0133\2\u0be2\u0be1\3\2\2\2\u0be2")
        buf.write(u"\u0be3\3\2\2\2\u0be3\u0be5\3\2\2\2\u0be4\u0be6\7B\2\2")
        buf.write(u"\u0be5\u0be4\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0c19")
        buf.write(u"\3\2\2\2\u0be7\u0c03\5\f\7\2\u0be8\u0bea\5\6\4\2\u0be9")
        buf.write(u"\u0beb\5\u0172\u00ba\2\u0bea\u0be9\3\2\2\2\u0bea\u0beb")
        buf.write(u"\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u0bee\7x\2\2\u0bed")
        buf.write(u"\u0bef\5\u01ae\u00d8\2\u0bee\u0bed\3\2\2\2\u0bee\u0bef")
        buf.write(u"\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf2\7y\2\2\u0bf1")
        buf.write(u"\u0bf3\5\u017c\u00bf\2\u0bf2\u0bf1\3\2\2\2\u0bf2\u0bf3")
        buf.write(u"\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u0bf5\7}\2\2\u0bf5")
        buf.write(u"\u0c04\3\2\2\2\u0bf6\u0bf7\5\6\4\2\u0bf7\u0bf8\7t\2\2")
        buf.write(u"\u0bf8\u0bf9\5\u0240\u0121\2\u0bf9\u0bfa\7u\2\2\u0bfa")
        buf.write(u"\u0c04\3\2\2\2\u0bfb\u0bfc\7^\2\2\u0bfc\u0bfd\7v\2\2")
        buf.write(u"\u0bfd\u0bfe\5\u01ae\u00d8\2\u0bfe\u0bff\7w\2\2\u0bff")
        buf.write(u"\u0c00\7t\2\2\u0c00\u0c01\5\u0240\u0121\2\u0c01\u0c02")
        buf.write(u"\7u\2\2\u0c02\u0c04\3\2\2\2\u0c03\u0be8\3\2\2\2\u0c03")
        buf.write(u"\u0bf6\3\2\2\2\u0c03\u0bfb\3\2\2\2\u0c04\u0c1a\3\2\2")
        buf.write(u"\2\u0c05\u0c06\7i\2\2\u0c06\u0c08\5\6\4\2\u0c07\u0c09")
        buf.write(u"\5\u0172\u00ba\2\u0c08\u0c07\3\2\2\2\u0c08\u0c09\3\2")
        buf.write(u"\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0c\7x\2\2\u0c0b\u0c0d")
        buf.write(u"\5\u01ae\u00d8\2\u0c0c\u0c0b\3\2\2\2\u0c0c\u0c0d\3\2")
        buf.write(u"\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c10\7y\2\2\u0c0f\u0c11")
        buf.write(u"\5\u017c\u00bf\2\u0c10\u0c0f\3\2\2\2\u0c10\u0c11\3\2")
        buf.write(u"\2\2\u0c11\u0c12\3\2\2\2\u0c12\u0c13\7}\2\2\u0c13\u0c1a")
        buf.write(u"\3\2\2\2\u0c14\u0c15\7(\2\2\u0c15\u0c16\5\f\7\2\u0c16")
        buf.write(u"\u0c17\5\6\4\2\u0c17\u0c18\7}\2\2\u0c18\u0c1a\3\2\2\2")
        buf.write(u"\u0c19\u0be7\3\2\2\2\u0c19\u0c05\3\2\2\2\u0c19\u0c14")
        buf.write(u"\3\2\2\2\u0c1a\u023b\3\2\2\2\u0c1b\u0c1d\5\u0264\u0133")
        buf.write(u"\2\u0c1c\u0c1b\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1f")
        buf.write(u"\3\2\2\2\u0c1e\u0c20\7B\2\2\u0c1f\u0c1e\3\2\2\2\u0c1f")
        buf.write(u"\u0c20\3\2\2\2\u0c20\u0c21\3\2\2\2\u0c21\u0c22\5\u01a8")
        buf.write(u"\u00d5\2\u0c22\u0c24\5\6\4\2\u0c23\u0c25\5\u0172\u00ba")
        buf.write(u"\2\u0c24\u0c23\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c26")
        buf.write(u"\3\2\2\2\u0c26\u0c28\7x\2\2\u0c27\u0c29\5\u01ae\u00d8")
        buf.write(u"\2\u0c28\u0c27\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2a")
        buf.write(u"\3\2\2\2\u0c2a\u0c2c\7y\2\2\u0c2b\u0c2d\5\u017c\u00bf")
        buf.write(u"\2\u0c2c\u0c2b\3\2\2\2\u0c2c\u0c2d\3\2\2\2\u0c2d\u0c2e")
        buf.write(u"\3\2\2\2\u0c2e\u0c2f\7}\2\2\u0c2f\u023d\3\2\2\2\u0c30")
        buf.write(u"\u0c32\5\u0264\u0133\2\u0c31\u0c30\3\2\2\2\u0c31\u0c32")
        buf.write(u"\3\2\2\2\u0c32\u0c34\3\2\2\2\u0c33\u0c35\7B\2\2\u0c34")
        buf.write(u"\u0c33\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c36\3\2\2")
        buf.write(u"\2\u0c36\u0c37\5\f\7\2\u0c37\u0c38\5\6\4\2\u0c38\u0c39")
        buf.write(u"\7t\2\2\u0c39\u0c3a\5\u0240\u0121\2\u0c3a\u0c3b\7u\2")
        buf.write(u"\2\u0c3b\u023f\3\2\2\2\u0c3c\u0c3e\5\u0264\u0133\2\u0c3d")
        buf.write(u"\u0c3c\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c53\3\2\2")
        buf.write(u"\2\u0c3f\u0c40\5\u02e8\u0175\2\u0c40\u0c47\7}\2\2\u0c41")
        buf.write(u"\u0c43\5\u0264\u0133\2\u0c42\u0c41\3\2\2\2\u0c42\u0c43")
        buf.write(u"\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c45\5\u02ea\u0176")
        buf.write(u"\2\u0c45\u0c46\7}\2\2\u0c46\u0c48\3\2\2\2\u0c47\u0c42")
        buf.write(u"\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48\u0c54\3\2\2\2\u0c49")
        buf.write(u"\u0c4a\5\u02ea\u0176\2\u0c4a\u0c51\7}\2\2\u0c4b\u0c4d")
        buf.write(u"\5\u0264\u0133\2\u0c4c\u0c4b\3\2\2\2\u0c4c\u0c4d\3\2")
        buf.write(u"\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c4f\5\u02e8\u0175\2")
        buf.write(u"\u0c4f\u0c50\7}\2\2\u0c50\u0c52\3\2\2\2\u0c51\u0c4c\3")
        buf.write(u"\2\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c54\3\2\2\2\u0c53")
        buf.write(u"\u0c3f\3\2\2\2\u0c53\u0c49\3\2\2\2\u0c54\u0241\3\2\2")
        buf.write(u"\2\u0c55\u0c57\5\u0264\u0133\2\u0c56\u0c55\3\2\2\2\u0c56")
        buf.write(u"\u0c57\3\2\2\2\u0c57\u0c59\3\2\2\2\u0c58\u0c5a\7B\2\2")
        buf.write(u"\u0c59\u0c58\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5b")
        buf.write(u"\3\2\2\2\u0c5b\u0c5c\7(\2\2\u0c5c\u0c5d\5\f\7\2\u0c5d")
        buf.write(u"\u0c5e\5\6\4\2\u0c5e\u0c5f\7}\2\2\u0c5f\u0243\3\2\2\2")
        buf.write(u"\u0c60\u0c62\5\u0264\u0133\2\u0c61\u0c60\3\2\2\2\u0c61")
        buf.write(u"\u0c62\3\2\2\2\u0c62\u0c64\3\2\2\2\u0c63\u0c65\7B\2\2")
        buf.write(u"\u0c64\u0c63\3\2\2\2\u0c64\u0c65\3\2\2\2\u0c65\u0c66")
        buf.write(u"\3\2\2\2\u0c66\u0c67\5\f\7\2\u0c67\u0c68\7^\2\2\u0c68")
        buf.write(u"\u0c69\7v\2\2\u0c69\u0c6a\5\u01ae\u00d8\2\u0c6a\u0c6b")
        buf.write(u"\7w\2\2\u0c6b\u0c6c\7t\2\2\u0c6c\u0c6d\5\u0240\u0121")
        buf.write(u"\2\u0c6d\u0c6e\7u\2\2\u0c6e\u0245\3\2\2\2\u0c6f\u0c71")
        buf.write(u"\5\u0264\u0133\2\u0c70\u0c6f\3\2\2\2\u0c70\u0c71\3\2")
        buf.write(u"\2\2\u0c71\u0c73\3\2\2\2\u0c72\u0c74\5\u024c\u0127\2")
        buf.write(u"\u0c73\u0c72\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74\u0c75")
        buf.write(u"\3\2\2\2\u0c75\u0c76\7&\2\2\u0c76\u0c78\5\6\4\2\u0c77")
        buf.write(u"\u0c79\5\u0248\u0125\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79")
        buf.write(u"\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7c\5\u024a\u0126")
        buf.write(u"\2\u0c7b\u0c7d\7}\2\2\u0c7c\u0c7b\3\2\2\2\u0c7c\u0c7d")
        buf.write(u"\3\2\2\2\u0c7d\u0247\3\2\2\2\u0c7e\u0c7f\7|\2\2\u0c7f")
        buf.write(u"\u0c80\5\24\13\2\u0c80\u0249\3\2\2\2\u0c81\u0c82\7t\2")
        buf.write(u"\2\u0c82\u0c8b\7u\2\2\u0c83\u0c84\7t\2\2\u0c84\u0c86")
        buf.write(u"\5\u0250\u0129\2\u0c85\u0c87\7{\2\2\u0c86\u0c85\3\2\2")
        buf.write(u"\2\u0c86\u0c87\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0c89")
        buf.write(u"\7u\2\2\u0c89\u0c8b\3\2\2\2\u0c8a\u0c81\3\2\2\2\u0c8a")
        buf.write(u"\u0c83\3\2\2\2\u0c8b\u024b\3\2\2\2\u0c8c\u0c8e\5\u024e")
        buf.write(u"\u0128\2\u0c8d\u0c8c\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f")
        buf.write(u"\u0c8d\3\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u024d\3\2\2")
        buf.write(u"\2\u0c91\u0c92\t\r\2\2\u0c92\u024f\3\2\2\2\u0c93\u0c98")
        buf.write(u"\5\u0252\u012a\2\u0c94\u0c95\7{\2\2\u0c95\u0c97\5\u0252")
        buf.write(u"\u012a\2\u0c96\u0c94\3\2\2\2\u0c97\u0c9a\3\2\2\2\u0c98")
        buf.write(u"\u0c96\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u0251\3\2\2")
        buf.write(u"\2\u0c9a\u0c98\3\2\2\2\u0c9b\u0c9d\5\u0264\u0133\2\u0c9c")
        buf.write(u"\u0c9b\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9e\3\2\2")
        buf.write(u"\2\u0c9e\u0ca1\5\6\4\2\u0c9f\u0ca0\7\u0088\2\2\u0ca0")
        buf.write(u"\u0ca2\5\u00e4s\2\u0ca1\u0c9f\3\2\2\2\u0ca1\u0ca2\3\2")
        buf.write(u"\2\2\u0ca2\u0253\3\2\2\2\u0ca3\u0ca5\5\u0264\u0133\2")
        buf.write(u"\u0ca4\u0ca3\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca7")
        buf.write(u"\3\2\2\2\u0ca6\u0ca8\5\u0256\u012c\2\u0ca7\u0ca6\3\2")
        buf.write(u"\2\2\u0ca7\u0ca8\3\2\2\2\u0ca8\u0ca9\3\2\2\2\u0ca9\u0caa")
        buf.write(u"\7 \2\2\u0caa\u0cab\5\u01a8\u00d5\2\u0cab\u0cad\5\6\4")
        buf.write(u"\2\u0cac\u0cae\5\u022e\u0118\2\u0cad\u0cac\3\2\2\2\u0cad")
        buf.write(u"\u0cae\3\2\2\2\u0cae\u0caf\3\2\2\2\u0caf\u0cb1\7x\2\2")
        buf.write(u"\u0cb0\u0cb2\5\u01ae\u00d8\2\u0cb1\u0cb0\3\2\2\2\u0cb1")
        buf.write(u"\u0cb2\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb5\7y\2\2")
        buf.write(u"\u0cb4\u0cb6\5\u017c\u00bf\2\u0cb5\u0cb4\3\2\2\2\u0cb5")
        buf.write(u"\u0cb6\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u0cb8\7}\2\2")
        buf.write(u"\u0cb8\u0255\3\2\2\2\u0cb9\u0cbd\5\u0258\u012d\2\u0cba")
        buf.write(u"\u0cbc\5\u0258\u012d\2\u0cbb\u0cba\3\2\2\2\u0cbc\u0cbf")
        buf.write(u"\3\2\2\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe")
        buf.write(u"\u0257\3\2\2\2\u0cbf\u0cbd\3\2\2\2\u0cc0\u0cc7\7B\2\2")
        buf.write(u"\u0cc1\u0cc7\7N\2\2\u0cc2\u0cc7\7M\2\2\u0cc3\u0cc7\7")
        buf.write(u":\2\2\u0cc4\u0cc7\7L\2\2\u0cc5\u0cc7\5\u0286\u0144\2")
        buf.write(u"\u0cc6\u0cc0\3\2\2\2\u0cc6\u0cc1\3\2\2\2\u0cc6\u0cc2")
        buf.write(u"\3\2\2\2\u0cc6\u0cc3\3\2\2\2\u0cc6\u0cc4\3\2\2\2\u0cc6")
        buf.write(u"\u0cc5\3\2\2\2\u0cc7\u0259\3\2\2\2\u0cc8\u0cc9\5\u025c")
        buf.write(u"\u012f\2\u0cc9\u025b\3\2\2\2\u0cca\u0ccc\5\u025e\u0130")
        buf.write(u"\2\u0ccb\u0cca\3\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u0ccb")
        buf.write(u"\3\2\2\2\u0ccd\u0cce\3\2\2\2\u0cce\u025d\3\2\2\2\u0ccf")
        buf.write(u"\u0cd0\7v\2\2\u0cd0\u0cd1\5\u0260\u0131\2\u0cd1\u0cd3")
        buf.write(u"\5\u026e\u0138\2\u0cd2\u0cd4\7{\2\2\u0cd3\u0cd2\3\2\2")
        buf.write(u"\2\u0cd3\u0cd4\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cd6")
        buf.write(u"\7w\2\2\u0cd6\u025f\3\2\2\2\u0cd7\u0cd8\5\u0262\u0132")
        buf.write(u"\2\u0cd8\u0cd9\7|\2\2\u0cd9\u0261\3\2\2\2\u0cda\u0cdd")
        buf.write(u"\5\u02fe\u0180\2\u0cdb\u0cdd\5\6\4\2\u0cdc\u0cda\3\2")
        buf.write(u"\2\2\u0cdc\u0cdb\3\2\2\2\u0cdd\u0263\3\2\2\2\u0cde\u0cdf")
        buf.write(u"\5\u0266\u0134\2\u0cdf\u0265\3\2\2\2\u0ce0\u0ce2\5\u0268")
        buf.write(u"\u0135\2\u0ce1\u0ce0\3\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3")
        buf.write(u"\u0ce1\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u0267\3\2\2")
        buf.write(u"\2\u0ce5\u0ce7\7v\2\2\u0ce6\u0ce8\5\u026a\u0136\2\u0ce7")
        buf.write(u"\u0ce6\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8\u0ce9\3\2\2")
        buf.write(u"\2\u0ce9\u0ceb\5\u026e\u0138\2\u0cea\u0cec\7{\2\2\u0ceb")
        buf.write(u"\u0cea\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0ced\3\2\2")
        buf.write(u"\2\u0ced\u0cee\7w\2\2\u0cee\u0269\3\2\2\2\u0cef\u0cf0")
        buf.write(u"\5\u026c\u0137\2\u0cf0\u0cf1\7|\2\2\u0cf1\u026b\3\2\2")
        buf.write(u"\2\u0cf2\u0cf5\5\u02fe\u0180\2\u0cf3\u0cf5\5\6\4\2\u0cf4")
        buf.write(u"\u0cf2\3\2\2\2\u0cf4\u0cf3\3\2\2\2\u0cf5\u026d\3\2\2")
        buf.write(u"\2\u0cf6\u0cfb\5\u0270\u0139\2\u0cf7\u0cf8\7{\2\2\u0cf8")
        buf.write(u"\u0cfa\5\u0270\u0139\2\u0cf9\u0cf7\3\2\2\2\u0cfa\u0cfd")
        buf.write(u"\3\2\2\2\u0cfb\u0cf9\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc")
        buf.write(u"\u026f\3\2\2\2\u0cfd\u0cfb\3\2\2\2\u0cfe\u0d00\5\u0272")
        buf.write(u"\u013a\2\u0cff\u0d01\5\u0274\u013b\2\u0d00\u0cff\3\2")
        buf.write(u"\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0271\3\2\2\2\u0d02\u0d03")
        buf.write(u"\5\4\3\2\u0d03\u0273\3\2\2\2\u0d04\u0d06\7x\2\2\u0d05")
        buf.write(u"\u0d07\5\u0276\u013c\2\u0d06\u0d05\3\2\2\2\u0d06\u0d07")
        buf.write(u"\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d09\7y\2\2\u0d09")
        buf.write(u"\u0275\3\2\2\2\u0d0a\u0d0f\5\u0278\u013d\2\u0d0b\u0d0c")
        buf.write(u"\7{\2\2\u0d0c\u0d0e\5\u0278\u013d\2\u0d0d\u0d0b\3\2\2")
        buf.write(u"\2\u0d0e\u0d11\3\2\2\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d10")
        buf.write(u"\3\2\2\2\u0d10\u0277\3\2\2\2\u0d11\u0d0f\3\2\2\2\u0d12")
        buf.write(u"\u0d13\5\u027e\u0140\2\u0d13\u0279\3\2\2\2\u0d14\u0d19")
        buf.write(u"\5\u027c\u013f\2\u0d15\u0d16\7{\2\2\u0d16\u0d18\5\u027c")
        buf.write(u"\u013f\2\u0d17\u0d15\3\2\2\2\u0d18\u0d1b\3\2\2\2\u0d19")
        buf.write(u"\u0d17\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u027b\3\2\2")
        buf.write(u"\2\u0d1b\u0d19\3\2\2\2\u0d1c\u0d1d\5\6\4\2\u0d1d\u0d1e")
        buf.write(u"\7\u0088\2\2\u0d1e\u0d1f\5\u027e\u0140\2\u0d1f\u027d")
        buf.write(u"\3\2\2\2\u0d20\u0d21\5\u00e0q\2\u0d21\u027f\3\2\2\2\u0d22")
        buf.write(u"\u0d23\7e\2\2\u0d23\u0281\3\2\2\2\u0d24\u0d25\7e\2\2")
        buf.write(u"\u0d25\u0283\3\2\2\2\u0d26\u0d27\7e\2\2\u0d27\u0285\3")
        buf.write(u"\2\2\2\u0d28\u0d29\7e\2\2\u0d29\u0287\3\2\2\2\u0d2a\u0d2b")
        buf.write(u"\7e\2\2\u0d2b\u0289\3\2\2\2\u0d2c\u0d2d\7e\2\2\u0d2d")
        buf.write(u"\u028b\3\2\2\2\u0d2e\u0d2f\7e\2\2\u0d2f\u028d\3\2\2\2")
        buf.write(u"\u0d30\u0d31\7e\2\2\u0d31\u028f\3\2\2\2\u0d32\u0d33\7")
        buf.write(u"e\2\2\u0d33\u0291\3\2\2\2\u0d34\u0d35\7e\2\2\u0d35\u0293")
        buf.write(u"\3\2\2\2\u0d36\u0d37\7e\2\2\u0d37\u0295\3\2\2\2\u0d38")
        buf.write(u"\u0d3a\5\u0264\u0133\2\u0d39\u0d38\3\2\2\2\u0d39\u0d3a")
        buf.write(u"\3\2\2\2\u0d3a\u0d43\3\2\2\2\u0d3b\u0d3d\7*\2\2\u0d3c")
        buf.write(u"\u0d3b\3\2\2\2\u0d3c\u0d3d\3\2\2\2\u0d3d\u0d3f\3\2\2")
        buf.write(u"\2\u0d3e\u0d40\7e\2\2\u0d3f\u0d3e\3\2\2\2\u0d3f\u0d40")
        buf.write(u"\3\2\2\2\u0d40\u0d44\3\2\2\2\u0d41\u0d42\7e\2\2\u0d42")
        buf.write(u"\u0d44\7*\2\2\u0d43\u0d3c\3\2\2\2\u0d43\u0d41\3\2\2\2")
        buf.write(u"\u0d44\u0d45\3\2\2\2\u0d45\u0d46\7\u0087\2\2\u0d46\u0d47")
        buf.write(u"\5\6\4\2\u0d47\u0d48\7x\2\2\u0d48\u0d49\7y\2\2\u0d49")
        buf.write(u"\u0d4a\5\u0208\u0105\2\u0d4a\u0297\3\2\2\2\u0d4b\u0d4d")
        buf.write(u"\t\16\2\2\u0d4c\u0d4b\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d")
        buf.write(u"\u0d4e\3\2\2\2\u0d4e\u0d64\7Z\2\2\u0d4f\u0d50\7*\2\2")
        buf.write(u"\u0d50\u0d51\7e\2\2\u0d51\u0d64\7Z\2\2\u0d52\u0d53\7")
        buf.write(u"e\2\2\u0d53\u0d54\7*\2\2\u0d54\u0d64\7Z\2\2\u0d55\u0d56")
        buf.write(u"\7*\2\2\u0d56\u0d57\7Z\2\2\u0d57\u0d64\7e\2\2\u0d58\u0d59")
        buf.write(u"\7e\2\2\u0d59\u0d5a\7Z\2\2\u0d5a\u0d64\7*\2\2\u0d5b\u0d5c")
        buf.write(u"\7Z\2\2\u0d5c\u0d64\t\16\2\2\u0d5d\u0d5e\7Z\2\2\u0d5e")
        buf.write(u"\u0d5f\7*\2\2\u0d5f\u0d64\7e\2\2\u0d60\u0d61\7Z\2\2\u0d61")
        buf.write(u"\u0d62\7e\2\2\u0d62\u0d64\7*\2\2\u0d63\u0d4c\3\2\2\2")
        buf.write(u"\u0d63\u0d4f\3\2\2\2\u0d63\u0d52\3\2\2\2\u0d63\u0d55")
        buf.write(u"\3\2\2\2\u0d63\u0d58\3\2\2\2\u0d63\u0d5b\3\2\2\2\u0d63")
        buf.write(u"\u0d5d\3\2\2\2\u0d63\u0d60\3\2\2\2\u0d64\u0299\3\2\2")
        buf.write(u"\2\u0d65\u0d68\5\u029c\u014f\2\u0d66\u0d68\5\u02ae\u0158")
        buf.write(u"\2\u0d67\u0d65\3\2\2\2\u0d67\u0d66\3\2\2\2\u0d68\u029b")
        buf.write(u"\3\2\2\2\u0d69\u0d6a\7e\2\2\u0d6a\u0d6b\5\u00eex\2\u0d6b")
        buf.write(u"\u029d\3\2\2\2\u0d6c\u0d6d\5\u02a0\u0151\2\u0d6d\u029f")
        buf.write(u"\3\2\2\2\u0d6e\u0d73\5\20\t\2\u0d6f\u0d72\5\u0220\u0111")
        buf.write(u"\2\u0d70\u0d72\7\u008b\2\2\u0d71\u0d6f\3\2\2\2\u0d71")
        buf.write(u"\u0d70\3\2\2\2\u0d72\u0d75\3\2\2\2\u0d73\u0d71\3\2\2")
        buf.write(u"\2\u0d73\u0d74\3\2\2\2\u0d74\u0d76\3\2\2\2\u0d75\u0d73")
        buf.write(u"\3\2\2\2\u0d76\u0d77\7\u0080\2\2\u0d77\u0d85\3\2\2\2")
        buf.write(u"\u0d78\u0d7d\5\36\20\2\u0d79\u0d7c\5\u0220\u0111\2\u0d7a")
        buf.write(u"\u0d7c\7\u008b\2\2\u0d7b\u0d79\3\2\2\2\u0d7b\u0d7a\3")
        buf.write(u"\2\2\2\u0d7c\u0d7f\3\2\2\2\u0d7d\u0d7b\3\2\2\2\u0d7d")
        buf.write(u"\u0d7e\3\2\2\2\u0d7e\u0d80\3\2\2\2\u0d7f\u0d7d\3\2\2")
        buf.write(u"\2\u0d80\u0d81\7\u0080\2\2\u0d81\u0d85\3\2\2\2\u0d82")
        buf.write(u"\u0d83\7i\2\2\u0d83\u0d85\7\u0080\2\2\u0d84\u0d6e\3\2")
        buf.write(u"\2\2\u0d84\u0d78\3\2\2\2\u0d84\u0d82\3\2\2\2\u0d85\u02a1")
        buf.write(u"\3\2\2\2\u0d86\u0d87\5\f\7\2\u0d87\u02a3\3\2\2\2\u0d88")
        buf.write(u"\u0d89\5\66\34\2\u0d89\u02a5\3\2\2\2\u0d8a\u0d8d\5\u02a8")
        buf.write(u"\u0155\2\u0d8b\u0d8d\5\u02aa\u0156\2\u0d8c\u0d8a\3\2")
        buf.write(u"\2\2\u0d8c\u0d8b\3\2\2\2\u0d8d\u02a7\3\2\2\2\u0d8e\u0d8f")
        buf.write(u"\7\u0080\2\2\u0d8f\u0d90\5v<\2\u0d90\u02a9\3\2\2\2\u0d91")
        buf.write(u"\u0d92\7\u0083\2\2\u0d92\u0d93\5v<\2\u0d93\u02ab\3\2")
        buf.write(u"\2\2\u0d94\u0d95\7X\2\2\u0d95\u0d96\7x\2\2\u0d96\u0d97")
        buf.write(u"\5\u02a2\u0152\2\u0d97\u0d98\7y\2\2\u0d98\u02ad\3\2\2")
        buf.write(u"\2\u0d99\u0d9a\7-\2\2\u0d9a\u0d9b\7x\2\2\u0d9b\u0d9c")
        buf.write(u"\5\u02a0\u0151\2\u0d9c\u0d9d\5\u02b0\u0159\2\u0d9d\u0d9e")
        buf.write(u"\7y\2\2\u0d9e\u0d9f\5\u00eav\2\u0d9f\u02af\3\2\2\2\u0da0")
        buf.write(u"\u0da5\5\u02b2\u015a\2\u0da1\u0da2\7{\2\2\u0da2\u0da4")
        buf.write(u"\5\u02b2\u015a\2\u0da3\u0da1\3\2\2\2\u0da4\u0da7\3\2")
        buf.write(u"\2\2\u0da5\u0da3\3\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u02b1")
        buf.write(u"\3\2\2\2\u0da7\u0da5\3\2\2\2\u0da8\u0da9\5\6\4\2\u0da9")
        buf.write(u"\u0daa\7\u0088\2\2\u0daa\u0dab\5\u02b4\u015b\2\u0dab")
        buf.write(u"\u02b3\3\2\2\2\u0dac\u0dad\7\u0083\2\2\u0dad\u0db0\5")
        buf.write(u",\27\2\u0dae\u0db0\5\u00e0q\2\u0daf\u0dac\3\2\2\2\u0daf")
        buf.write(u"\u0dae\3\2\2\2\u0db0\u02b5\3\2\2\2\u0db1\u0db2\5\u02b8")
        buf.write(u"\u015d\2\u0db2\u02b7\3\2\2\2\u0db3\u0db5\5\u0264\u0133")
        buf.write(u"\2\u0db4\u0db3\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db7")
        buf.write(u"\3\2\2\2\u0db6\u0db8\5\u02ba\u015e\2\u0db7\u0db6\3\2")
        buf.write(u"\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dba")
        buf.write(u"\7-\2\2\u0dba\u0dbb\5\u02be\u0160\2\u0dbb\u0dbc\5\u02c0")
        buf.write(u"\u0161\2\u0dbc\u0dbd\7}\2\2\u0dbd\u02b9\3\2\2\2\u0dbe")
        buf.write(u"\u0dc0\5\u02bc\u015f\2\u0dbf\u0dbe\3\2\2\2\u0dc0\u0dc1")
        buf.write(u"\3\2\2\2\u0dc1\u0dbf\3\2\2\2\u0dc1\u0dc2\3\2\2\2\u0dc2")
        buf.write(u"\u02bb\3\2\2\2\u0dc3\u0dc4\t\17\2\2\u0dc4\u02bd\3\2\2")
        buf.write(u"\2\u0dc5\u0dc6\5\f\7\2\u0dc6\u02bf\3\2\2\2\u0dc7\u0dc9")
        buf.write(u"\5\u02c2\u0162\2\u0dc8\u0dc7\3\2\2\2\u0dc9\u0dca\3\2")
        buf.write(u"\2\2\u0dca\u0dc8\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u02c1")
        buf.write(u"\3\2\2\2\u0dcc\u0dcd\5\6\4\2\u0dcd\u0dce\7v\2\2\u0dce")
        buf.write(u"\u0dcf\5\u00e4s\2\u0dcf\u0dd0\7w\2\2\u0dd0\u02c3\3\2")
        buf.write(u"\2\2\u0dd1\u0dd2\5\u02c6\u0164\2\u0dd2\u02c5\3\2\2\2")
        buf.write(u"\u0dd3\u0dd4\7Y\2\2\u0dd4\u0dd5\5\u02a2\u0152\2\u0dd5")
        buf.write(u"\u0dd6\7v\2\2\u0dd6\u0dd7\5\u00e0q\2\u0dd7\u0dd8\7w\2")
        buf.write(u"\2\u0dd8\u02c7\3\2\2\2\u0dd9\u0dda\7\61\2\2\u0dda\u02c9")
        buf.write(u"\3\2\2\2\u0ddb\u0ddc\7>\2\2\u0ddc\u02cb\3\2\2\2\u0ddd")
        buf.write(u"\u0dde\7k\2\2\u0dde\u02cd\3\2\2\2\u0ddf\u0de0\7=\2\2")
        buf.write(u"\u0de0\u02cf\3\2\2\2\u0de1\u0de2\7E\2\2\u0de2\u02d1\3")
        buf.write(u"\2\2\2\u0de3\u0de4\7\'\2\2\u0de4\u02d3\3\2\2\2\u0de5")
        buf.write(u"\u0de6\7;\2\2\u0de6\u02d5\3\2\2\2\u0de7\u0de8\7G\2\2")
        buf.write(u"\u0de8\u02d7\3\2\2\2\u0de9\u0dea\7\21\2\2\u0dea\u02d9")
        buf.write(u"\3\2\2\2\u0deb\u0dec\7!\2\2\u0dec\u02db\3\2\2\2\u0ded")
        buf.write(u"\u0dee\7U\2\2\u0dee\u02dd\3\2\2\2\u0def\u0df0\7\64\2")
        buf.write(u"\2\u0df0\u02df\3\2\2\2\u0df1\u0df2\7\25\2\2\u0df2\u02e1")
        buf.write(u"\3\2\2\2\u0df3\u0df4\7K\2\2\u0df4\u02e3\3\2\2\2\u0df5")
        buf.write(u"\u0df6\7\16\2\2\u0df6\u02e5\3\2\2\2\u0df7\u0df8\7m\2")
        buf.write(u"\2\u0df8\u02e7\3\2\2\2\u0df9\u0dfa\7\62\2\2\u0dfa\u02e9")
        buf.write(u"\3\2\2\2\u0dfb\u0dfc\7V\2\2\u0dfc\u02eb\3\2\2\2\u0dfd")
        buf.write(u"\u0dfe\7\r\2\2\u0dfe\u02ed\3\2\2\2\u0dff\u0e00\7Q\2\2")
        buf.write(u"\u0e00\u02ef\3\2\2\2\u0e01\u0e02\7$\2\2\u0e02\u02f1\3")
        buf.write(u"\2\2\2\u0e03\u0e04\7\17\2\2\u0e04\u02f3\3\2\2\2\u0e05")
        buf.write(u"\u0e06\7\u0088\2\2\u0e06\u0e07\7\u008a\2\2\u0e07\u0e08")
        buf.write(u"\6\u017b\2\3\u0e08\u02f5\3\2\2\2\u0e09\u0e0a\7\u008a")
        buf.write(u"\2\2\u0e0a\u0e0b\7\u008a\2\2\u0e0b\u0e0c\6\u017c\3\3")
        buf.write(u"\u0e0c\u02f7\3\2\2\2\u0e0d\u0e0e\7\u008a\2\2\u0e0e\u0e0f")
        buf.write(u"\7\u0096\2\2\u0e0f\u0e10\6\u017d\4\3\u0e10\u02f9\3\2")
        buf.write(u"\2\2\u0e11\u0e18\5\u02fc\u017f\2\u0e12\u0e18\7o\2\2\u0e13")
        buf.write(u"\u0e18\7q\2\2\u0e14\u0e18\7r\2\2\u0e15\u0e18\7s\2\2\u0e16")
        buf.write(u"\u0e18\7C\2\2\u0e17\u0e11\3\2\2\2\u0e17\u0e12\3\2\2\2")
        buf.write(u"\u0e17\u0e13\3\2\2\2\u0e17\u0e14\3\2\2\2\u0e17\u0e15")
        buf.write(u"\3\2\2\2\u0e17\u0e16\3\2\2\2\u0e18\u02fb\3\2\2\2\u0e19")
        buf.write(u"\u0e1a\t\20\2\2\u0e1a\u02fd\3\2\2\2\u0e1b\u0e69\7\f\2")
        buf.write(u"\2\u0e1c\u0e69\7\20\2\2\u0e1d\u0e69\7\22\2\2\u0e1e\u0e69")
        buf.write(u"\7\23\2\2\u0e1f\u0e69\7\24\2\2\u0e20\u0e69\7\26\2\2\u0e21")
        buf.write(u"\u0e69\7\27\2\2\u0e22\u0e69\7\30\2\2\u0e23\u0e69\7\31")
        buf.write(u"\2\2\u0e24\u0e69\7\32\2\2\u0e25\u0e69\7\33\2\2\u0e26")
        buf.write(u"\u0e69\7\34\2\2\u0e27\u0e69\7\35\2\2\u0e28\u0e69\7\36")
        buf.write(u"\2\2\u0e29\u0e69\7\37\2\2\u0e2a\u0e69\7 \2\2\u0e2b\u0e69")
        buf.write(u"\7\"\2\2\u0e2c\u0e69\7#\2\2\u0e2d\u0e69\7%\2\2\u0e2e")
        buf.write(u"\u0e69\7&\2\2\u0e2f\u0e69\7(\2\2\u0e30\u0e69\7)\2\2\u0e31")
        buf.write(u"\u0e69\7*\2\2\u0e32\u0e69\7+\2\2\u0e33\u0e69\7,\2\2\u0e34")
        buf.write(u"\u0e69\7-\2\2\u0e35\u0e69\7.\2\2\u0e36\u0e69\7/\2\2\u0e37")
        buf.write(u"\u0e69\7\60\2\2\u0e38\u0e69\7\63\2\2\u0e39\u0e69\7\65")
        buf.write(u"\2\2\u0e3a\u0e69\7\66\2\2\u0e3b\u0e69\7\67\2\2\u0e3c")
        buf.write(u"\u0e69\78\2\2\u0e3d\u0e69\79\2\2\u0e3e\u0e69\7:\2\2\u0e3f")
        buf.write(u"\u0e69\7<\2\2\u0e40\u0e69\7?\2\2\u0e41\u0e69\7@\2\2\u0e42")
        buf.write(u"\u0e69\7A\2\2\u0e43\u0e69\7B\2\2\u0e44\u0e69\7C\2\2\u0e45")
        buf.write(u"\u0e69\7D\2\2\u0e46\u0e69\7F\2\2\u0e47\u0e69\7H\2\2\u0e48")
        buf.write(u"\u0e69\7I\2\2\u0e49\u0e69\7J\2\2\u0e4a\u0e69\7L\2\2\u0e4b")
        buf.write(u"\u0e69\7M\2\2\u0e4c\u0e69\7N\2\2\u0e4d\u0e69\7O\2\2\u0e4e")
        buf.write(u"\u0e69\7P\2\2\u0e4f\u0e69\7R\2\2\u0e50\u0e69\7S\2\2\u0e51")
        buf.write(u"\u0e69\7T\2\2\u0e52\u0e69\7W\2\2\u0e53\u0e69\7X\2\2\u0e54")
        buf.write(u"\u0e69\7Y\2\2\u0e55\u0e69\7Z\2\2\u0e56\u0e69\7[\2\2\u0e57")
        buf.write(u"\u0e69\7\\\2\2\u0e58\u0e69\7]\2\2\u0e59\u0e69\7^\2\2")
        buf.write(u"\u0e5a\u0e69\7_\2\2\u0e5b\u0e69\7`\2\2\u0e5c\u0e69\7")
        buf.write(u"a\2\2\u0e5d\u0e69\5\u032e\u0198\2\u0e5e\u0e69\7b\2\2")
        buf.write(u"\u0e5f\u0e69\7c\2\2\u0e60\u0e69\7d\2\2\u0e61\u0e69\7")
        buf.write(u"e\2\2\u0e62\u0e69\7f\2\2\u0e63\u0e69\7g\2\2\u0e64\u0e69")
        buf.write(u"\7h\2\2\u0e65\u0e69\7i\2\2\u0e66\u0e69\7j\2\2\u0e67\u0e69")
        buf.write(u"\7l\2\2\u0e68\u0e1b\3\2\2\2\u0e68\u0e1c\3\2\2\2\u0e68")
        buf.write(u"\u0e1d\3\2\2\2\u0e68\u0e1e\3\2\2\2\u0e68\u0e1f\3\2\2")
        buf.write(u"\2\u0e68\u0e20\3\2\2\2\u0e68\u0e21\3\2\2\2\u0e68\u0e22")
        buf.write(u"\3\2\2\2\u0e68\u0e23\3\2\2\2\u0e68\u0e24\3\2\2\2\u0e68")
        buf.write(u"\u0e25\3\2\2\2\u0e68\u0e26\3\2\2\2\u0e68\u0e27\3\2\2")
        buf.write(u"\2\u0e68\u0e28\3\2\2\2\u0e68\u0e29\3\2\2\2\u0e68\u0e2a")
        buf.write(u"\3\2\2\2\u0e68\u0e2b\3\2\2\2\u0e68\u0e2c\3\2\2\2\u0e68")
        buf.write(u"\u0e2d\3\2\2\2\u0e68\u0e2e\3\2\2\2\u0e68\u0e2f\3\2\2")
        buf.write(u"\2\u0e68\u0e30\3\2\2\2\u0e68\u0e31\3\2\2\2\u0e68\u0e32")
        buf.write(u"\3\2\2\2\u0e68\u0e33\3\2\2\2\u0e68\u0e34\3\2\2\2\u0e68")
        buf.write(u"\u0e35\3\2\2\2\u0e68\u0e36\3\2\2\2\u0e68\u0e37\3\2\2")
        buf.write(u"\2\u0e68\u0e38\3\2\2\2\u0e68\u0e39\3\2\2\2\u0e68\u0e3a")
        buf.write(u"\3\2\2\2\u0e68\u0e3b\3\2\2\2\u0e68\u0e3c\3\2\2\2\u0e68")
        buf.write(u"\u0e3d\3\2\2\2\u0e68\u0e3e\3\2\2\2\u0e68\u0e3f\3\2\2")
        buf.write(u"\2\u0e68\u0e40\3\2\2\2\u0e68\u0e41\3\2\2\2\u0e68\u0e42")
        buf.write(u"\3\2\2\2\u0e68\u0e43\3\2\2\2\u0e68\u0e44\3\2\2\2\u0e68")
        buf.write(u"\u0e45\3\2\2\2\u0e68\u0e46\3\2\2\2\u0e68\u0e47\3\2\2")
        buf.write(u"\2\u0e68\u0e48\3\2\2\2\u0e68\u0e49\3\2\2\2\u0e68\u0e4a")
        buf.write(u"\3\2\2\2\u0e68\u0e4b\3\2\2\2\u0e68\u0e4c\3\2\2\2\u0e68")
        buf.write(u"\u0e4d\3\2\2\2\u0e68\u0e4e\3\2\2\2\u0e68\u0e4f\3\2\2")
        buf.write(u"\2\u0e68\u0e50\3\2\2\2\u0e68\u0e51\3\2\2\2\u0e68\u0e52")
        buf.write(u"\3\2\2\2\u0e68\u0e53\3\2\2\2\u0e68\u0e54\3\2\2\2\u0e68")
        buf.write(u"\u0e55\3\2\2\2\u0e68\u0e56\3\2\2\2\u0e68\u0e57\3\2\2")
        buf.write(u"\2\u0e68\u0e58\3\2\2\2\u0e68\u0e59\3\2\2\2\u0e68\u0e5a")
        buf.write(u"\3\2\2\2\u0e68\u0e5b\3\2\2\2\u0e68\u0e5c\3\2\2\2\u0e68")
        buf.write(u"\u0e5d\3\2\2\2\u0e68\u0e5e\3\2\2\2\u0e68\u0e5f\3\2\2")
        buf.write(u"\2\u0e68\u0e60\3\2\2\2\u0e68\u0e61\3\2\2\2\u0e68\u0e62")
        buf.write(u"\3\2\2\2\u0e68\u0e63\3\2\2\2\u0e68\u0e64\3\2\2\2\u0e68")
        buf.write(u"\u0e65\3\2\2\2\u0e68\u0e66\3\2\2\2\u0e68\u0e67\3\2\2")
        buf.write(u"\2\u0e69\u02ff\3\2\2\2\u0e6a\u0e6b\7\33\2\2\u0e6b\u0e6d")
        buf.write(u"\5\6\4\2\u0e6c\u0e6e\5\u0172\u00ba\2\u0e6d\u0e6c\3\2")
        buf.write(u"\2\2\u0e6d\u0e6e\3\2\2\2\u0e6e\u0e70\3\2\2\2\u0e6f\u0e71")
        buf.write(u"\5\u0178\u00bd\2\u0e70\u0e6f\3\2\2\2\u0e70\u0e71\3\2")
        buf.write(u"\2\2\u0e71\u0e73\3\2\2\2\u0e72\u0e74\5\u017c\u00bf\2")
        buf.write(u"\u0e73\u0e72\3\2\2\2\u0e73\u0e74\3\2\2\2\u0e74\u0e75")
        buf.write(u"\3\2\2\2\u0e75\u0e77\5\u0188\u00c5\2\u0e76\u0e78\7}\2")
        buf.write(u"\2\u0e77\u0e76\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u0301")
        buf.write(u"\3\2\2\2\u0e79\u0e7a\7\\\2\2\u0e7a\u0e7c\5\6\4\2\u0e7b")
        buf.write(u"\u0e7d\5\u0172\u00ba\2\u0e7c\u0e7b\3\2\2\2\u0e7c\u0e7d")
        buf.write(u"\3\2\2\2\u0e7d\u0e7f\3\2\2\2\u0e7e\u0e80\5\u0212\u010a")
        buf.write(u"\2\u0e7f\u0e7e\3\2\2\2\u0e7f\u0e80\3\2\2\2\u0e80\u0e82")
        buf.write(u"\3\2\2\2\u0e81\u0e83\5\u017c\u00bf\2\u0e82\u0e81\3\2")
        buf.write(u"\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e84\3\2\2\2\u0e84\u0e86")
        buf.write(u"\5\u0214\u010b\2\u0e85\u0e87\7}\2\2\u0e86\u0e85\3\2\2")
        buf.write(u"\2\u0e86\u0e87\3\2\2\2\u0e87\u0303\3\2\2\2\u0e88\u0e89")
        buf.write(u"\79\2\2\u0e89\u0e8b\5\6\4\2\u0e8a\u0e8c\5\u022e\u0118")
        buf.write(u"\2\u0e8b\u0e8a\3\2\2\2\u0e8b\u0e8c\3\2\2\2\u0e8c\u0e8e")
        buf.write(u"\3\2\2\2\u0e8d\u0e8f\5\u0234\u011b\2\u0e8e\u0e8d\3\2")
        buf.write(u"\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e91\3\2\2\2\u0e90\u0e92")
        buf.write(u"\5\u017c\u00bf\2\u0e91\u0e90\3\2\2\2\u0e91\u0e92\3\2")
        buf.write(u"\2\2\u0e92\u0e93\3\2\2\2\u0e93\u0e95\5\u0236\u011c\2")
        buf.write(u"\u0e94\u0e96\7}\2\2\u0e95\u0e94\3\2\2\2\u0e95\u0e96\3")
        buf.write(u"\2\2\2\u0e96\u0305\3\2\2\2\u0e97\u0e98\7&\2\2\u0e98\u0e9a")
        buf.write(u"\5\6\4\2\u0e99\u0e9b\5\u0248\u0125\2\u0e9a\u0e99\3\2")
        buf.write(u"\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u0e9c\3\2\2\2\u0e9c\u0e9e")
        buf.write(u"\5\u024a\u0126\2\u0e9d\u0e9f\7}\2\2\u0e9e\u0e9d\3\2\2")
        buf.write(u"\2\u0e9e\u0e9f\3\2\2\2\u0e9f\u0307\3\2\2\2\u0ea0\u0ea1")
        buf.write(u"\7 \2\2\u0ea1\u0ea2\5\u01a8\u00d5\2\u0ea2\u0ea4\5\6\4")
        buf.write(u"\2\u0ea3\u0ea5\5\u022e\u0118\2\u0ea4\u0ea3\3\2\2\2\u0ea4")
        buf.write(u"\u0ea5\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u0ea8\7x\2\2")
        buf.write(u"\u0ea7\u0ea9\5\u01ae\u00d8\2\u0ea8\u0ea7\3\2\2\2\u0ea8")
        buf.write(u"\u0ea9\3\2\2\2\u0ea9\u0eaa\3\2\2\2\u0eaa\u0eac\7y\2\2")
        buf.write(u"\u0eab\u0ead\5\u017c\u00bf\2\u0eac\u0eab\3\2\2\2\u0eac")
        buf.write(u"\u0ead\3\2\2\2\u0ead\u0eae\3\2\2\2\u0eae\u0eaf\7}\2\2")
        buf.write(u"\u0eaf\u0309\3\2\2\2\u0eb0\u0eb1\7(\2\2\u0eb1\u0eba\5")
        buf.write(u"\f\7\2\u0eb2\u0eb3\5\u019a\u00ce\2\u0eb3\u0eb4\7}\2\2")
        buf.write(u"\u0eb4\u0ebb\3\2\2\2\u0eb5\u0eb6\5\u01aa\u00d6\2\u0eb6")
        buf.write(u"\u0eb7\7t\2\2\u0eb7\u0eb8\5\u01d0\u00e9\2\u0eb8\u0eb9")
        buf.write(u"\7u\2\2\u0eb9\u0ebb\3\2\2\2\u0eba\u0eb2\3\2\2\2\u0eba")
        buf.write(u"\u0eb5\3\2\2\2\u0ebb\u030b\3\2\2\2\u0ebc\u0ebd\5\u019a")
        buf.write(u"\u00ce\2\u0ebd\u0ebe\7}\2\2\u0ebe\u030d\3\2\2\2\u0ebf")
        buf.write(u"\u0ec0\5\u01aa\u00d6\2\u0ec0\u0ec1\7t\2\2\u0ec1\u0ec2")
        buf.write(u"\5\u01c0\u00e1\2\u0ec2\u0ec3\7u\2\2\u0ec3\u030f\3\2\2")
        buf.write(u"\2\u0ec4\u0ec5\7\34\2\2\u0ec5\u0ec6\5\f\7\2\u0ec6\u0ec7")
        buf.write(u"\5\u0196\u00cc\2\u0ec7\u0ec8\7}\2\2\u0ec8\u0311\3\2\2")
        buf.write(u"\2\u0ec9\u0eca\7^\2\2\u0eca\u0ecb\7v\2\2\u0ecb\u0ecc")
        buf.write(u"\5\u01ae\u00d8\2\u0ecc\u0ecd\7w\2\2\u0ecd\u0ece\7t\2")
        buf.write(u"\2\u0ece\u0ecf\5\u01c0\u00e1\2\u0ecf\u0ed0\7u\2\2\u0ed0")
        buf.write(u"\u0313\3\2\2\2\u0ed1\u0ed2\7\u0087\2\2\u0ed2\u0ed3\5")
        buf.write(u"\6\4\2\u0ed3\u0ed4\7x\2\2\u0ed4\u0ed5\7y\2\2\u0ed5\u0ed6")
        buf.write(u"\5\u0208\u0105\2\u0ed6\u0315\3\2\2\2\u0ed7\u0ed8\5\6")
        buf.write(u"\4\2\u0ed8\u0eda\7x\2\2\u0ed9\u0edb\5\u01ae\u00d8\2\u0eda")
        buf.write(u"\u0ed9\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0edc\3\2\2")
        buf.write(u"\2\u0edc\u0ede\7y\2\2\u0edd\u0edf\5\u01fc\u00ff\2\u0ede")
        buf.write(u"\u0edd\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf\u0ee0\3\2\2")
        buf.write(u"\2\u0ee0\u0ee1\5\u020a\u0106\2\u0ee1\u0317\3\2\2\2\u0ee2")
        buf.write(u"\u0ee4\5\u031a\u018e\2\u0ee3\u0ee5\5\u0172\u00ba\2\u0ee4")
        buf.write(u"\u0ee3\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0ee6\3\2\2")
        buf.write(u"\2\u0ee6\u0ee8\7x\2\2\u0ee7\u0ee9\5\u01ae\u00d8\2\u0ee8")
        buf.write(u"\u0ee7\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eea\3\2\2")
        buf.write(u"\2\u0eea\u0eec\7y\2\2\u0eeb\u0eed\5\u017c\u00bf\2\u0eec")
        buf.write(u"\u0eeb\3\2\2\2\u0eec\u0eed\3\2\2\2\u0eed\u0eee\3\2\2")
        buf.write(u"\2\u0eee\u0eef\5\u01ac\u00d7\2\u0eef\u0319\3\2\2\2\u0ef0")
        buf.write(u"\u0ef1\5\u031c\u018f\2\u0ef1\u031b\3\2\2\2\u0ef2\u0ef8")
        buf.write(u"\5\6\4\2\u0ef3\u0ef4\5\6\4\2\u0ef4\u0ef5\7\u008c\2\2")
        buf.write(u"\u0ef5\u0ef6\5\6\4\2\u0ef6\u0ef8\3\2\2\2\u0ef7\u0ef2")
        buf.write(u"\3\2\2\2\u0ef7\u0ef3\3\2\2\2\u0ef8\u0eff\3\2\2\2\u0ef9")
        buf.write(u"\u0efa\5\n\6\2\u0efa\u0efb\7z\2\2\u0efb\u0efc\5\6\4\2")
        buf.write(u"\u0efc\u0efe\3\2\2\2\u0efd\u0ef9\3\2\2\2\u0efe\u0f01")
        buf.write(u"\3\2\2\2\u0eff\u0efd\3\2\2\2\u0eff\u0f00\3\2\2\2\u0f00")
        buf.write(u"\u031d\3\2\2\2\u0f01\u0eff\3\2\2\2\u0f02\u0f03\7F\2\2")
        buf.write(u"\u0f03\u0f04\5\u01ee\u00f8\2\u0f04\u0f05\7x\2\2\u0f05")
        buf.write(u"\u0f06\5\f\7\2\u0f06\u0f0b\5\6\4\2\u0f07\u0f08\7{\2\2")
        buf.write(u"\u0f08\u0f09\5\f\7\2\u0f09\u0f0a\5\6\4\2\u0f0a\u0f0c")
        buf.write(u"\3\2\2\2\u0f0b\u0f07\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c")
        buf.write(u"\u0f0d\3\2\2\2\u0f0d\u0f0e\7y\2\2\u0f0e\u0f0f\5\u01f2")
        buf.write(u"\u00fa\2\u0f0f\u031f\3\2\2\2\u0f10\u0f12\5\6\4\2\u0f11")
        buf.write(u"\u0f13\5\u0172\u00ba\2\u0f12\u0f11\3\2\2\2\u0f12\u0f13")
        buf.write(u"\3\2\2\2\u0f13\u0f14\3\2\2\2\u0f14\u0f16\7x\2\2\u0f15")
        buf.write(u"\u0f17\5\u01ae\u00d8\2\u0f16\u0f15\3\2\2\2\u0f16\u0f17")
        buf.write(u"\3\2\2\2\u0f17\u0f18\3\2\2\2\u0f18\u0f1a\7y\2\2\u0f19")
        buf.write(u"\u0f1b\5\u017c\u00bf\2\u0f1a\u0f19\3\2\2\2\u0f1a\u0f1b")
        buf.write(u"\3\2\2\2\u0f1b\u0f1c\3\2\2\2\u0f1c\u0f1d\7}\2\2\u0f1d")
        buf.write(u"\u0321\3\2\2\2\u0f1e\u0f1f\5\6\4\2\u0f1f\u0f20\7t\2\2")
        buf.write(u"\u0f20\u0f21\5\u0240\u0121\2\u0f21\u0f22\7u\2\2\u0f22")
        buf.write(u"\u0323\3\2\2\2\u0f23\u0f24\7(\2\2\u0f24\u0f25\5\f\7\2")
        buf.write(u"\u0f25\u0f26\5\6\4\2\u0f26\u0f27\7}\2\2\u0f27\u0325\3")
        buf.write(u"\2\2\2\u0f28\u0f29\7^\2\2\u0f29\u0f2a\7v\2\2\u0f2a\u0f2b")
        buf.write(u"\5\u01ae\u00d8\2\u0f2b\u0f2c\7w\2\2\u0f2c\u0f2d\7t\2")
        buf.write(u"\2\u0f2d\u0f2e\5\u0240\u0121\2\u0f2e\u0f2f\7u\2\2\u0f2f")
        buf.write(u"\u0327\3\2\2\2\u0f30\u0f31\7z\2\2\u0f31\u0f32\5\6\4\2")
        buf.write(u"\u0f32\u0f33\5\n\6\2\u0f33\u0329\3\2\2\2\u0f34\u0f36")
        buf.write(u"\7x\2\2\u0f35\u0f37\5.\30\2\u0f36\u0f35\3\2\2\2\u0f36")
        buf.write(u"\u0f37\3\2\2\2\u0f37\u0f38\3\2\2\2\u0f38\u0f39\7y\2\2")
        buf.write(u"\u0f39\u032b\3\2\2\2\u0f3a\u0f3c\7x\2\2\u0f3b\u0f3d\5")
        buf.write(u".\30\2\u0f3c\u0f3b\3\2\2\2\u0f3c\u0f3d\3\2\2\2\u0f3d")
        buf.write(u"\u0f3e\3\2\2\2\u0f3e\u0f40\7y\2\2\u0f3f\u0f41\5L\'\2")
        buf.write(u"\u0f40\u0f3f\3\2\2\2\u0f40\u0f41\3\2\2\2\u0f41\u032d")
        buf.write(u"\3\2\2\2\u0f42\u0f43\7\3\2\2\u0f43\u032f\3\2\2\2\u019d")
        buf.write(u"\u033a\u0342\u0347\u034d\u034f\u0356\u035a\u035f\u036b")
        buf.write(u"\u036d\u0374\u037a\u0380\u0389\u038f\u0397\u039d\u03a3")
        buf.write(u"\u03a7\u03ad\u03bc\u03ca\u03ce\u03da\u03e0\u03e9\u03ee")
        buf.write(u"\u03f3\u0405\u0408\u040d\u0413\u041b\u0431\u0440\u0446")
        buf.write(u"\u044a\u044d\u0451\u0458\u045c\u0463\u046c\u0471\u047a")
        buf.write(u"\u0482\u048d\u0490\u0495\u04a5\u04a9\u04b0\u04b8\u04c4")
        buf.write(u"\u04c8\u04cd\u04cf\u04d4\u04d8\u04dd\u04e5\u0504\u0558")
        buf.write(u"\u056c\u056e\u0576\u0578\u0581\u0583\u0593\u0595\u059f")
        buf.write(u"\u05a9\u05b2\u05b4\u05bc\u05c4\u05cc\u05d4\u05dc\u05e2")
        buf.write(u"\u05ea\u05f2\u0601\u0605\u060e\u0612\u061b\u061f\u0626")
        buf.write(u"\u062d\u0634\u063b\u063f\u0645\u064d\u0659\u0665\u0673")
        buf.write(u"\u067f\u0689\u068e\u0692\u0696\u06b3\u06b7\u06bc\u06c5")
        buf.write(u"\u06c9\u06d7\u06db\u06e2\u06f0\u06fc\u0702\u0707\u0714")
        buf.write(u"\u0718\u0721\u072b\u0733\u073d\u0746\u074c\u075f\u0763")
        buf.write(u"\u0767\u076e\u0779\u078a\u079e\u07a2\u07a8\u07af\u07b2")
        buf.write(u"\u07b6\u07b9\u07bf\u07c6\u07e5\u07f0\u07f3\u07f6\u07f9")
        buf.write(u"\u07fe\u0802\u080a\u0811\u0816\u0819\u081c\u0823\u082d")
        buf.write(u"\u0831\u0840\u0844\u0847\u084a\u0851\u0859\u085c\u085f")
        buf.write(u"\u0864\u0867\u086a\u086e\u0874\u0880\u0887\u088c\u0891")
        buf.write(u"\u089c\u08a4\u08ab\u08b7\u08bb\u08bd\u08c2\u08c9\u08d2")
        buf.write(u"\u08d9\u08dc\u08df\u08e8\u08eb\u08f0\u0901\u0912\u091e")
        buf.write(u"\u0925\u0931\u0939\u093d\u0943\u0946\u0949\u094e\u0952")
        buf.write(u"\u0956\u095b\u0969\u096d\u0973\u0979\u097b\u0982\u0986")
        buf.write(u"\u0989\u098e\u0991\u0999\u09a0\u09a3\u09ae\u09bc\u09bf")
        buf.write(u"\u09c2\u09c7\u09cc\u09ce\u09d1\u09d4\u09da\u09dd\u09e9")
        buf.write(u"\u09ed\u09f0\u09f3\u09ff\u0a05\u0a14\u0a17\u0a21\u0a24")
        buf.write(u"\u0a2a\u0a30\u0a33\u0a3e\u0a4c\u0a52\u0a5a\u0a64\u0a6b")
        buf.write(u"\u0a70\u0a97\u0aaf\u0ac1\u0ac5\u0ac8\u0acb\u0ad3\u0adb")
        buf.write(u"\u0ae0\u0ae4\u0aea\u0af1\u0af4\u0af8\u0afb\u0b07\u0b0d")
        buf.write(u"\u0b11\u0b14\u0b17\u0b1a\u0b1f\u0b22\u0b25\u0b29\u0b2f")
        buf.write(u"\u0b38\u0b3f\u0b47\u0b4b\u0b4e\u0b56\u0b5c\u0b62\u0b68")
        buf.write(u"\u0b6a\u0b70\u0b74\u0b7c\u0b84\u0b88\u0b8f\u0b93\u0b96")
        buf.write(u"\u0b99\u0b9e\u0ba1\u0ba4\u0ba8\u0bae\u0bb7\u0bbe\u0bc1")
        buf.write(u"\u0bc6\u0bc9\u0bce\u0bd8\u0bdf\u0be2\u0be5\u0bea\u0bee")
        buf.write(u"\u0bf2\u0c03\u0c08\u0c0c\u0c10\u0c19\u0c1c\u0c1f\u0c24")
        buf.write(u"\u0c28\u0c2c\u0c31\u0c34\u0c3d\u0c42\u0c47\u0c4c\u0c51")
        buf.write(u"\u0c53\u0c56\u0c59\u0c61\u0c64\u0c70\u0c73\u0c78\u0c7c")
        buf.write(u"\u0c86\u0c8a\u0c8f\u0c98\u0c9c\u0ca1\u0ca4\u0ca7\u0cad")
        buf.write(u"\u0cb1\u0cb5\u0cbd\u0cc6\u0ccd\u0cd3\u0cdc\u0ce3\u0ce7")
        buf.write(u"\u0ceb\u0cf4\u0cfb\u0d00\u0d06\u0d0f\u0d19\u0d39\u0d3c")
        buf.write(u"\u0d3f\u0d43\u0d4c\u0d63\u0d67\u0d71\u0d73\u0d7b\u0d7d")
        buf.write(u"\u0d84\u0d8c\u0da5\u0daf\u0db4\u0db7\u0dc1\u0dca\u0e17")
        buf.write(u"\u0e68\u0e6d\u0e70\u0e73\u0e77\u0e7c\u0e7f\u0e82\u0e86")
        buf.write(u"\u0e8b\u0e8e\u0e91\u0e95\u0e9a\u0e9e\u0ea4\u0ea8\u0eac")
        buf.write(u"\u0eba\u0eda\u0ede\u0ee4\u0ee8\u0eec\u0ef7\u0eff\u0f0b")
        buf.write(u"\u0f12\u0f16\u0f1a\u0f36\u0f3c\u0f40")
        return buf.getvalue()


class CSharp4Parser ( Parser ):

    grammarFileName = "CSharp4.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'type121of'", u"<INVALID>", u"'\\u00EF\\u00BB\\u00BF'", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'abstract'", u"'add'", 
                     u"'alias'", u"'__arglist'", u"'as'", u"'ascending'", 
                     u"'base'", u"'bool'", u"'break'", u"'by'", u"'byte'", 
                     u"'case'", u"'catch'", u"'char'", u"'checked'", u"'class'", 
                     u"'const'", u"'continue'", u"'decimal'", u"'default'", 
                     u"'delegate'", u"'descending'", u"'do'", u"'double'", 
                     u"'dynamic'", u"'else'", u"'enum'", u"'equals'", u"'event'", 
                     u"'explicit'", u"'extern'", u"'false'", u"'finally'", 
                     u"'fixed'", u"'float'", u"'for'", u"'foreach'", u"'from'", 
                     u"'get'", u"'goto'", u"'group'", u"'if'", u"'implicit'", 
                     u"'in'", u"'int'", u"'interface'", u"'internal'", u"'into'", 
                     u"'is'", u"'join'", u"'let'", u"'lock'", u"'long'", 
                     u"'namespace'", u"'new'", u"'null'", u"'object'", u"'on'", 
                     u"'operator'", u"'orderby'", u"'out'", u"'override'", 
                     u"'params'", u"'partial'", u"'private'", u"'protected'", 
                     u"'public'", u"'readonly'", u"'ref'", u"'remove'", 
                     u"'return'", u"'sbyte'", u"'sealed'", u"'select'", 
                     u"'set'", u"'short'", u"'sizeof'", u"'stackalloc'", 
                     u"'static'", u"'string'", u"'struct'", u"'switch'", 
                     u"'this'", u"'throw'", u"'true'", u"'try'", u"'uint'", 
                     u"'ulong'", u"'unchecked'", u"'unsafe'", u"'ushort'", 
                     u"'using'", u"'virtual'", u"'void'", u"'volatile'", 
                     u"'where'", u"'while'", u"'yield'", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'{'", u"'}'", u"'['", u"']'", u"'('", u"')'", u"'.'", 
                     u"','", u"':'", u"';'", u"'+'", u"'-'", u"'*'", u"'/'", 
                     u"'%'", u"'&'", u"'|'", u"'^'", u"'!'", u"'~'", u"'='", 
                     u"'<'", u"'>'", u"'?'", u"'::'", u"'??'", u"'++'", 
                     u"'--'", u"'&&'", u"'||'", u"'->'", u"'=='", u"'!='", 
                     u"'<='", u"'>='", u"'+='", u"'-='", u"'*='", u"'/='", 
                     u"'%='", u"'&='", u"'|='", u"'^='", u"'<<'", u"'<<='", 
                     u"'''", u"'\"'", u"'\\'", u"'\\\\'", u"'#'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"Pp_directive", u"BYTE_ORDER_MARK", 
                      u"SINGLE_LINE_DOC_COMMENT", u"DELIMITED_DOC_COMMENT", 
                      u"NEW_LINE", u"SINGLE_LINE_COMMENT", u"DELIMITED_COMMENT", 
                      u"WHITESPACE", u"ABSTRACT", u"ADD", u"ALIAS", u"ARGLIST", 
                      u"AS", u"ASCENDING", u"BASE", u"BOOL", u"BREAK", u"BY", 
                      u"BYTE", u"CASE", u"CATCH", u"CHAR", u"CHECKED", u"CLASS", 
                      u"CONST", u"CONTINUE", u"DECIMAL", u"DEFAULT", u"DELEGATE", 
                      u"DESCENDING", u"DO", u"DOUBLE", u"DYNAMIC", u"ELSE", 
                      u"ENUM", u"EQUALS", u"EVENT", u"EXPLICIT", u"EXTERN", 
                      u"FALSE", u"FINALLY", u"FIXED", u"FLOAT", u"FOR", 
                      u"FOREACH", u"FROM", u"GET", u"GOTO", u"GROUP", u"IF", 
                      u"IMPLICIT", u"IN", u"INT", u"INTERFACE", u"INTERNAL", 
                      u"INTO", u"IS", u"JOIN", u"LET", u"LOCK", u"LONG", 
                      u"NAMESPACE", u"NEW", u"NULL", u"OBJECT", u"ON", u"OPERATOR", 
                      u"ORDERBY", u"OUT", u"OVERRIDE", u"PARAMS", u"PARTIAL", 
                      u"PRIVATE", u"PROTECTED", u"PUBLIC", u"READONLY", 
                      u"REF", u"REMOVE", u"RETURN", u"SBYTE", u"SEALED", 
                      u"SELECT", u"SET", u"SHORT", u"SIZEOF", u"STACKALLOC", 
                      u"STATIC", u"STRING", u"STRUCT", u"SWITCH", u"THIS", 
                      u"THROW", u"TRUE", u"TRY", u"UINT", u"ULONG", u"UNCHECKED", 
                      u"UNSAFE", u"USHORT", u"USING", u"VIRTUAL", u"VOID", 
                      u"VOLATILE", u"WHERE", u"WHILE", u"YIELD", u"IDENTIFIER", 
                      u"INTEGER_LITERAL", u"LiteralAccess", u"REAL_LITERAL", 
                      u"CHARACTER_LITERAL", u"STRING_LITERAL", u"OPEN_BRACE", 
                      u"CLOSE_BRACE", u"OPEN_BRACKET", u"CLOSE_BRACKET", 
                      u"OPEN_PARENS", u"CLOSE_PARENS", u"DOT", u"COMMA", 
                      u"COLON", u"SEMICOLON", u"PLUS", u"MINUS", u"STAR", 
                      u"DIV", u"PERCENT", u"AMP", u"BITWISE_OR", u"CARET", 
                      u"BANG", u"TILDE", u"ASSIGNMENT", u"LT", u"GT", u"INTERR", 
                      u"DOUBLE_COLON", u"OP_COALESCING", u"OP_INC", u"OP_DEC", 
                      u"OP_AND", u"OP_OR", u"OP_PTR", u"OP_EQ", u"OP_NE", 
                      u"OP_LE", u"OP_GE", u"OP_ADD_ASSIGNMENT", u"OP_SUB_ASSIGNMENT", 
                      u"OP_MULT_ASSIGNMENT", u"OP_DIV_ASSIGNMENT", u"OP_MOD_ASSIGNMENT", 
                      u"OP_AND_ASSIGNMENT", u"OP_OR_ASSIGNMENT", u"OP_XOR_ASSIGNMENT", 
                      u"OP_LEFT_SHIFT", u"OP_LEFT_SHIFT_ASSIGNMENT", u"QUOTE", 
                      u"DOUBLE_QUOTE", u"BACK_SLASH", u"DOUBLE_BACK_SLASH", 
                      u"SHARP" ]

    RULE_namespace_name = 0
    RULE_type121_name = 1
    RULE_identifier = 2
    RULE_namespace_or_type121_name = 3
    RULE_type121_argument_list_opt = 4
    RULE_type121 = 5
    RULE_base_type121 = 6
    RULE_simple_type121 = 7
    RULE_numeric_type121 = 8
    RULE_integral_type121 = 9
    RULE_floating_point_type121 = 10
    RULE_nullable_type121 = 11
    RULE_non_nullable_value_type121 = 12
    RULE_reference_type121 = 13
    RULE_class_type121 = 14
    RULE_interface_type121 = 15
    RULE_delegate_type121 = 16
    RULE_type121_argument_list = 17
    RULE_type121_arguments = 18
    RULE_type121_argument = 19
    RULE_type121_void = 20
    RULE_variable_reference = 21
    RULE_argument_list = 22
    RULE_argument = 23
    RULE_argument_name = 24
    RULE_argument_value = 25
    RULE_primary_expression = 26
    RULE_primary_expression_start = 27
    RULE_bracket_expression = 28
    RULE_simple_name = 29
    RULE_parenthesized_expression = 30
    RULE_member_access = 31
    RULE_predefined_type121 = 32
    RULE_expression_list = 33
    RULE_this_access = 34
    RULE_base_access = 35
    RULE_object_creation_expression = 36
    RULE_object_or_collection_initializer = 37
    RULE_object_initializer = 38
    RULE_member_initializer_list = 39
    RULE_member_initializer = 40
    RULE_initializer_value = 41
    RULE_collection_initializer = 42
    RULE_element_initializer_list = 43
    RULE_element_initializer = 44
    RULE_array_creation_expression = 45
    RULE_delegate_creation_expression = 46
    RULE_anonymous_object_creation_expression = 47
    RULE_anonymous_object_initializer = 48
    RULE_member_declarator_list = 49
    RULE_member_declarator = 50
    RULE_type121of_expression = 51
    RULE_unbound_type121_name = 52
    RULE_generic_dimension_specifier = 53
    RULE_commas = 54
    RULE_checked_expression = 55
    RULE_unchecked_expression = 56
    RULE_default_value_expression = 57
    RULE_unary_expression = 58
    RULE_scan_for_cast_generic_precedence = 59
    RULE_cast_disambiguation_token = 60
    RULE_pre_increment_expression = 61
    RULE_pre_decrement_expression = 62
    RULE_cast_expression = 63
    RULE_multiplicative_expression = 64
    RULE_additive_expression = 65
    RULE_shift_expression = 66
    RULE_relational_expression = 67
    RULE_scan_for_shift_generic_precedence = 68
    RULE_shift_disambiguation_token = 69
    RULE_istype121 = 70
    RULE_is_disambiguation_token = 71
    RULE_equality_expression = 72
    RULE_and_expression = 73
    RULE_exclusive_or_expression = 74
    RULE_inclusive_or_expression = 75
    RULE_conditional_and_expression = 76
    RULE_conditional_or_expression = 77
    RULE_null_coalescing_expression = 78
    RULE_conditional_expression = 79
    RULE_lambda_expression = 80
    RULE_anonymous_method_expression = 81
    RULE_anonymous_function_signature = 82
    RULE_explicit_anonymous_function_signature = 83
    RULE_explicit_anonymous_function_parameter_list = 84
    RULE_explicit_anonymous_function_parameter = 85
    RULE_anonymous_function_parameter_modifier = 86
    RULE_implicit_anonymous_function_signature = 87
    RULE_implicit_anonymous_function_parameter_list = 88
    RULE_implicit_anonymous_function_parameter = 89
    RULE_anonymous_function_body = 90
    RULE_query_expression = 91
    RULE_from_clause = 92
    RULE_query_body = 93
    RULE_query_body_clauses = 94
    RULE_query_body_clause = 95
    RULE_let_clause = 96
    RULE_where_clause = 97
    RULE_join_clause = 98
    RULE_join_into_clause = 99
    RULE_combined_join_clause = 100
    RULE_orderby_clause = 101
    RULE_orderings = 102
    RULE_ordering = 103
    RULE_ordering_direction = 104
    RULE_select_or_group_clause = 105
    RULE_select_clause = 106
    RULE_group_clause = 107
    RULE_query_continuation = 108
    RULE_assignment = 109
    RULE_assignment_operator = 110
    RULE_expression = 111
    RULE_non_assignment_expression = 112
    RULE_constant_expression = 113
    RULE_boolean_expression = 114
    RULE_statement = 115
    RULE_embedded_statement = 116
    RULE_simple_embedded_statement = 117
    RULE_block = 118
    RULE_statement_list = 119
    RULE_empty_statement = 120
    RULE_labeled_statement = 121
    RULE_declaration_statement = 122
    RULE_local_variable_declaration = 123
    RULE_local_variable_type121 = 124
    RULE_local_variable_declarators = 125
    RULE_local_variable_declarator = 126
    RULE_local_variable_initializer = 127
    RULE_local_constant_declaration = 128
    RULE_expression_statement = 129
    RULE_statement_expression = 130
    RULE_selection_statement = 131
    RULE_if_body = 132
    RULE_if_statement = 133
    RULE_switch_statement = 134
    RULE_switch_block = 135
    RULE_switch_sections = 136
    RULE_switch_section = 137
    RULE_switch_labels = 138
    RULE_switch_label = 139
    RULE_iteration_statement = 140
    RULE_while_statement = 141
    RULE_do_statement = 142
    RULE_for_statement = 143
    RULE_for_initializer = 144
    RULE_for_condition = 145
    RULE_for_iterator = 146
    RULE_statement_expression_list = 147
    RULE_foreach_statement = 148
    RULE_jump_statement = 149
    RULE_break_statement = 150
    RULE_continue_statement = 151
    RULE_goto_statement = 152
    RULE_return_statement = 153
    RULE_throw_statement = 154
    RULE_try_statement = 155
    RULE_catch_clauses = 156
    RULE_specific_catch_clauses = 157
    RULE_specific_catch_clause = 158
    RULE_general_catch_clause = 159
    RULE_finally_clause = 160
    RULE_checked_statement = 161
    RULE_unchecked_statement = 162
    RULE_lock_statement = 163
    RULE_using_statement = 164
    RULE_resource_acquisition = 165
    RULE_yield_statement = 166
    RULE_compilation_unit = 167
    RULE_namespace_declaration = 168
    RULE_qualified_identifier = 169
    RULE_namespace_body = 170
    RULE_extern_alias_directives = 171
    RULE_extern_alias_directive = 172
    RULE_using_directives = 173
    RULE_using_directive = 174
    RULE_using_alias_directive = 175
    RULE_using_namespace_directive = 176
    RULE_namespace_member_declarations = 177
    RULE_namespace_member_declaration = 178
    RULE_type121_declaration = 179
    RULE_qualified_alias_member = 180
    RULE_class_declaration = 181
    RULE_class_modifiers = 182
    RULE_class_modifier = 183
    RULE_type121_parameter_list = 184
    RULE_type121_parameters = 185
    RULE_type121_parameter = 186
    RULE_class_base = 187
    RULE_interface_type121_list = 188
    RULE_type121_parameter_constraints_clauses = 189
    RULE_type121_parameter_constraints_clause = 190
    RULE_type121_parameter_constraints = 191
    RULE_primary_constraint = 192
    RULE_secondary_constraints = 193
    RULE_constructor_constraint = 194
    RULE_class_body = 195
    RULE_class_member_declarations = 196
    RULE_class_member_declaration = 197
    RULE_all_member_modifiers = 198
    RULE_all_member_modifier = 199
    RULE_common_member_declaration = 200
    RULE_type121d_member_declaration = 201
    RULE_constant_declarators = 202
    RULE_constant_declarator = 203
    RULE_variable_declarators = 204
    RULE_variable_declarator = 205
    RULE_variable_initializer = 206
    RULE_method_declaration = 207
    RULE_method_header = 208
    RULE_method_modifiers = 209
    RULE_method_modifier = 210
    RULE_return_type121 = 211
    RULE_member_name = 212
    RULE_method_body = 213
    RULE_formal_parameter_list = 214
    RULE_fixed_parameters = 215
    RULE_fixed_parameter = 216
    RULE_default_argument = 217
    RULE_parameter_modifier = 218
    RULE_parameter_array = 219
    RULE_property_declaration = 220
    RULE_property_modifiers = 221
    RULE_property_modifier = 222
    RULE_accessor_declarations = 223
    RULE_get_accessor_declaration = 224
    RULE_set_accessor_declaration = 225
    RULE_accessor_modifier = 226
    RULE_accessor_body = 227
    RULE_event_declaration = 228
    RULE_event_modifiers = 229
    RULE_event_modifier = 230
    RULE_event_accessor_declarations = 231
    RULE_add_accessor_declaration = 232
    RULE_remove_accessor_declaration = 233
    RULE_indexer_declaration = 234
    RULE_indexer_modifiers = 235
    RULE_indexer_modifier = 236
    RULE_indexer_declarator = 237
    RULE_operator_declaration = 238
    RULE_operator_modifiers = 239
    RULE_operator_modifier = 240
    RULE_operator_declarator = 241
    RULE_unary_operator_declarator = 242
    RULE_overloadable_unary_operator = 243
    RULE_binary_operator_declarator = 244
    RULE_overloadable_binary_operator = 245
    RULE_overloadable_operator = 246
    RULE_conversion_operator_declarator = 247
    RULE_operator_body = 248
    RULE_constructor_declaration = 249
    RULE_constructor_modifiers = 250
    RULE_constructor_modifier = 251
    RULE_constructor_declarator = 252
    RULE_constructor_initializer = 253
    RULE_constructor_body = 254
    RULE_static_constructor_declaration = 255
    RULE_static_constructor_modifiers = 256
    RULE_static_constructor_body = 257
    RULE_destructor_declaration = 258
    RULE_destructor_body = 259
    RULE_body = 260
    RULE_struct_declaration = 261
    RULE_struct_modifiers = 262
    RULE_struct_modifier = 263
    RULE_struct_interfaces = 264
    RULE_struct_body = 265
    RULE_struct_member_declarations = 266
    RULE_struct_member_declaration = 267
    RULE_array_type121 = 268
    RULE_non_array_type121 = 269
    RULE_rank_specifiers = 270
    RULE_rank_specifier = 271
    RULE_dim_separators = 272
    RULE_array_initializer = 273
    RULE_variable_initializer_list = 274
    RULE_interface_declaration = 275
    RULE_interface_modifiers = 276
    RULE_interface_modifier = 277
    RULE_variant_type121_parameter_list = 278
    RULE_variant_type121_parameters = 279
    RULE_variance_annotation = 280
    RULE_interface_base = 281
    RULE_interface_body = 282
    RULE_interface_member_declarations = 283
    RULE_interface_member_declaration = 284
    RULE_interface_method_declaration = 285
    RULE_interface_property_declaration = 286
    RULE_interface_accessors = 287
    RULE_interface_event_declaration = 288
    RULE_interface_indexer_declaration = 289
    RULE_enum_declaration = 290
    RULE_enum_base = 291
    RULE_enum_body = 292
    RULE_enum_modifiers = 293
    RULE_enum_modifier = 294
    RULE_enum_member_declarations = 295
    RULE_enum_member_declaration = 296
    RULE_delegate_declaration = 297
    RULE_delegate_modifiers = 298
    RULE_delegate_modifier = 299
    RULE_global_attributes = 300
    RULE_global_attribute_sections = 301
    RULE_global_attribute_section = 302
    RULE_global_attribute_target_specifier = 303
    RULE_global_attribute_target = 304
    RULE_attributes = 305
    RULE_attribute_sections = 306
    RULE_attribute_section = 307
    RULE_attribute_target_specifier = 308
    RULE_attribute_target = 309
    RULE_attribute_list = 310
    RULE_attribute = 311
    RULE_attribute_name = 312
    RULE_attribute_arguments = 313
    RULE_positional_argument_list = 314
    RULE_positional_argument = 315
    RULE_named_argument_list = 316
    RULE_named_argument = 317
    RULE_attribute_argument_expression = 318
    RULE_class_modifier_unsafe = 319
    RULE_struct_modifier_unsafe = 320
    RULE_interface_modifier_unsafe = 321
    RULE_delegate_modifier_unsafe = 322
    RULE_field_modifier_unsafe = 323
    RULE_method_modifier_unsafe = 324
    RULE_property_modifier_unsafe = 325
    RULE_event_modifier_unsafe = 326
    RULE_indexer_modifier_unsafe = 327
    RULE_operator_modifier_unsafe = 328
    RULE_constructor_modifier_unsafe = 329
    RULE_destructor_declaration_unsafe = 330
    RULE_static_constructor_modifiers_unsafe = 331
    RULE_embedded_statement_unsafe = 332
    RULE_unsafe_statement = 333
    RULE_type121_unsafe = 334
    RULE_pointer_type121 = 335
    RULE_unmanaged_type121 = 336
    RULE_primary_no_array_creation_expression_unsafe = 337
    RULE_unary_expression_unsafe = 338
    RULE_pointer_indirection_expression = 339
    RULE_addressof_expression = 340
    RULE_sizeof_expression = 341
    RULE_fixed_statement = 342
    RULE_fixed_pointer_declarators = 343
    RULE_fixed_pointer_declarator = 344
    RULE_fixed_pointer_initializer = 345
    RULE_struct_member_declaration_unsafe = 346
    RULE_fixed_size_buffer_declaration = 347
    RULE_fixed_size_buffer_modifiers = 348
    RULE_fixed_size_buffer_modifier = 349
    RULE_buffer_element_type121 = 350
    RULE_fixed_size_buffer_declarators = 351
    RULE_fixed_size_buffer_declarator = 352
    RULE_local_variable_initializer_unsafe = 353
    RULE_stackalloc_initializer = 354
    RULE_from_contextual_keyword = 355
    RULE_let_contextual_keyword = 356
    RULE_where_contextual_keyword = 357
    RULE_join_contextual_keyword = 358
    RULE_on_contextual_keyword = 359
    RULE_equals_contextual_keyword = 360
    RULE_into_contextual_keyword = 361
    RULE_orderby_contextual_keyword = 362
    RULE_ascending_contextual_keyword = 363
    RULE_descending_contextual_keyword = 364
    RULE_select_contextual_keyword = 365
    RULE_group_contextual_keyword = 366
    RULE_by_contextual_keyword = 367
    RULE_partial_contextual_keyword = 368
    RULE_alias_contextual_keyword = 369
    RULE_yield_contextual_keyword = 370
    RULE_get_contextual_keyword = 371
    RULE_set_contextual_keyword = 372
    RULE_add_contextual_keyword = 373
    RULE_remove_contextual_keyword = 374
    RULE_dynamic_contextual_keyword = 375
    RULE_arglist = 376
    RULE_right_arrow = 377
    RULE_right_shift = 378
    RULE_right_shift_assignment = 379
    RULE_literal = 380
    RULE_boolean_literal = 381
    RULE_keyword = 382
    RULE_class_definition = 383
    RULE_struct_definition = 384
    RULE_interface_definition = 385
    RULE_enum_definition = 386
    RULE_delegate_definition = 387
    RULE_event_declaration2 = 388
    RULE_field_declaration2 = 389
    RULE_property_declaration2 = 390
    RULE_constant_declaration2 = 391
    RULE_indexer_declaration2 = 392
    RULE_destructor_definition = 393
    RULE_constructor_declaration2 = 394
    RULE_method_declaration2 = 395
    RULE_method_member_name = 396
    RULE_method_member_name2 = 397
    RULE_operator_declaration2 = 398
    RULE_interface_method_declaration2 = 399
    RULE_interface_property_declaration2 = 400
    RULE_interface_event_declaration2 = 401
    RULE_interface_indexer_declaration2 = 402
    RULE_member_access2 = 403
    RULE_method_invocation2 = 404
    RULE_object_creation_expression2 = 405
    RULE_type121OF = 406

    ruleNames =  [ u"namespace_name", u"type121_name", u"identifier", u"namespace_or_type121_name", 
                   u"type121_argument_list_opt", u"type121", u"base_type121", 
                   u"simple_type121", u"numeric_type121", u"integral_type121", 
                   u"floating_point_type121", u"nullable_type121", u"non_nullable_value_type121", 
                   u"reference_type121", u"class_type121", u"interface_type121", 
                   u"delegate_type121", u"type121_argument_list", u"type121_arguments", 
                   u"type121_argument", u"type121_void", u"variable_reference", 
                   u"argument_list", u"argument", u"argument_name", u"argument_value", 
                   u"primary_expression", u"primary_expression_start", u"bracket_expression", 
                   u"simple_name", u"parenthesized_expression", u"member_access", 
                   u"predefined_type121", u"expression_list", u"this_access", 
                   u"base_access", u"object_creation_expression", u"object_or_collection_initializer", 
                   u"object_initializer", u"member_initializer_list", u"member_initializer", 
                   u"initializer_value", u"collection_initializer", u"element_initializer_list", 
                   u"element_initializer", u"array_creation_expression", 
                   u"delegate_creation_expression", u"anonymous_object_creation_expression", 
                   u"anonymous_object_initializer", u"member_declarator_list", 
                   u"member_declarator", u"type121of_expression", u"unbound_type121_name", 
                   u"generic_dimension_specifier", u"commas", u"checked_expression", 
                   u"unchecked_expression", u"default_value_expression", 
                   u"unary_expression", u"scan_for_cast_generic_precedence", 
                   u"cast_disambiguation_token", u"pre_increment_expression", 
                   u"pre_decrement_expression", u"cast_expression", u"multiplicative_expression", 
                   u"additive_expression", u"shift_expression", u"relational_expression", 
                   u"scan_for_shift_generic_precedence", u"shift_disambiguation_token", 
                   u"istype121", u"is_disambiguation_token", u"equality_expression", 
                   u"and_expression", u"exclusive_or_expression", u"inclusive_or_expression", 
                   u"conditional_and_expression", u"conditional_or_expression", 
                   u"null_coalescing_expression", u"conditional_expression", 
                   u"lambda_expression", u"anonymous_method_expression", 
                   u"anonymous_function_signature", u"explicit_anonymous_function_signature", 
                   u"explicit_anonymous_function_parameter_list", u"explicit_anonymous_function_parameter", 
                   u"anonymous_function_parameter_modifier", u"implicit_anonymous_function_signature", 
                   u"implicit_anonymous_function_parameter_list", u"implicit_anonymous_function_parameter", 
                   u"anonymous_function_body", u"query_expression", u"from_clause", 
                   u"query_body", u"query_body_clauses", u"query_body_clause", 
                   u"let_clause", u"where_clause", u"join_clause", u"join_into_clause", 
                   u"combined_join_clause", u"orderby_clause", u"orderings", 
                   u"ordering", u"ordering_direction", u"select_or_group_clause", 
                   u"select_clause", u"group_clause", u"query_continuation", 
                   u"assignment", u"assignment_operator", u"expression", 
                   u"non_assignment_expression", u"constant_expression", 
                   u"boolean_expression", u"statement", u"embedded_statement", 
                   u"simple_embedded_statement", u"block", u"statement_list", 
                   u"empty_statement", u"labeled_statement", u"declaration_statement", 
                   u"local_variable_declaration", u"local_variable_type121", 
                   u"local_variable_declarators", u"local_variable_declarator", 
                   u"local_variable_initializer", u"local_constant_declaration", 
                   u"expression_statement", u"statement_expression", u"selection_statement", 
                   u"if_body", u"if_statement", u"switch_statement", u"switch_block", 
                   u"switch_sections", u"switch_section", u"switch_labels", 
                   u"switch_label", u"iteration_statement", u"while_statement", 
                   u"do_statement", u"for_statement", u"for_initializer", 
                   u"for_condition", u"for_iterator", u"statement_expression_list", 
                   u"foreach_statement", u"jump_statement", u"break_statement", 
                   u"continue_statement", u"goto_statement", u"return_statement", 
                   u"throw_statement", u"try_statement", u"catch_clauses", 
                   u"specific_catch_clauses", u"specific_catch_clause", 
                   u"general_catch_clause", u"finally_clause", u"checked_statement", 
                   u"unchecked_statement", u"lock_statement", u"using_statement", 
                   u"resource_acquisition", u"yield_statement", u"compilation_unit", 
                   u"namespace_declaration", u"qualified_identifier", u"namespace_body", 
                   u"extern_alias_directives", u"extern_alias_directive", 
                   u"using_directives", u"using_directive", u"using_alias_directive", 
                   u"using_namespace_directive", u"namespace_member_declarations", 
                   u"namespace_member_declaration", u"type121_declaration", 
                   u"qualified_alias_member", u"class_declaration", u"class_modifiers", 
                   u"class_modifier", u"type121_parameter_list", u"type121_parameters", 
                   u"type121_parameter", u"class_base", u"interface_type121_list", 
                   u"type121_parameter_constraints_clauses", u"type121_parameter_constraints_clause", 
                   u"type121_parameter_constraints", u"primary_constraint", 
                   u"secondary_constraints", u"constructor_constraint", 
                   u"class_body", u"class_member_declarations", u"class_member_declaration", 
                   u"all_member_modifiers", u"all_member_modifier", u"common_member_declaration", 
                   u"type121d_member_declaration", u"constant_declarators", 
                   u"constant_declarator", u"variable_declarators", u"variable_declarator", 
                   u"variable_initializer", u"method_declaration", u"method_header", 
                   u"method_modifiers", u"method_modifier", u"return_type121", 
                   u"member_name", u"method_body", u"formal_parameter_list", 
                   u"fixed_parameters", u"fixed_parameter", u"default_argument", 
                   u"parameter_modifier", u"parameter_array", u"property_declaration", 
                   u"property_modifiers", u"property_modifier", u"accessor_declarations", 
                   u"get_accessor_declaration", u"set_accessor_declaration", 
                   u"accessor_modifier", u"accessor_body", u"event_declaration", 
                   u"event_modifiers", u"event_modifier", u"event_accessor_declarations", 
                   u"add_accessor_declaration", u"remove_accessor_declaration", 
                   u"indexer_declaration", u"indexer_modifiers", u"indexer_modifier", 
                   u"indexer_declarator", u"operator_declaration", u"operator_modifiers", 
                   u"operator_modifier", u"operator_declarator", u"unary_operator_declarator", 
                   u"overloadable_unary_operator", u"binary_operator_declarator", 
                   u"overloadable_binary_operator", u"overloadable_operator", 
                   u"conversion_operator_declarator", u"operator_body", 
                   u"constructor_declaration", u"constructor_modifiers", 
                   u"constructor_modifier", u"constructor_declarator", u"constructor_initializer", 
                   u"constructor_body", u"static_constructor_declaration", 
                   u"static_constructor_modifiers", u"static_constructor_body", 
                   u"destructor_declaration", u"destructor_body", u"body", 
                   u"struct_declaration", u"struct_modifiers", u"struct_modifier", 
                   u"struct_interfaces", u"struct_body", u"struct_member_declarations", 
                   u"struct_member_declaration", u"array_type121", u"non_array_type121", 
                   u"rank_specifiers", u"rank_specifier", u"dim_separators", 
                   u"array_initializer", u"variable_initializer_list", u"interface_declaration", 
                   u"interface_modifiers", u"interface_modifier", u"variant_type121_parameter_list", 
                   u"variant_type121_parameters", u"variance_annotation", 
                   u"interface_base", u"interface_body", u"interface_member_declarations", 
                   u"interface_member_declaration", u"interface_method_declaration", 
                   u"interface_property_declaration", u"interface_accessors", 
                   u"interface_event_declaration", u"interface_indexer_declaration", 
                   u"enum_declaration", u"enum_base", u"enum_body", u"enum_modifiers", 
                   u"enum_modifier", u"enum_member_declarations", u"enum_member_declaration", 
                   u"delegate_declaration", u"delegate_modifiers", u"delegate_modifier", 
                   u"global_attributes", u"global_attribute_sections", u"global_attribute_section", 
                   u"global_attribute_target_specifier", u"global_attribute_target", 
                   u"attributes", u"attribute_sections", u"attribute_section", 
                   u"attribute_target_specifier", u"attribute_target", u"attribute_list", 
                   u"attribute", u"attribute_name", u"attribute_arguments", 
                   u"positional_argument_list", u"positional_argument", 
                   u"named_argument_list", u"named_argument", u"attribute_argument_expression", 
                   u"class_modifier_unsafe", u"struct_modifier_unsafe", 
                   u"interface_modifier_unsafe", u"delegate_modifier_unsafe", 
                   u"field_modifier_unsafe", u"method_modifier_unsafe", 
                   u"property_modifier_unsafe", u"event_modifier_unsafe", 
                   u"indexer_modifier_unsafe", u"operator_modifier_unsafe", 
                   u"constructor_modifier_unsafe", u"destructor_declaration_unsafe", 
                   u"static_constructor_modifiers_unsafe", u"embedded_statement_unsafe", 
                   u"unsafe_statement", u"type121_unsafe", u"pointer_type121", 
                   u"unmanaged_type121", u"primary_no_array_creation_expression_unsafe", 
                   u"unary_expression_unsafe", u"pointer_indirection_expression", 
                   u"addressof_expression", u"sizeof_expression", u"fixed_statement", 
                   u"fixed_pointer_declarators", u"fixed_pointer_declarator", 
                   u"fixed_pointer_initializer", u"struct_member_declaration_unsafe", 
                   u"fixed_size_buffer_declaration", u"fixed_size_buffer_modifiers", 
                   u"fixed_size_buffer_modifier", u"buffer_element_type121", 
                   u"fixed_size_buffer_declarators", u"fixed_size_buffer_declarator", 
                   u"local_variable_initializer_unsafe", u"stackalloc_initializer", 
                   u"from_contextual_keyword", u"let_contextual_keyword", 
                   u"where_contextual_keyword", u"join_contextual_keyword", 
                   u"on_contextual_keyword", u"equals_contextual_keyword", 
                   u"into_contextual_keyword", u"orderby_contextual_keyword", 
                   u"ascending_contextual_keyword", u"descending_contextual_keyword", 
                   u"select_contextual_keyword", u"group_contextual_keyword", 
                   u"by_contextual_keyword", u"partial_contextual_keyword", 
                   u"alias_contextual_keyword", u"yield_contextual_keyword", 
                   u"get_contextual_keyword", u"set_contextual_keyword", 
                   u"add_contextual_keyword", u"remove_contextual_keyword", 
                   u"dynamic_contextual_keyword", u"arglist", u"right_arrow", 
                   u"right_shift", u"right_shift_assignment", u"literal", 
                   u"boolean_literal", u"keyword", u"class_definition", 
                   u"struct_definition", u"interface_definition", u"enum_definition", 
                   u"delegate_definition", u"event_declaration2", u"field_declaration2", 
                   u"property_declaration2", u"constant_declaration2", u"indexer_declaration2", 
                   u"destructor_definition", u"constructor_declaration2", 
                   u"method_declaration2", u"method_member_name", u"method_member_name2", 
                   u"operator_declaration2", u"interface_method_declaration2", 
                   u"interface_property_declaration2", u"interface_event_declaration2", 
                   u"interface_indexer_declaration2", u"member_access2", 
                   u"method_invocation2", u"object_creation_expression2", 
                   u"type121OF" ]

    EOF = Token.EOF
    T__0=1
    Pp_directive=2
    BYTE_ORDER_MARK=3
    SINGLE_LINE_DOC_COMMENT=4
    DELIMITED_DOC_COMMENT=5
    NEW_LINE=6
    SINGLE_LINE_COMMENT=7
    DELIMITED_COMMENT=8
    WHITESPACE=9
    ABSTRACT=10
    ADD=11
    ALIAS=12
    ARGLIST=13
    AS=14
    ASCENDING=15
    BASE=16
    BOOL=17
    BREAK=18
    BY=19
    BYTE=20
    CASE=21
    CATCH=22
    CHAR=23
    CHECKED=24
    CLASS=25
    CONST=26
    CONTINUE=27
    DECIMAL=28
    DEFAULT=29
    DELEGATE=30
    DESCENDING=31
    DO=32
    DOUBLE=33
    DYNAMIC=34
    ELSE=35
    ENUM=36
    EQUALS=37
    EVENT=38
    EXPLICIT=39
    EXTERN=40
    FALSE=41
    FINALLY=42
    FIXED=43
    FLOAT=44
    FOR=45
    FOREACH=46
    FROM=47
    GET=48
    GOTO=49
    GROUP=50
    IF=51
    IMPLICIT=52
    IN=53
    INT=54
    INTERFACE=55
    INTERNAL=56
    INTO=57
    IS=58
    JOIN=59
    LET=60
    LOCK=61
    LONG=62
    NAMESPACE=63
    NEW=64
    NULL=65
    OBJECT=66
    ON=67
    OPERATOR=68
    ORDERBY=69
    OUT=70
    OVERRIDE=71
    PARAMS=72
    PARTIAL=73
    PRIVATE=74
    PROTECTED=75
    PUBLIC=76
    READONLY=77
    REF=78
    REMOVE=79
    RETURN=80
    SBYTE=81
    SEALED=82
    SELECT=83
    SET=84
    SHORT=85
    SIZEOF=86
    STACKALLOC=87
    STATIC=88
    STRING=89
    STRUCT=90
    SWITCH=91
    THIS=92
    THROW=93
    TRUE=94
    TRY=95
    UINT=96
    ULONG=97
    UNCHECKED=98
    UNSAFE=99
    USHORT=100
    USING=101
    VIRTUAL=102
    VOID=103
    VOLATILE=104
    WHERE=105
    WHILE=106
    YIELD=107
    IDENTIFIER=108
    INTEGER_LITERAL=109
    LiteralAccess=110
    REAL_LITERAL=111
    CHARACTER_LITERAL=112
    STRING_LITERAL=113
    OPEN_BRACE=114
    CLOSE_BRACE=115
    OPEN_BRACKET=116
    CLOSE_BRACKET=117
    OPEN_PARENS=118
    CLOSE_PARENS=119
    DOT=120
    COMMA=121
    COLON=122
    SEMICOLON=123
    PLUS=124
    MINUS=125
    STAR=126
    DIV=127
    PERCENT=128
    AMP=129
    BITWISE_OR=130
    CARET=131
    BANG=132
    TILDE=133
    ASSIGNMENT=134
    LT=135
    GT=136
    INTERR=137
    DOUBLE_COLON=138
    OP_COALESCING=139
    OP_INC=140
    OP_DEC=141
    OP_AND=142
    OP_OR=143
    OP_PTR=144
    OP_EQ=145
    OP_NE=146
    OP_LE=147
    OP_GE=148
    OP_ADD_ASSIGNMENT=149
    OP_SUB_ASSIGNMENT=150
    OP_MULT_ASSIGNMENT=151
    OP_DIV_ASSIGNMENT=152
    OP_MOD_ASSIGNMENT=153
    OP_AND_ASSIGNMENT=154
    OP_OR_ASSIGNMENT=155
    OP_XOR_ASSIGNMENT=156
    OP_LEFT_SHIFT=157
    OP_LEFT_SHIFT_ASSIGNMENT=158
    QUOTE=159
    DOUBLE_QUOTE=160
    BACK_SLASH=161
    DOUBLE_BACK_SLASH=162
    SHARP=163

    def __init__(self, input):
        super(CSharp4Parser, self).__init__(input)
        self.checkVersion("4.5.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Namespace_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Namespace_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type121_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_or_type121_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_name

        def enterRule(self, listener):
            if hasattr(listener, "enterNamespace_name"):
                listener.enterNamespace_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamespace_name"):
                listener.exitNamespace_name(self)




    def namespace_name(self):

        localctx = CSharp4Parser.Namespace_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_namespace_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.namespace_or_type121_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type121_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_or_type121_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_name

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_name"):
                listener.enterType121_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_name"):
                listener.exitType121_name(self)




    def type121_name(self):

        localctx = CSharp4Parser.Type121_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_type121_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.namespace_or_type121_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.IdentifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharp4Parser.IDENTIFIER, 0)

        def FROM(self):
            return self.getToken(CSharp4Parser.FROM, 0)

        def LET(self):
            return self.getToken(CSharp4Parser.LET, 0)

        def WHERE(self):
            return self.getToken(CSharp4Parser.WHERE, 0)

        def JOIN(self):
            return self.getToken(CSharp4Parser.JOIN, 0)

        def ON(self):
            return self.getToken(CSharp4Parser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharp4Parser.EQUALS, 0)

        def INTO(self):
            return self.getToken(CSharp4Parser.INTO, 0)

        def ORDERBY(self):
            return self.getToken(CSharp4Parser.ORDERBY, 0)

        def ASCENDING(self):
            return self.getToken(CSharp4Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharp4Parser.DESCENDING, 0)

        def SELECT(self):
            return self.getToken(CSharp4Parser.SELECT, 0)

        def GROUP(self):
            return self.getToken(CSharp4Parser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharp4Parser.BY, 0)

        def PARTIAL(self):
            return self.getToken(CSharp4Parser.PARTIAL, 0)

        def ALIAS(self):
            return self.getToken(CSharp4Parser.ALIAS, 0)

        def YIELD(self):
            return self.getToken(CSharp4Parser.YIELD, 0)

        def GET(self):
            return self.getToken(CSharp4Parser.GET, 0)

        def SET(self):
            return self.getToken(CSharp4Parser.SET, 0)

        def ADD(self):
            return self.getToken(CSharp4Parser.ADD, 0)

        def REMOVE(self):
            return self.getToken(CSharp4Parser.REMOVE, 0)

        def DYNAMIC(self):
            return self.getToken(CSharp4Parser.DYNAMIC, 0)

        def ARGLIST(self):
            return self.getToken(CSharp4Parser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_identifier

        def enterRule(self, listener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharp4Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CSharp4Parser.ON - 67)) | (1 << (CSharp4Parser.ORDERBY - 67)) | (1 << (CSharp4Parser.PARTIAL - 67)) | (1 << (CSharp4Parser.REMOVE - 67)) | (1 << (CSharp4Parser.SELECT - 67)) | (1 << (CSharp4Parser.SET - 67)) | (1 << (CSharp4Parser.WHERE - 67)) | (1 << (CSharp4Parser.YIELD - 67)) | (1 << (CSharp4Parser.IDENTIFIER - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_or_type121_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Namespace_or_type121_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def type121_argument_list_opt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121_argument_list_optContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121_argument_list_optContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharp4Parser.Qualified_alias_memberContext,0)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DOT)
            else:
                return self.getToken(CSharp4Parser.DOT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_or_type121_name

        def enterRule(self, listener):
            if hasattr(listener, "enterNamespace_or_type121_name"):
                listener.enterNamespace_or_type121_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamespace_or_type121_name"):
                listener.exitNamespace_or_type121_name(self)




    def namespace_or_type121_name(self):

        localctx = CSharp4Parser.Namespace_or_type121_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_namespace_or_type121_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 820
                self.identifier()
                self.state = 821
                self.type121_argument_list_opt()
                pass

            elif la_ == 2:
                self.state = 823
                self.qualified_alias_member()
                pass


            self.state = 832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 826
                    self.match(CSharp4Parser.DOT)
                    self.state = 827
                    self.identifier()
                    self.state = 828
                    self.type121_argument_list_opt() 
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_argument_list_optContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_argument_list_optContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_argument_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_argument_list_opt

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_argument_list_opt"):
                listener.enterType121_argument_list_opt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_argument_list_opt"):
                listener.exitType121_argument_list_opt(self)




    def type121_argument_list_opt(self):

        localctx = CSharp4Parser.Type121_argument_list_optContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_type121_argument_list_opt)
        try:
            self.state = 837
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.type121_argument_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def base_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_type121Context,0)


        def INTERR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def rank_specifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def STAR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterType121"):
                listener.enterType121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121"):
                listener.exitType121(self)




    def type121(self):

        localctx = CSharp4Parser.Type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_type121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.base_type121()
            self.state = 845
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 843
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.INTERR]:
                        self.state = 840
                        self.match(CSharp4Parser.INTERR)

                    elif token in [CSharp4Parser.OPEN_BRACKET]:
                        self.state = 841
                        self.rank_specifier()

                    elif token in [CSharp4Parser.STAR]:
                        self.state = 842
                        self.match(CSharp4Parser.STAR)

                    else:
                        raise NoViableAltException(self)
             
                self.state = 847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Base_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def simple_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_type121Context,0)


        def class_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_type121Context,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_base_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterBase_type121"):
                listener.enterBase_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBase_type121"):
                listener.exitBase_type121(self)




    def base_type121(self):

        localctx = CSharp4Parser.Base_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_base_type121)
        try:
            self.state = 852
            token = self._input.LA(1)
            if token in [CSharp4Parser.BOOL, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.simple_type121()

            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 849
                self.class_type121()

            elif token in [CSharp4Parser.VOID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 850
                self.match(CSharp4Parser.VOID)
                self.state = 851
                self.match(CSharp4Parser.STAR)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Simple_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def numeric_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Numeric_type121Context,0)


        def BOOL(self):
            return self.getToken(CSharp4Parser.BOOL, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_simple_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_type121"):
                listener.enterSimple_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_type121"):
                listener.exitSimple_type121(self)




    def simple_type121(self):

        localctx = CSharp4Parser.Simple_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_simple_type121)
        try:
            self.state = 856
            token = self._input.LA(1)
            if token in [CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.numeric_type121()

            elif token in [CSharp4Parser.BOOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.match(CSharp4Parser.BOOL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Numeric_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def integral_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Integral_type121Context,0)


        def floating_point_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Floating_point_type121Context,0)


        def DECIMAL(self):
            return self.getToken(CSharp4Parser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_numeric_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterNumeric_type121"):
                listener.enterNumeric_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNumeric_type121"):
                listener.exitNumeric_type121(self)




    def numeric_type121(self):

        localctx = CSharp4Parser.Numeric_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_numeric_type121)
        try:
            self.state = 861
            token = self._input.LA(1)
            if token in [CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.integral_type121()

            elif token in [CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.floating_point_type121()

            elif token in [CSharp4Parser.DECIMAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 860
                self.match(CSharp4Parser.DECIMAL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Integral_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Integral_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharp4Parser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharp4Parser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharp4Parser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharp4Parser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharp4Parser.INT, 0)

        def UINT(self):
            return self.getToken(CSharp4Parser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharp4Parser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharp4Parser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharp4Parser.CHAR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_integral_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterIntegral_type121"):
                listener.enterIntegral_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIntegral_type121"):
                listener.exitIntegral_type121(self)




    def integral_type121(self):

        localctx = CSharp4Parser.Integral_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_integral_type121)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (CSharp4Parser.SBYTE - 81)) | (1 << (CSharp4Parser.SHORT - 81)) | (1 << (CSharp4Parser.UINT - 81)) | (1 << (CSharp4Parser.ULONG - 81)) | (1 << (CSharp4Parser.USHORT - 81)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Floating_point_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Floating_point_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharp4Parser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharp4Parser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_floating_point_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterFloating_point_type121"):
                listener.enterFloating_point_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFloating_point_type121"):
                listener.exitFloating_point_type121(self)




    def floating_point_type121(self):

        localctx = CSharp4Parser.Floating_point_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_floating_point_type121)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.DOUBLE or _la==CSharp4Parser.FLOAT):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nullable_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Nullable_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def non_nullable_value_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_nullable_value_type121Context,0)


        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_nullable_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterNullable_type121"):
                listener.enterNullable_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNullable_type121"):
                listener.exitNullable_type121(self)




    def nullable_type121(self):

        localctx = CSharp4Parser.Nullable_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_nullable_type121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.non_nullable_value_type121()
            self.state = 868
            self.match(CSharp4Parser.INTERR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_nullable_value_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Non_nullable_value_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def base_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_type121Context,0)


        def rank_specifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def STAR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_non_nullable_value_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterNon_nullable_value_type121"):
                listener.enterNon_nullable_value_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNon_nullable_value_type121"):
                listener.exitNon_nullable_value_type121(self)




    def non_nullable_value_type121(self):

        localctx = CSharp4Parser.Non_nullable_value_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_non_nullable_value_type121)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.base_type121()
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OPEN_BRACKET or _la==CSharp4Parser.STAR:
                self.state = 873
                token = self._input.LA(1)
                if token in [CSharp4Parser.OPEN_BRACKET]:
                    self.state = 871
                    self.rank_specifier()

                elif token in [CSharp4Parser.STAR]:
                    self.state = 872
                    self.match(CSharp4Parser.STAR)

                else:
                    raise NoViableAltException(self)

                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Reference_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def simple_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_type121Context,0)


        def rank_specifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def STAR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def INTERR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def class_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_type121Context,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_reference_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterReference_type121"):
                listener.enterReference_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReference_type121"):
                listener.exitReference_type121(self)




    def reference_type121(self):

        localctx = CSharp4Parser.Reference_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_reference_type121)
        self._la = 0 # Token type
        try:
            self.state = 933
            token = self._input.LA(1)
            if token in [CSharp4Parser.BOOL, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.simple_type121()
                self.state = 888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 882
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                            self.state = 879
                            _la = self._input.LA(1)
                            if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                                self._errHandler.recoverInline(self)
                            else:
                                self.consume()
                            self.state = 884
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 885
                        self.rank_specifier() 
                    self.state = 890
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                    self.state = 891
                    _la = self._input.LA(1)
                    if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 897
                self.rank_specifier()

            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.class_type121()
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (CSharp4Parser.OPEN_BRACKET - 116)) | (1 << (CSharp4Parser.STAR - 116)) | (1 << (CSharp4Parser.INTERR - 116)))) != 0):
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                        self.state = 900
                        _la = self._input.LA(1)
                        if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 905
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 906
                    self.rank_specifier()
                    self.state = 911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif token in [CSharp4Parser.VOID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.match(CSharp4Parser.VOID)
                self.state = 913
                self.match(CSharp4Parser.STAR)
                self.state = 923
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 917
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                            self.state = 914
                            _la = self._input.LA(1)
                            if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                                self._errHandler.recoverInline(self)
                            else:
                                self.consume()
                            self.state = 919
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 920
                        self.rank_specifier() 
                    self.state = 925
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                    self.state = 926
                    _la = self._input.LA(1)
                    if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 932
                self.rank_specifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharp4Parser.OBJECT, 0)

        def dynamic_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Dynamic_contextual_keywordContext,0)


        def STRING(self):
            return self.getToken(CSharp4Parser.STRING, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_type121"):
                listener.enterClass_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_type121"):
                listener.exitClass_type121(self)




    def class_type121(self):

        localctx = CSharp4Parser.Class_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_class_type121)
        try:
            self.state = 939
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.type121_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.match(CSharp4Parser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 937
                self.dynamic_contextual_keyword()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 938
                self.match(CSharp4Parser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_type121"):
                listener.enterInterface_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_type121"):
                listener.exitInterface_type121(self)




    def interface_type121(self):

        localctx = CSharp4Parser.Interface_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interface_type121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.type121_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Delegate_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterDelegate_type121"):
                listener.enterDelegate_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelegate_type121"):
                listener.exitDelegate_type121(self)




    def delegate_type121(self):

        localctx = CSharp4Parser.Delegate_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delegate_type121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.type121_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_argument_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def type121_arguments(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_argumentsContext,0)


        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_argument_list

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_argument_list"):
                listener.enterType121_argument_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_argument_list"):
                listener.exitType121_argument_list(self)




    def type121_argument_list(self):

        localctx = CSharp4Parser.Type121_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_type121_argument_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(CSharp4Parser.LT)
            self.state = 946
            self.type121_arguments()
            self.state = 947
            self.match(CSharp4Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_argumentsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121_argumentContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121_argumentContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_arguments

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_arguments"):
                listener.enterType121_arguments(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_arguments"):
                listener.exitType121_arguments(self)




    def type121_arguments(self):

        localctx = CSharp4Parser.Type121_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_type121_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.type121_argument()
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 950
                self.match(CSharp4Parser.COMMA)
                self.state = 951
                self.type121_argument()
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_argument"):
                listener.enterType121_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_argument"):
                listener.exitType121_argument(self)




    def type121_argument(self):

        localctx = CSharp4Parser.Type121_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_type121_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.type121()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_voidContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_voidContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_void

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_void"):
                listener.enterType121_void(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_void"):
                listener.exitType121_void(self)




    def type121_void(self):

        localctx = CSharp4Parser.Type121_voidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_type121_void)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(CSharp4Parser.VOID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Variable_referenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_reference

        def enterRule(self, listener):
            if hasattr(listener, "enterVariable_reference"):
                listener.enterVariable_reference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariable_reference"):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = CSharp4Parser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Argument_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ArgumentContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_argument_list

        def enterRule(self, listener):
            if hasattr(listener, "enterArgument_list"):
                listener.enterArgument_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArgument_list"):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharp4Parser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.argument()
            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 964
                self.match(CSharp4Parser.COMMA)
                self.state = 965
                self.argument()
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.ArgumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def argument_value(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_valueContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterArgument"):
                listener.enterArgument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArgument"):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharp4Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 971
                self.argument_name()


            self.state = 974
            self.argument_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Argument_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_argument_name

        def enterRule(self, listener):
            if hasattr(listener, "enterArgument_name"):
                listener.enterArgument_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArgument_name"):
                listener.exitArgument_name(self)




    def argument_name(self):

        localctx = CSharp4Parser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.identifier()
            self.state = 977
            self.match(CSharp4Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Argument_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_referenceContext,0)


        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_argument_value

        def enterRule(self, listener):
            if hasattr(listener, "enterArgument_value"):
                listener.enterArgument_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArgument_value"):
                listener.exitArgument_value(self)




    def argument_value(self):

        localctx = CSharp4Parser.Argument_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_argument_value)
        try:
            self.state = 984
            token = self._input.LA(1)
            if token in [CSharp4Parser.T__0, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.expression()

            elif token in [CSharp4Parser.REF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.match(CSharp4Parser.REF)
                self.state = 981
                self.variable_reference()

            elif token in [CSharp4Parser.OUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 982
                self.match(CSharp4Parser.OUT)
                self.state = 983
                self.variable_reference()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Primary_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expression_startContext,0)


        def bracket_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Bracket_expressionContext,i)


        def member_access2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Member_access2Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Member_access2Context,i)


        def method_invocation2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Method_invocation2Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Method_invocation2Context,i)


        def OP_INC(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_INC)
            else:
                return self.getToken(CSharp4Parser.OP_INC, i)

        def OP_DEC(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_DEC)
            else:
                return self.getToken(CSharp4Parser.OP_DEC, i)

        def OP_PTR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_PTR)
            else:
                return self.getToken(CSharp4Parser.OP_PTR, i)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_primary_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterPrimary_expression"):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrimary_expression"):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharp4Parser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_primary_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            localctx.pe = self.primary_expression_start()
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 987
                self.bracket_expression()
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (CSharp4Parser.OPEN_PARENS - 118)) | (1 << (CSharp4Parser.DOT - 118)) | (1 << (CSharp4Parser.OP_INC - 118)) | (1 << (CSharp4Parser.OP_DEC - 118)) | (1 << (CSharp4Parser.OP_PTR - 118)))) != 0):
                self.state = 999
                token = self._input.LA(1)
                if token in [CSharp4Parser.DOT]:
                    self.state = 993
                    self.member_access2()

                elif token in [CSharp4Parser.OPEN_PARENS]:
                    self.state = 994
                    self.method_invocation2()

                elif token in [CSharp4Parser.OP_INC]:
                    self.state = 995
                    self.match(CSharp4Parser.OP_INC)

                elif token in [CSharp4Parser.OP_DEC]:
                    self.state = 996
                    self.match(CSharp4Parser.OP_DEC)

                elif token in [CSharp4Parser.OP_PTR]:
                    self.state = 997
                    self.match(CSharp4Parser.OP_PTR)
                    self.state = 998
                    self.identifier()

                else:
                    raise NoViableAltException(self)

                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 1001
                    self.bracket_expression()
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_expression_startContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Primary_expression_startContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CSharp4Parser.LiteralContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_nameContext,0)


        def parenthesized_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Parenthesized_expressionContext,0)


        def predefined_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Predefined_type121Context,0)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharp4Parser.Qualified_alias_memberContext,0)


        def this_access(self):
            return self.getTypedRuleContext(CSharp4Parser.This_accessContext,0)


        def base_access(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_accessContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_object_initializerContext,0)


        def rank_specifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_initializerContext,0)


        def object_creation_expression2(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_creation_expression2Context,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_or_collection_initializerContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def rank_specifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Rank_specifiersContext,0)


        def type121of_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121of_expressionContext,0)


        def checked_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Checked_expressionContext,0)


        def unchecked_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unchecked_expressionContext,0)


        def default_value_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Default_value_expressionContext,0)


        def anonymous_method_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_method_expressionContext,0)


        def sizeof_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Sizeof_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_primary_expression_start

        def enterRule(self, listener):
            if hasattr(listener, "enterPrimary_expression_start"):
                listener.enterPrimary_expression_start(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrimary_expression_start"):
                listener.exitPrimary_expression_start(self)




    def primary_expression_start(self):

        localctx = CSharp4Parser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 1049
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1012
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self.simple_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1014
                self.parenthesized_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1015
                self.predefined_type121()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1016
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1017
                self.this_access()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1018
                self.base_access()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1019
                self.match(CSharp4Parser.NEW)
                self.state = 1041
                token = self._input.LA(1)
                if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STRING, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT, CSharp4Parser.VOID, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                    self.state = 1020
                    self.type121()
                    self.state = 1035
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                    if la_ == 1:
                        self.state = 1021
                        self.object_creation_expression2()
                        pass

                    elif la_ == 2:
                        self.state = 1022
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 1023
                        self.match(CSharp4Parser.OPEN_BRACKET)
                        self.state = 1024
                        self.expression_list()
                        self.state = 1025
                        self.match(CSharp4Parser.CLOSE_BRACKET)
                        self.state = 1027
                        self._errHandler.sync(self);
                        la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                        if la_ == 1:
                            self.state = 1026
                            self.rank_specifiers()


                        self.state = 1030
                        _la = self._input.LA(1)
                        if _la==CSharp4Parser.OPEN_BRACE:
                            self.state = 1029
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 1032
                        self.rank_specifiers()
                        self.state = 1033
                        self.array_initializer()
                        pass



                elif token in [CSharp4Parser.OPEN_BRACE]:
                    self.state = 1037
                    self.anonymous_object_initializer()

                elif token in [CSharp4Parser.OPEN_BRACKET]:
                    self.state = 1038
                    self.rank_specifier()
                    self.state = 1039
                    self.array_initializer()

                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1043
                self.type121of_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1044
                self.checked_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1045
                self.unchecked_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1046
                self.default_value_expression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1047
                self.anonymous_method_expression()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1048
                self.sizeof_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bracket_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Bracket_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_bracket_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterBracket_expression"):
                listener.enterBracket_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBracket_expression"):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharp4Parser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_bracket_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 1052
            self.expression_list()
            self.state = 1053
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Simple_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def type121_argument_list_opt(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_argument_list_optContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_simple_name

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_name"):
                listener.enterSimple_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_name"):
                listener.exitSimple_name(self)




    def simple_name(self):

        localctx = CSharp4Parser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.identifier()
            self.state = 1056
            self.type121_argument_list_opt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parenthesized_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Parenthesized_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_parenthesized_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterParenthesized_expression"):
                listener.enterParenthesized_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParenthesized_expression"):
                listener.exitParenthesized_expression(self)




    def parenthesized_expression(self):

        localctx = CSharp4Parser.Parenthesized_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_parenthesized_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1059
            self.expression()
            self.state = 1060
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_accessContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Member_accessContext, self).__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_access

        def enterRule(self, listener):
            if hasattr(listener, "enterMember_access"):
                listener.enterMember_access(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMember_access"):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharp4Parser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_member_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.primary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predefined_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Predefined_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharp4Parser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharp4Parser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharp4Parser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharp4Parser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharp4Parser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharp4Parser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharp4Parser.INT, 0)

        def LONG(self):
            return self.getToken(CSharp4Parser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharp4Parser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharp4Parser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharp4Parser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharp4Parser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharp4Parser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharp4Parser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharp4Parser.USHORT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_predefined_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterPredefined_type121"):
                listener.enterPredefined_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPredefined_type121"):
                listener.exitPredefined_type121(self)




    def predefined_type121(self):

        localctx = CSharp4Parser.Predefined_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_predefined_type121)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Expression_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_expression_list

        def enterRule(self, listener):
            if hasattr(listener, "enterExpression_list"):
                listener.enterExpression_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpression_list"):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharp4Parser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.expression()
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1067
                self.match(CSharp4Parser.COMMA)
                self.state = 1068
                self.expression()
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class This_accessContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.This_accessContext, self).__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_this_access

        def enterRule(self, listener):
            if hasattr(listener, "enterThis_access"):
                listener.enterThis_access(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitThis_access"):
                listener.exitThis_access(self)




    def this_access(self):

        localctx = CSharp4Parser.This_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_this_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(CSharp4Parser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_accessContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Base_accessContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BASE(self):
            return self.getToken(CSharp4Parser.BASE, 0)

        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def type121_argument_list_opt(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_argument_list_optContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_base_access

        def enterRule(self, listener):
            if hasattr(listener, "enterBase_access"):
                listener.enterBase_access(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBase_access"):
                listener.exitBase_access(self)




    def base_access(self):

        localctx = CSharp4Parser.Base_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_base_access)
        try:
            self.state = 1086
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.match(CSharp4Parser.BASE)
                self.state = 1077
                self.match(CSharp4Parser.DOT)
                self.state = 1078
                self.identifier()
                self.state = 1079
                self.type121_argument_list_opt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self.match(CSharp4Parser.BASE)
                self.state = 1082
                self.match(CSharp4Parser.OPEN_BRACKET)
                self.state = 1083
                self.expression_list()
                self.state = 1084
                self.match(CSharp4Parser.CLOSE_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_creation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Object_creation_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_or_collection_initializerContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_object_creation_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterObject_creation_expression"):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitObject_creation_expression"):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharp4Parser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(CSharp4Parser.NEW)
            self.state = 1089
            self.type121()
            self.state = 1099
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_PARENS]:
                self.state = 1090
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1092
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                    self.state = 1091
                    self.argument_list()


                self.state = 1094
                self.match(CSharp4Parser.CLOSE_PARENS)
                self.state = 1096
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACE:
                    self.state = 1095
                    self.object_or_collection_initializer()



            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.state = 1098
                self.object_or_collection_initializer()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_or_collection_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Object_or_collection_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_object_or_collection_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterObject_or_collection_initializer"):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitObject_or_collection_initializer"):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharp4Parser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_object_or_collection_initializer)
        try:
            self.state = 1103
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1102
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Object_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_object_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterObject_initializer"):
                listener.enterObject_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitObject_initializer"):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharp4Parser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1114
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1106
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1108
                self.member_initializer_list()
                self.state = 1110
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 1109
                    self.match(CSharp4Parser.COMMA)


                self.state = 1112
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_initializer_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Member_initializer_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Member_initializerContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_initializer_list

        def enterRule(self, listener):
            if hasattr(listener, "enterMember_initializer_list"):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMember_initializer_list"):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharp4Parser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.member_initializer()
            self.state = 1121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1117
                    self.match(CSharp4Parser.COMMA)
                    self.state = 1118
                    self.member_initializer() 
                self.state = 1123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Member_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharp4Parser.Initializer_valueContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterMember_initializer"):
                listener.enterMember_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMember_initializer"):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharp4Parser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.identifier()
            self.state = 1125
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 1126
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Initializer_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Initializer_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_initializer_value

        def enterRule(self, listener):
            if hasattr(listener, "enterInitializer_value"):
                listener.enterInitializer_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInitializer_value"):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharp4Parser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_initializer_value)
        try:
            self.state = 1130
            token = self._input.LA(1)
            if token in [CSharp4Parser.T__0, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.expression()

            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.object_or_collection_initializer()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Collection_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def element_initializer_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Element_initializer_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_collection_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterCollection_initializer"):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollection_initializer"):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharp4Parser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 1133
            self.element_initializer_list()
            self.state = 1135
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 1134
                self.match(CSharp4Parser.COMMA)


            self.state = 1137
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_initializer_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Element_initializer_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def element_initializer(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Element_initializerContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_element_initializer_list

        def enterRule(self, listener):
            if hasattr(listener, "enterElement_initializer_list"):
                listener.enterElement_initializer_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElement_initializer_list"):
                listener.exitElement_initializer_list(self)




    def element_initializer_list(self):

        localctx = CSharp4Parser.Element_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_element_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.element_initializer()
            self.state = 1144
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1140
                    self.match(CSharp4Parser.COMMA)
                    self.state = 1141
                    self.element_initializer() 
                self.state = 1146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Element_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_element_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterElement_initializer"):
                listener.enterElement_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElement_initializer"):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharp4Parser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_element_initializer)
        try:
            self.state = 1152
            token = self._input.LA(1)
            if token in [CSharp4Parser.T__0, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.non_assignment_expression()

            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1148
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1149
                self.expression_list()
                self.state = 1150
                self.match(CSharp4Parser.CLOSE_BRACE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_creation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Array_creation_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def array_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_type121Context,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_initializerContext,0)


        def non_array_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_array_type121Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def rank_specifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,0)


        def rank_specifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Rank_specifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_array_creation_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterArray_creation_expression"):
                listener.enterArray_creation_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArray_creation_expression"):
                listener.exitArray_creation_expression(self)




    def array_creation_expression(self):

        localctx = CSharp4Parser.Array_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_array_creation_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(CSharp4Parser.NEW)
            self.state = 1171
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 1155
                self.array_type121()
                self.state = 1156
                self.array_initializer()
                pass

            elif la_ == 2:
                self.state = 1158
                self.non_array_type121()
                self.state = 1159
                self.match(CSharp4Parser.OPEN_BRACKET)
                self.state = 1160
                self.expression_list()
                self.state = 1161
                self.match(CSharp4Parser.CLOSE_BRACKET)
                self.state = 1163
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 1162
                    self.rank_specifiers()


                self.state = 1166
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACE:
                    self.state = 1165
                    self.array_initializer()


                pass

            elif la_ == 3:
                self.state = 1168
                self.rank_specifier()
                self.state = 1169
                self.array_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_creation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Delegate_creation_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def delegate_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_type121Context,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_creation_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterDelegate_creation_expression"):
                listener.enterDelegate_creation_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelegate_creation_expression"):
                listener.exitDelegate_creation_expression(self)




    def delegate_creation_expression(self):

        localctx = CSharp4Parser.Delegate_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_delegate_creation_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.match(CSharp4Parser.NEW)
            self.state = 1174
            self.delegate_type121()
            self.state = 1175
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1176
            self.expression()
            self.state = 1177
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_object_creation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Anonymous_object_creation_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_object_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_object_creation_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterAnonymous_object_creation_expression"):
                listener.enterAnonymous_object_creation_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnonymous_object_creation_expression"):
                listener.exitAnonymous_object_creation_expression(self)




    def anonymous_object_creation_expression(self):

        localctx = CSharp4Parser.Anonymous_object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_anonymous_object_creation_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(CSharp4Parser.NEW)
            self.state = 1180
            self.anonymous_object_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_object_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Anonymous_object_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_object_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterAnonymous_object_initializer"):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnonymous_object_initializer"):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharp4Parser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1191
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1183
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1185
                self.member_declarator_list()
                self.state = 1187
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 1186
                    self.match(CSharp4Parser.COMMA)


                self.state = 1189
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_declarator_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Member_declarator_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Member_declaratorContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_declarator_list

        def enterRule(self, listener):
            if hasattr(listener, "enterMember_declarator_list"):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMember_declarator_list"):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharp4Parser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.member_declarator()
            self.state = 1198
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1194
                    self.match(CSharp4Parser.COMMA)
                    self.state = 1195
                    self.member_declarator() 
                self.state = 1200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Member_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterMember_declarator"):
                listener.enterMember_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMember_declarator"):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharp4Parser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_member_declarator)
        try:
            self.state = 1206
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.identifier()
                self.state = 1203
                self.match(CSharp4Parser.ASSIGNMENT)
                self.state = 1204
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121of_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121of_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121OF(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121OFContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def unbound_type121_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Unbound_type121_nameContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121of_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterType121of_expression"):
                listener.enterType121of_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121of_expression"):
                listener.exitType121of_expression(self)




    def type121of_expression(self):

        localctx = CSharp4Parser.Type121of_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_type121of_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.type121OF()
            self.state = 1209
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1218
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 1210
                self.unbound_type121_name()
                self.state = 1211
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.state = 1213
                self.type121()
                self.state = 1214
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.state = 1216
                self.match(CSharp4Parser.VOID)
                self.state = 1217
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unbound_type121_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Unbound_type121_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharp4Parser.DOUBLE_COLON, 0)

        def DOT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DOT)
            else:
                return self.getToken(CSharp4Parser.DOT, i)

        def generic_dimension_specifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unbound_type121_name

        def enterRule(self, listener):
            if hasattr(listener, "enterUnbound_type121_name"):
                listener.enterUnbound_type121_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnbound_type121_name"):
                listener.exitUnbound_type121_name(self)




    def unbound_type121_name(self):

        localctx = CSharp4Parser.Unbound_type121_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_unbound_type121_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.identifier()
            self.state = 1229
            token = self._input.LA(1)
            if token in [CSharp4Parser.CLOSE_PARENS, CSharp4Parser.DOT, CSharp4Parser.LT]:
                self.state = 1222
                _la = self._input.LA(1)
                if _la==CSharp4Parser.LT:
                    self.state = 1221
                    self.generic_dimension_specifier()



            elif token in [CSharp4Parser.DOUBLE_COLON]:
                self.state = 1224
                self.match(CSharp4Parser.DOUBLE_COLON)
                self.state = 1225
                self.identifier()
                self.state = 1227
                _la = self._input.LA(1)
                if _la==CSharp4Parser.LT:
                    self.state = 1226
                    self.generic_dimension_specifier()



            else:
                raise NoViableAltException(self)

            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.DOT:
                self.state = 1231
                self.match(CSharp4Parser.DOT)
                self.state = 1232
                self.identifier()
                self.state = 1234
                _la = self._input.LA(1)
                if _la==CSharp4Parser.LT:
                    self.state = 1233
                    self.generic_dimension_specifier()


                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_dimension_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Generic_dimension_specifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def commas(self):
            return self.getTypedRuleContext(CSharp4Parser.CommasContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_generic_dimension_specifier

        def enterRule(self, listener):
            if hasattr(listener, "enterGeneric_dimension_specifier"):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGeneric_dimension_specifier"):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharp4Parser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(CSharp4Parser.LT)
            self.state = 1243
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 1242
                self.commas()


            self.state = 1245
            self.match(CSharp4Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.CommasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_commas

        def enterRule(self, listener):
            if hasattr(listener, "enterCommas"):
                listener.enterCommas(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommas"):
                listener.exitCommas(self)




    def commas(self):

        localctx = CSharp4Parser.CommasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_commas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.match(CSharp4Parser.COMMA)
            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1248
                self.match(CSharp4Parser.COMMA)
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Checked_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Checked_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharp4Parser.CHECKED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_checked_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterChecked_expression"):
                listener.enterChecked_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChecked_expression"):
                listener.exitChecked_expression(self)




    def checked_expression(self):

        localctx = CSharp4Parser.Checked_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_checked_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(CSharp4Parser.CHECKED)
            self.state = 1255
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1256
            self.expression()
            self.state = 1257
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unchecked_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Unchecked_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharp4Parser.UNCHECKED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_unchecked_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterUnchecked_expression"):
                listener.enterUnchecked_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnchecked_expression"):
                listener.exitUnchecked_expression(self)




    def unchecked_expression(self):

        localctx = CSharp4Parser.Unchecked_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_unchecked_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(CSharp4Parser.UNCHECKED)
            self.state = 1260
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1261
            self.expression()
            self.state = 1262
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_value_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Default_value_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_default_value_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterDefault_value_expression"):
                listener.enterDefault_value_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefault_value_expression"):
                listener.exitDefault_value_expression(self)




    def default_value_expression(self):

        localctx = CSharp4Parser.Default_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_default_value_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(CSharp4Parser.DEFAULT)
            self.state = 1265
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1266
            self.type121()
            self.state = 1267
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Unary_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharp4Parser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharp4Parser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharp4Parser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def pre_increment_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Pre_increment_expressionContext,0)


        def pre_decrement_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Pre_decrement_expressionContext,0)


        def unary_expression_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expression_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unary_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterUnary_expression"):
                listener.enterUnary_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnary_expression"):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharp4Parser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_unary_expression)
        try:
            self.state = 1282
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1270
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1271
                self.match(CSharp4Parser.PLUS)
                self.state = 1272
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1273
                self.match(CSharp4Parser.MINUS)
                self.state = 1274
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1275
                self.match(CSharp4Parser.BANG)
                self.state = 1276
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1277
                self.match(CSharp4Parser.TILDE)
                self.state = 1278
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1279
                self.pre_increment_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1280
                self.pre_decrement_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1281
                self.unary_expression_unsafe()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scan_for_cast_generic_precedenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Scan_for_cast_generic_precedenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def cast_disambiguation_token(self):
            return self.getTypedRuleContext(CSharp4Parser.Cast_disambiguation_tokenContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_scan_for_cast_generic_precedence

        def enterRule(self, listener):
            if hasattr(listener, "enterScan_for_cast_generic_precedence"):
                listener.enterScan_for_cast_generic_precedence(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScan_for_cast_generic_precedence"):
                listener.exitScan_for_cast_generic_precedence(self)




    def scan_for_cast_generic_precedence(self):

        localctx = CSharp4Parser.Scan_for_cast_generic_precedenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_scan_for_cast_generic_precedence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1285
            self.type121()
            self.state = 1286
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1287
            self.cast_disambiguation_token()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_disambiguation_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Cast_disambiguation_tokenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def BANG(self):
            return self.getToken(CSharp4Parser.BANG, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CSharp4Parser.LiteralContext,0)


        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def BASE(self):
            return self.getToken(CSharp4Parser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharp4Parser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharp4Parser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharp4Parser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharp4Parser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharp4Parser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharp4Parser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharp4Parser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharp4Parser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharp4Parser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharp4Parser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharp4Parser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharp4Parser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharp4Parser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharp4Parser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharp4Parser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def FINALLY(self):
            return self.getToken(CSharp4Parser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharp4Parser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharp4Parser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharp4Parser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharp4Parser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharp4Parser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharp4Parser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def INT(self):
            return self.getToken(CSharp4Parser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharp4Parser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def LOCK(self):
            return self.getToken(CSharp4Parser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharp4Parser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharp4Parser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def OBJECT(self):
            return self.getToken(CSharp4Parser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharp4Parser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharp4Parser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharp4Parser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharp4Parser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharp4Parser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharp4Parser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharp4Parser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharp4Parser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharp4Parser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharp4Parser.THROW, 0)

        def TRY(self):
            return self.getToken(CSharp4Parser.TRY, 0)

        def type121OF(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121OFContext,0)


        def UINT(self):
            return self.getToken(CSharp4Parser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharp4Parser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharp4Parser.UNCHECKED, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharp4Parser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharp4Parser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharp4Parser.WHILE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_cast_disambiguation_token

        def enterRule(self, listener):
            if hasattr(listener, "enterCast_disambiguation_token"):
                listener.enterCast_disambiguation_token(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCast_disambiguation_token"):
                listener.exitCast_disambiguation_token(self)




    def cast_disambiguation_token(self):

        localctx = CSharp4Parser.Cast_disambiguation_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_cast_disambiguation_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            token = self._input.LA(1)
            if token in [CSharp4Parser.TILDE]:
                self.state = 1289
                self.match(CSharp4Parser.TILDE)

            elif token in [CSharp4Parser.BANG]:
                self.state = 1290
                self.match(CSharp4Parser.BANG)

            elif token in [CSharp4Parser.OPEN_PARENS]:
                self.state = 1291
                self.match(CSharp4Parser.OPEN_PARENS)

            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.state = 1292
                self.identifier()

            elif token in [CSharp4Parser.FALSE, CSharp4Parser.NULL, CSharp4Parser.TRUE, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL]:
                self.state = 1293
                self.literal()

            elif token in [CSharp4Parser.ABSTRACT]:
                self.state = 1294
                self.match(CSharp4Parser.ABSTRACT)

            elif token in [CSharp4Parser.BASE]:
                self.state = 1295
                self.match(CSharp4Parser.BASE)

            elif token in [CSharp4Parser.BOOL]:
                self.state = 1296
                self.match(CSharp4Parser.BOOL)

            elif token in [CSharp4Parser.BREAK]:
                self.state = 1297
                self.match(CSharp4Parser.BREAK)

            elif token in [CSharp4Parser.BYTE]:
                self.state = 1298
                self.match(CSharp4Parser.BYTE)

            elif token in [CSharp4Parser.CASE]:
                self.state = 1299
                self.match(CSharp4Parser.CASE)

            elif token in [CSharp4Parser.CATCH]:
                self.state = 1300
                self.match(CSharp4Parser.CATCH)

            elif token in [CSharp4Parser.CHAR]:
                self.state = 1301
                self.match(CSharp4Parser.CHAR)

            elif token in [CSharp4Parser.CHECKED]:
                self.state = 1302
                self.match(CSharp4Parser.CHECKED)

            elif token in [CSharp4Parser.CLASS]:
                self.state = 1303
                self.match(CSharp4Parser.CLASS)

            elif token in [CSharp4Parser.CONST]:
                self.state = 1304
                self.match(CSharp4Parser.CONST)

            elif token in [CSharp4Parser.CONTINUE]:
                self.state = 1305
                self.match(CSharp4Parser.CONTINUE)

            elif token in [CSharp4Parser.DECIMAL]:
                self.state = 1306
                self.match(CSharp4Parser.DECIMAL)

            elif token in [CSharp4Parser.DEFAULT]:
                self.state = 1307
                self.match(CSharp4Parser.DEFAULT)

            elif token in [CSharp4Parser.DELEGATE]:
                self.state = 1308
                self.match(CSharp4Parser.DELEGATE)

            elif token in [CSharp4Parser.DO]:
                self.state = 1309
                self.match(CSharp4Parser.DO)

            elif token in [CSharp4Parser.DOUBLE]:
                self.state = 1310
                self.match(CSharp4Parser.DOUBLE)

            elif token in [CSharp4Parser.ELSE]:
                self.state = 1311
                self.match(CSharp4Parser.ELSE)

            elif token in [CSharp4Parser.ENUM]:
                self.state = 1312
                self.match(CSharp4Parser.ENUM)

            elif token in [CSharp4Parser.EVENT]:
                self.state = 1313
                self.match(CSharp4Parser.EVENT)

            elif token in [CSharp4Parser.EXPLICIT]:
                self.state = 1314
                self.match(CSharp4Parser.EXPLICIT)

            elif token in [CSharp4Parser.EXTERN]:
                self.state = 1315
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.FINALLY]:
                self.state = 1316
                self.match(CSharp4Parser.FINALLY)

            elif token in [CSharp4Parser.FIXED]:
                self.state = 1317
                self.match(CSharp4Parser.FIXED)

            elif token in [CSharp4Parser.FLOAT]:
                self.state = 1318
                self.match(CSharp4Parser.FLOAT)

            elif token in [CSharp4Parser.FOR]:
                self.state = 1319
                self.match(CSharp4Parser.FOR)

            elif token in [CSharp4Parser.FOREACH]:
                self.state = 1320
                self.match(CSharp4Parser.FOREACH)

            elif token in [CSharp4Parser.GOTO]:
                self.state = 1321
                self.match(CSharp4Parser.GOTO)

            elif token in [CSharp4Parser.IF]:
                self.state = 1322
                self.match(CSharp4Parser.IF)

            elif token in [CSharp4Parser.IMPLICIT]:
                self.state = 1323
                self.match(CSharp4Parser.IMPLICIT)

            elif token in [CSharp4Parser.IN]:
                self.state = 1324
                self.match(CSharp4Parser.IN)

            elif token in [CSharp4Parser.INT]:
                self.state = 1325
                self.match(CSharp4Parser.INT)

            elif token in [CSharp4Parser.INTERFACE]:
                self.state = 1326
                self.match(CSharp4Parser.INTERFACE)

            elif token in [CSharp4Parser.INTERNAL]:
                self.state = 1327
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.LOCK]:
                self.state = 1328
                self.match(CSharp4Parser.LOCK)

            elif token in [CSharp4Parser.LONG]:
                self.state = 1329
                self.match(CSharp4Parser.LONG)

            elif token in [CSharp4Parser.NAMESPACE]:
                self.state = 1330
                self.match(CSharp4Parser.NAMESPACE)

            elif token in [CSharp4Parser.NEW]:
                self.state = 1331
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.OBJECT]:
                self.state = 1332
                self.match(CSharp4Parser.OBJECT)

            elif token in [CSharp4Parser.OPERATOR]:
                self.state = 1333
                self.match(CSharp4Parser.OPERATOR)

            elif token in [CSharp4Parser.OUT]:
                self.state = 1334
                self.match(CSharp4Parser.OUT)

            elif token in [CSharp4Parser.OVERRIDE]:
                self.state = 1335
                self.match(CSharp4Parser.OVERRIDE)

            elif token in [CSharp4Parser.PARAMS]:
                self.state = 1336
                self.match(CSharp4Parser.PARAMS)

            elif token in [CSharp4Parser.PRIVATE]:
                self.state = 1337
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.PROTECTED]:
                self.state = 1338
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.PUBLIC]:
                self.state = 1339
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.READONLY]:
                self.state = 1340
                self.match(CSharp4Parser.READONLY)

            elif token in [CSharp4Parser.REF]:
                self.state = 1341
                self.match(CSharp4Parser.REF)

            elif token in [CSharp4Parser.RETURN]:
                self.state = 1342
                self.match(CSharp4Parser.RETURN)

            elif token in [CSharp4Parser.SBYTE]:
                self.state = 1343
                self.match(CSharp4Parser.SBYTE)

            elif token in [CSharp4Parser.SEALED]:
                self.state = 1344
                self.match(CSharp4Parser.SEALED)

            elif token in [CSharp4Parser.SHORT]:
                self.state = 1345
                self.match(CSharp4Parser.SHORT)

            elif token in [CSharp4Parser.SIZEOF]:
                self.state = 1346
                self.match(CSharp4Parser.SIZEOF)

            elif token in [CSharp4Parser.STACKALLOC]:
                self.state = 1347
                self.match(CSharp4Parser.STACKALLOC)

            elif token in [CSharp4Parser.STATIC]:
                self.state = 1348
                self.match(CSharp4Parser.STATIC)

            elif token in [CSharp4Parser.STRING]:
                self.state = 1349
                self.match(CSharp4Parser.STRING)

            elif token in [CSharp4Parser.STRUCT]:
                self.state = 1350
                self.match(CSharp4Parser.STRUCT)

            elif token in [CSharp4Parser.SWITCH]:
                self.state = 1351
                self.match(CSharp4Parser.SWITCH)

            elif token in [CSharp4Parser.THIS]:
                self.state = 1352
                self.match(CSharp4Parser.THIS)

            elif token in [CSharp4Parser.THROW]:
                self.state = 1353
                self.match(CSharp4Parser.THROW)

            elif token in [CSharp4Parser.TRY]:
                self.state = 1354
                self.match(CSharp4Parser.TRY)

            elif token in [CSharp4Parser.T__0]:
                self.state = 1355
                self.type121OF()

            elif token in [CSharp4Parser.UINT]:
                self.state = 1356
                self.match(CSharp4Parser.UINT)

            elif token in [CSharp4Parser.ULONG]:
                self.state = 1357
                self.match(CSharp4Parser.ULONG)

            elif token in [CSharp4Parser.UNCHECKED]:
                self.state = 1358
                self.match(CSharp4Parser.UNCHECKED)

            elif token in [CSharp4Parser.UNSAFE]:
                self.state = 1359
                self.match(CSharp4Parser.UNSAFE)

            elif token in [CSharp4Parser.USHORT]:
                self.state = 1360
                self.match(CSharp4Parser.USHORT)

            elif token in [CSharp4Parser.USING]:
                self.state = 1361
                self.match(CSharp4Parser.USING)

            elif token in [CSharp4Parser.VIRTUAL]:
                self.state = 1362
                self.match(CSharp4Parser.VIRTUAL)

            elif token in [CSharp4Parser.VOID]:
                self.state = 1363
                self.match(CSharp4Parser.VOID)

            elif token in [CSharp4Parser.VOLATILE]:
                self.state = 1364
                self.match(CSharp4Parser.VOLATILE)

            elif token in [CSharp4Parser.WHILE]:
                self.state = 1365
                self.match(CSharp4Parser.WHILE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pre_increment_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Pre_increment_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OP_INC(self):
            return self.getToken(CSharp4Parser.OP_INC, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_pre_increment_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterPre_increment_expression"):
                listener.enterPre_increment_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPre_increment_expression"):
                listener.exitPre_increment_expression(self)




    def pre_increment_expression(self):

        localctx = CSharp4Parser.Pre_increment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_pre_increment_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(CSharp4Parser.OP_INC)
            self.state = 1369
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pre_decrement_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Pre_decrement_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OP_DEC(self):
            return self.getToken(CSharp4Parser.OP_DEC, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_pre_decrement_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterPre_decrement_expression"):
                listener.enterPre_decrement_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPre_decrement_expression"):
                listener.exitPre_decrement_expression(self)




    def pre_decrement_expression(self):

        localctx = CSharp4Parser.Pre_decrement_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pre_decrement_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(CSharp4Parser.OP_DEC)
            self.state = 1372
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Cast_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_cast_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterCast_expression"):
                listener.enterCast_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCast_expression"):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharp4Parser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1375
            self.type121()
            self.state = 1376
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1377
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiplicative_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Multiplicative_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,i)


        def STAR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def DIV(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DIV)
            else:
                return self.getToken(CSharp4Parser.DIV, i)

        def PERCENT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.PERCENT)
            else:
                return self.getToken(CSharp4Parser.PERCENT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_multiplicative_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterMultiplicative_expression"):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultiplicative_expression"):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharp4Parser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.unary_expression()
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (CSharp4Parser.STAR - 126)) | (1 << (CSharp4Parser.DIV - 126)) | (1 << (CSharp4Parser.PERCENT - 126)))) != 0):
                self.state = 1386
                token = self._input.LA(1)
                if token in [CSharp4Parser.STAR]:
                    self.state = 1380
                    self.match(CSharp4Parser.STAR)
                    self.state = 1381
                    self.unary_expression()

                elif token in [CSharp4Parser.DIV]:
                    self.state = 1382
                    self.match(CSharp4Parser.DIV)
                    self.state = 1383
                    self.unary_expression()

                elif token in [CSharp4Parser.PERCENT]:
                    self.state = 1384
                    self.match(CSharp4Parser.PERCENT)
                    self.state = 1385
                    self.unary_expression()

                else:
                    raise NoViableAltException(self)

                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Additive_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Additive_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Multiplicative_expressionContext,i)


        def PLUS(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.PLUS)
            else:
                return self.getToken(CSharp4Parser.PLUS, i)

        def MINUS(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.MINUS)
            else:
                return self.getToken(CSharp4Parser.MINUS, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_additive_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterAdditive_expression"):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAdditive_expression"):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharp4Parser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.multiplicative_expression()
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.PLUS or _la==CSharp4Parser.MINUS:
                self.state = 1396
                token = self._input.LA(1)
                if token in [CSharp4Parser.PLUS]:
                    self.state = 1392
                    self.match(CSharp4Parser.PLUS)
                    self.state = 1393
                    self.multiplicative_expression()

                elif token in [CSharp4Parser.MINUS]:
                    self.state = 1394
                    self.match(CSharp4Parser.MINUS)
                    self.state = 1395
                    self.multiplicative_expression()

                else:
                    raise NoViableAltException(self)

                self.state = 1400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Shift_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharp4Parser.OP_LEFT_SHIFT, i)

        def right_shift(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_shift_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterShift_expression"):
                listener.enterShift_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShift_expression"):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharp4Parser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.additive_expression()
            self.state = 1409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1407
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.OP_LEFT_SHIFT]:
                        self.state = 1402
                        self.match(CSharp4Parser.OP_LEFT_SHIFT)
                        self.state = 1403
                        self.additive_expression()

                    elif token in [CSharp4Parser.GT]:
                        self.state = 1404
                        self.right_shift()
                        self.state = 1405
                        self.additive_expression()

                    else:
                        raise NoViableAltException(self)
             
                self.state = 1411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Relational_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Shift_expressionContext,i)


        def LT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.LT)
            else:
                return self.getToken(CSharp4Parser.LT, i)

        def GT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.GT)
            else:
                return self.getToken(CSharp4Parser.GT, i)

        def OP_LE(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_LE)
            else:
                return self.getToken(CSharp4Parser.OP_LE, i)

        def OP_GE(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_GE)
            else:
                return self.getToken(CSharp4Parser.OP_GE, i)

        def IS(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.IS)
            else:
                return self.getToken(CSharp4Parser.IS, i)

        def istype121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Istype121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Istype121Context,i)


        def AS(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.AS)
            else:
                return self.getToken(CSharp4Parser.AS, i)

        def type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121Context,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_relational_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterRelational_expression"):
                listener.enterRelational_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelational_expression"):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharp4Parser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.shift_expression()
            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.AS or _la==CSharp4Parser.IS or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CSharp4Parser.LT - 135)) | (1 << (CSharp4Parser.GT - 135)) | (1 << (CSharp4Parser.OP_LE - 135)) | (1 << (CSharp4Parser.OP_GE - 135)))) != 0):
                self.state = 1425
                token = self._input.LA(1)
                if token in [CSharp4Parser.LT]:
                    self.state = 1413
                    self.match(CSharp4Parser.LT)
                    self.state = 1414
                    self.shift_expression()

                elif token in [CSharp4Parser.GT]:
                    self.state = 1415
                    self.match(CSharp4Parser.GT)
                    self.state = 1416
                    self.shift_expression()

                elif token in [CSharp4Parser.OP_LE]:
                    self.state = 1417
                    self.match(CSharp4Parser.OP_LE)
                    self.state = 1418
                    self.shift_expression()

                elif token in [CSharp4Parser.OP_GE]:
                    self.state = 1419
                    self.match(CSharp4Parser.OP_GE)
                    self.state = 1420
                    self.shift_expression()

                elif token in [CSharp4Parser.IS]:
                    self.state = 1421
                    self.match(CSharp4Parser.IS)
                    self.state = 1422
                    self.istype121()

                elif token in [CSharp4Parser.AS]:
                    self.state = 1423
                    self.match(CSharp4Parser.AS)
                    self.state = 1424
                    self.type121()

                else:
                    raise NoViableAltException(self)

                self.state = 1429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scan_for_shift_generic_precedenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Scan_for_shift_generic_precedenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121Context,i)


        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def shift_disambiguation_token(self):
            return self.getTypedRuleContext(CSharp4Parser.Shift_disambiguation_tokenContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_scan_for_shift_generic_precedence

        def enterRule(self, listener):
            if hasattr(listener, "enterScan_for_shift_generic_precedence"):
                listener.enterScan_for_shift_generic_precedence(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScan_for_shift_generic_precedence"):
                listener.exitScan_for_shift_generic_precedence(self)




    def scan_for_shift_generic_precedence(self):

        localctx = CSharp4Parser.Scan_for_shift_generic_precedenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_scan_for_shift_generic_precedence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.identifier()
            self.state = 1431
            self.match(CSharp4Parser.LT)
            self.state = 1432
            self.type121()
            self.state = 1437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1433
                self.match(CSharp4Parser.COMMA)
                self.state = 1434
                self.type121()
                self.state = 1439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1440
            self.match(CSharp4Parser.GT)
            self.state = 1441
            self.shift_disambiguation_token()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_disambiguation_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Shift_disambiguation_tokenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def OP_EQ(self):
            return self.getToken(CSharp4Parser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharp4Parser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_shift_disambiguation_token

        def enterRule(self, listener):
            if hasattr(listener, "enterShift_disambiguation_token"):
                listener.enterShift_disambiguation_token(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShift_disambiguation_token"):
                listener.exitShift_disambiguation_token(self)




    def shift_disambiguation_token(self):

        localctx = CSharp4Parser.Shift_disambiguation_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_shift_disambiguation_token)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            _la = self._input.LA(1)
            if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (CSharp4Parser.CLOSE_BRACKET - 117)) | (1 << (CSharp4Parser.OPEN_PARENS - 117)) | (1 << (CSharp4Parser.CLOSE_PARENS - 117)) | (1 << (CSharp4Parser.DOT - 117)) | (1 << (CSharp4Parser.COMMA - 117)) | (1 << (CSharp4Parser.COLON - 117)) | (1 << (CSharp4Parser.SEMICOLON - 117)) | (1 << (CSharp4Parser.GT - 117)) | (1 << (CSharp4Parser.INTERR - 117)) | (1 << (CSharp4Parser.OP_EQ - 117)) | (1 << (CSharp4Parser.OP_NE - 117)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Istype121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Istype121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def non_nullable_value_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_nullable_value_type121Context,0)


        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_istype121

        def enterRule(self, listener):
            if hasattr(listener, "enterIstype121"):
                listener.enterIstype121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIstype121"):
                listener.exitIstype121(self)




    def istype121(self):

        localctx = CSharp4Parser.Istype121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_istype121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.non_nullable_value_type121()
            self.state = 1447
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1446
                self.match(CSharp4Parser.INTERR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Is_disambiguation_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Is_disambiguation_tokenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def OP_AND(self):
            return self.getToken(CSharp4Parser.OP_AND, 0)

        def OP_OR(self):
            return self.getToken(CSharp4Parser.OP_OR, 0)

        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_is_disambiguation_token

        def enterRule(self, listener):
            if hasattr(listener, "enterIs_disambiguation_token"):
                listener.enterIs_disambiguation_token(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIs_disambiguation_token"):
                listener.exitIs_disambiguation_token(self)




    def is_disambiguation_token(self):

        localctx = CSharp4Parser.Is_disambiguation_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_is_disambiguation_token)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            _la = self._input.LA(1)
            if not(((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (CSharp4Parser.CLOSE_PARENS - 119)) | (1 << (CSharp4Parser.INTERR - 119)) | (1 << (CSharp4Parser.OP_AND - 119)) | (1 << (CSharp4Parser.OP_OR - 119)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equality_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Equality_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Relational_expressionContext,i)


        def OP_EQ(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_EQ)
            else:
                return self.getToken(CSharp4Parser.OP_EQ, i)

        def OP_NE(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_NE)
            else:
                return self.getToken(CSharp4Parser.OP_NE, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_equality_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterEquality_expression"):
                listener.enterEquality_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEquality_expression"):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharp4Parser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.relational_expression()
            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OP_EQ or _la==CSharp4Parser.OP_NE:
                self.state = 1456
                token = self._input.LA(1)
                if token in [CSharp4Parser.OP_EQ]:
                    self.state = 1452
                    self.match(CSharp4Parser.OP_EQ)
                    self.state = 1453
                    self.relational_expression()

                elif token in [CSharp4Parser.OP_NE]:
                    self.state = 1454
                    self.match(CSharp4Parser.OP_NE)
                    self.state = 1455
                    self.relational_expression()

                else:
                    raise NoViableAltException(self)

                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.And_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Equality_expressionContext,i)


        def AMP(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.AMP)
            else:
                return self.getToken(CSharp4Parser.AMP, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_and_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterAnd_expression"):
                listener.enterAnd_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnd_expression"):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharp4Parser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.equality_expression()
            self.state = 1466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.AMP:
                self.state = 1462
                self.match(CSharp4Parser.AMP)
                self.state = 1463
                self.equality_expression()
                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exclusive_or_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Exclusive_or_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.And_expressionContext,i)


        def CARET(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.CARET)
            else:
                return self.getToken(CSharp4Parser.CARET, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_exclusive_or_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterExclusive_or_expression"):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExclusive_or_expression"):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharp4Parser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_exclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.and_expression()
            self.state = 1474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.CARET:
                self.state = 1470
                self.match(CSharp4Parser.CARET)
                self.state = 1471
                self.and_expression()
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inclusive_or_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Inclusive_or_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.BITWISE_OR)
            else:
                return self.getToken(CSharp4Parser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_inclusive_or_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterInclusive_or_expression"):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInclusive_or_expression"):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharp4Parser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_inclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.exclusive_or_expression()
            self.state = 1482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.BITWISE_OR:
                self.state = 1478
                self.match(CSharp4Parser.BITWISE_OR)
                self.state = 1479
                self.exclusive_or_expression()
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_and_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Conditional_and_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_AND)
            else:
                return self.getToken(CSharp4Parser.OP_AND, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_conditional_and_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterConditional_and_expression"):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConditional_and_expression"):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharp4Parser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_conditional_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.inclusive_or_expression()
            self.state = 1490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OP_AND:
                self.state = 1486
                self.match(CSharp4Parser.OP_AND)
                self.state = 1487
                self.inclusive_or_expression()
                self.state = 1492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_or_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Conditional_or_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Conditional_and_expressionContext,i)


        def OP_OR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_OR)
            else:
                return self.getToken(CSharp4Parser.OP_OR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_conditional_or_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterConditional_or_expression"):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConditional_or_expression"):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharp4Parser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_conditional_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self.conditional_and_expression()
            self.state = 1498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OP_OR:
                self.state = 1494
                self.match(CSharp4Parser.OP_OR)
                self.state = 1495
                self.conditional_and_expression()
                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_coalescing_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Null_coalescing_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharp4Parser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Null_coalescing_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_null_coalescing_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterNull_coalescing_expression"):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNull_coalescing_expression"):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharp4Parser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_null_coalescing_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self.conditional_or_expression()
            self.state = 1504
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OP_COALESCING:
                self.state = 1502
                self.match(CSharp4Parser.OP_COALESCING)
                self.state = 1503
                self.null_coalescing_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Conditional_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_conditional_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterConditional_expression"):
                listener.enterConditional_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConditional_expression"):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharp4Parser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_conditional_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.null_coalescing_expression()
            self.state = 1512
            _la = self._input.LA(1)
            if _la==CSharp4Parser.INTERR:
                self.state = 1507
                self.match(CSharp4Parser.INTERR)
                self.state = 1508
                self.expression()
                self.state = 1509
                self.match(CSharp4Parser.COLON)
                self.state = 1510
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Lambda_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharp4Parser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_lambda_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterLambda_expression"):
                listener.enterLambda_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLambda_expression"):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharp4Parser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_lambda_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.anonymous_function_signature()
            self.state = 1515
            self.right_arrow()
            self.state = 1516
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Anonymous_method_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def explicit_anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharp4Parser.Explicit_anonymous_function_signatureContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_method_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterAnonymous_method_expression"):
                listener.enterAnonymous_method_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnonymous_method_expression"):
                listener.exitAnonymous_method_expression(self)




    def anonymous_method_expression(self):

        localctx = CSharp4Parser.Anonymous_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_anonymous_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.match(CSharp4Parser.DELEGATE)
            self.state = 1520
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_PARENS:
                self.state = 1519
                self.explicit_anonymous_function_signature()


            self.state = 1522
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_function_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Anonymous_function_signatureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter(self):
            return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameterContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_function_signature

        def enterRule(self, listener):
            if hasattr(listener, "enterAnonymous_function_signature"):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnonymous_function_signature"):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharp4Parser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_anonymous_function_signature)
        try:
            self.state = 1535
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1524
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1525
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1526
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1527
                self.explicit_anonymous_function_parameter_list()
                self.state = 1528
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1530
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1531
                self.implicit_anonymous_function_parameter_list()
                self.state = 1532
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1534
                self.implicit_anonymous_function_parameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicit_anonymous_function_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Explicit_anonymous_function_signatureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Explicit_anonymous_function_parameter_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_explicit_anonymous_function_signature

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicit_anonymous_function_signature"):
                listener.enterExplicit_anonymous_function_signature(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicit_anonymous_function_signature"):
                listener.exitExplicit_anonymous_function_signature(self)




    def explicit_anonymous_function_signature(self):

        localctx = CSharp4Parser.Explicit_anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_explicit_anonymous_function_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1539
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)))) != 0):
                self.state = 1538
                self.explicit_anonymous_function_parameter_list()


            self.state = 1541
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Explicit_anonymous_function_parameter_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicit_anonymous_function_parameter_list"):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicit_anonymous_function_parameter_list"):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharp4Parser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.explicit_anonymous_function_parameter()
            self.state = 1548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1544
                self.match(CSharp4Parser.COMMA)
                self.state = 1545
                self.explicit_anonymous_function_parameter()
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicit_anonymous_function_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Explicit_anonymous_function_parameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def anonymous_function_parameter_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_function_parameter_modifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicit_anonymous_function_parameter"):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicit_anonymous_function_parameter"):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharp4Parser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OUT or _la==CSharp4Parser.REF:
                self.state = 1551
                self.anonymous_function_parameter_modifier()


            self.state = 1554
            self.type121()
            self.state = 1555
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_function_parameter_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Anonymous_function_parameter_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_function_parameter_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterAnonymous_function_parameter_modifier"):
                listener.enterAnonymous_function_parameter_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnonymous_function_parameter_modifier"):
                listener.exitAnonymous_function_parameter_modifier(self)




    def anonymous_function_parameter_modifier(self):

        localctx = CSharp4Parser.Anonymous_function_parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_anonymous_function_parameter_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.OUT or _la==CSharp4Parser.REF):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implicit_anonymous_function_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Implicit_anonymous_function_signatureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter(self):
            return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameterContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_implicit_anonymous_function_signature

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicit_anonymous_function_signature"):
                listener.enterImplicit_anonymous_function_signature(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicit_anonymous_function_signature"):
                listener.exitImplicit_anonymous_function_signature(self)




    def implicit_anonymous_function_signature(self):

        localctx = CSharp4Parser.Implicit_anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_implicit_anonymous_function_signature)
        self._la = 0 # Token type
        try:
            self.state = 1565
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_PARENS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1559
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1561
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CSharp4Parser.ON - 67)) | (1 << (CSharp4Parser.ORDERBY - 67)) | (1 << (CSharp4Parser.PARTIAL - 67)) | (1 << (CSharp4Parser.REMOVE - 67)) | (1 << (CSharp4Parser.SELECT - 67)) | (1 << (CSharp4Parser.SET - 67)) | (1 << (CSharp4Parser.WHERE - 67)) | (1 << (CSharp4Parser.YIELD - 67)) | (1 << (CSharp4Parser.IDENTIFIER - 67)))) != 0):
                    self.state = 1560
                    self.implicit_anonymous_function_parameter_list()


                self.state = 1563
                self.match(CSharp4Parser.CLOSE_PARENS)

            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1564
                self.implicit_anonymous_function_parameter()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Implicit_anonymous_function_parameter_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def implicit_anonymous_function_parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Implicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameterContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicit_anonymous_function_parameter_list"):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicit_anonymous_function_parameter_list"):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharp4Parser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.implicit_anonymous_function_parameter()
            self.state = 1572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1568
                self.match(CSharp4Parser.COMMA)
                self.state = 1569
                self.implicit_anonymous_function_parameter()
                self.state = 1574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implicit_anonymous_function_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Implicit_anonymous_function_parameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_implicit_anonymous_function_parameter

        def enterRule(self, listener):
            if hasattr(listener, "enterImplicit_anonymous_function_parameter"):
                listener.enterImplicit_anonymous_function_parameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImplicit_anonymous_function_parameter"):
                listener.exitImplicit_anonymous_function_parameter(self)




    def implicit_anonymous_function_parameter(self):

        localctx = CSharp4Parser.Implicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_implicit_anonymous_function_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Anonymous_function_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_function_body

        def enterRule(self, listener):
            if hasattr(listener, "enterAnonymous_function_body"):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnonymous_function_body"):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharp4Parser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_anonymous_function_body)
        try:
            self.state = 1579
            token = self._input.LA(1)
            if token in [CSharp4Parser.T__0, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1577
                self.expression()

            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1578
                self.block()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Query_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterQuery_expression"):
                listener.enterQuery_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuery_expression"):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharp4Parser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.from_clause()
            self.state = 1582
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.From_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.From_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_from_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterFrom_clause"):
                listener.enterFrom_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFrom_clause"):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharp4Parser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.from_contextual_keyword()
            self.state = 1586
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1585
                self.type121()


            self.state = 1588
            self.identifier()
            self.state = 1589
            self.match(CSharp4Parser.IN)
            self.state = 1590
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Query_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Select_or_group_clauseContext,0)


        def query_body_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_body_clausesContext,0)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_body

        def enterRule(self, listener):
            if hasattr(listener, "enterQuery_body"):
                listener.enterQuery_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuery_body"):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharp4Parser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            _la = self._input.LA(1)
            if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (CSharp4Parser.FROM - 47)) | (1 << (CSharp4Parser.JOIN - 47)) | (1 << (CSharp4Parser.LET - 47)) | (1 << (CSharp4Parser.ORDERBY - 47)) | (1 << (CSharp4Parser.WHERE - 47)))) != 0):
                self.state = 1592
                self.query_body_clauses()


            self.state = 1595
            self.select_or_group_clause()
            self.state = 1597
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1596
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_body_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Query_body_clausesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def query_body_clause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Query_body_clauseContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_body_clauses

        def enterRule(self, listener):
            if hasattr(listener, "enterQuery_body_clauses"):
                listener.enterQuery_body_clauses(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuery_body_clauses"):
                listener.exitQuery_body_clauses(self)




    def query_body_clauses(self):

        localctx = CSharp4Parser.Query_body_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_query_body_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.query_body_clause()
            self.state = 1603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (CSharp4Parser.FROM - 47)) | (1 << (CSharp4Parser.JOIN - 47)) | (1 << (CSharp4Parser.LET - 47)) | (1 << (CSharp4Parser.ORDERBY - 47)) | (1 << (CSharp4Parser.WHERE - 47)))) != 0):
                self.state = 1600
                self.query_body_clause()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_body_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Query_body_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_body_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterQuery_body_clause"):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuery_body_clause"):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharp4Parser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_query_body_clause)
        try:
            self.state = 1611
            token = self._input.LA(1)
            if token in [CSharp4Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1606
                self.from_clause()

            elif token in [CSharp4Parser.LET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1607
                self.let_clause()

            elif token in [CSharp4Parser.WHERE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1608
                self.where_clause()

            elif token in [CSharp4Parser.JOIN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1609
                self.combined_join_clause()

            elif token in [CSharp4Parser.ORDERBY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1610
                self.orderby_clause()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Let_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def let_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Let_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_let_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterLet_clause"):
                listener.enterLet_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLet_clause"):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharp4Parser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.let_contextual_keyword()
            self.state = 1614
            self.identifier()
            self.state = 1615
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 1616
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Where_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def where_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Where_contextual_keywordContext,0)


        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_where_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterWhere_clause"):
                listener.enterWhere_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWhere_clause"):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharp4Parser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.where_contextual_keyword()
            self.state = 1619
            self.boolean_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Join_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def join_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Join_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def on_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.On_contextual_keywordContext,0)


        def equals_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Equals_contextual_keywordContext,0)


        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_join_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_clause"):
                listener.enterJoin_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_clause"):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = CSharp4Parser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_join_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.join_contextual_keyword()
            self.state = 1623
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1622
                self.type121()


            self.state = 1625
            self.identifier()
            self.state = 1626
            self.match(CSharp4Parser.IN)
            self.state = 1627
            self.expression()
            self.state = 1628
            self.on_contextual_keyword()
            self.state = 1629
            self.expression()
            self.state = 1630
            self.equals_contextual_keyword()
            self.state = 1631
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Join_into_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def join_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Join_contextual_keywordContext,0)


        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def on_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.On_contextual_keywordContext,0)


        def equals_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Equals_contextual_keywordContext,0)


        def into_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Into_contextual_keywordContext,0)


        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_join_into_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_into_clause"):
                listener.enterJoin_into_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_into_clause"):
                listener.exitJoin_into_clause(self)




    def join_into_clause(self):

        localctx = CSharp4Parser.Join_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_join_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.join_contextual_keyword()
            self.state = 1635
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1634
                self.type121()


            self.state = 1637
            self.identifier()
            self.state = 1638
            self.match(CSharp4Parser.IN)
            self.state = 1639
            self.expression()
            self.state = 1640
            self.on_contextual_keyword()
            self.state = 1641
            self.expression()
            self.state = 1642
            self.equals_contextual_keyword()
            self.state = 1643
            self.expression()
            self.state = 1644
            self.into_contextual_keyword()
            self.state = 1645
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Combined_join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Combined_join_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def join_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Join_contextual_keywordContext,0)


        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def on_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.On_contextual_keywordContext,0)


        def equals_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Equals_contextual_keywordContext,0)


        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def into_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Into_contextual_keywordContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_combined_join_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterCombined_join_clause"):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCombined_join_clause"):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharp4Parser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.join_contextual_keyword()
            self.state = 1649
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 1648
                self.type121()


            self.state = 1651
            self.identifier()
            self.state = 1652
            self.match(CSharp4Parser.IN)
            self.state = 1653
            self.expression()
            self.state = 1654
            self.on_contextual_keyword()
            self.state = 1655
            self.expression()
            self.state = 1656
            self.equals_contextual_keyword()
            self.state = 1657
            self.expression()
            self.state = 1661
            _la = self._input.LA(1)
            if _la==CSharp4Parser.INTO:
                self.state = 1658
                self.into_contextual_keyword()
                self.state = 1659
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Orderby_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def orderby_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Orderby_contextual_keywordContext,0)


        def orderings(self):
            return self.getTypedRuleContext(CSharp4Parser.OrderingsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_orderby_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterOrderby_clause"):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrderby_clause"):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharp4Parser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_orderby_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.orderby_contextual_keyword()
            self.state = 1664
            self.orderings()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderingsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.OrderingsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ordering(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.OrderingContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_orderings

        def enterRule(self, listener):
            if hasattr(listener, "enterOrderings"):
                listener.enterOrderings(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrderings"):
                listener.exitOrderings(self)




    def orderings(self):

        localctx = CSharp4Parser.OrderingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_orderings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.ordering()
            self.state = 1671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1667
                self.match(CSharp4Parser.COMMA)
                self.state = 1668
                self.ordering()
                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.OrderingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def ordering_direction(self):
            return self.getTypedRuleContext(CSharp4Parser.Ordering_directionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_ordering

        def enterRule(self, listener):
            if hasattr(listener, "enterOrdering"):
                listener.enterOrdering(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrdering"):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharp4Parser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.expression()
            self.state = 1676
            _la = self._input.LA(1)
            if _la==CSharp4Parser.ASCENDING or _la==CSharp4Parser.DESCENDING:
                self.state = 1675
                self.ordering_direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_directionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Ordering_directionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ascending_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Ascending_contextual_keywordContext,0)


        def descending_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Descending_contextual_keywordContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_ordering_direction

        def enterRule(self, listener):
            if hasattr(listener, "enterOrdering_direction"):
                listener.enterOrdering_direction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrdering_direction"):
                listener.exitOrdering_direction(self)




    def ordering_direction(self):

        localctx = CSharp4Parser.Ordering_directionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_ordering_direction)
        try:
            self.state = 1680
            token = self._input.LA(1)
            if token in [CSharp4Parser.ASCENDING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1678
                self.ascending_contextual_keyword()

            elif token in [CSharp4Parser.DESCENDING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1679
                self.descending_contextual_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_or_group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Select_or_group_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Select_clauseContext,0)


        def group_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Group_clauseContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_select_or_group_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_or_group_clause"):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_or_group_clause"):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharp4Parser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_select_or_group_clause)
        try:
            self.state = 1684
            token = self._input.LA(1)
            if token in [CSharp4Parser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1682
                self.select_clause()

            elif token in [CSharp4Parser.GROUP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1683
                self.group_clause()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Select_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Select_contextual_keywordContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_select_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_clause"):
                listener.enterSelect_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_clause"):
                listener.exitSelect_clause(self)




    def select_clause(self):

        localctx = CSharp4Parser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_select_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.select_contextual_keyword()
            self.state = 1687
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Group_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def group_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Group_contextual_keywordContext,0)


        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def by_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.By_contextual_keywordContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_group_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterGroup_clause"):
                listener.enterGroup_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGroup_clause"):
                listener.exitGroup_clause(self)




    def group_clause(self):

        localctx = CSharp4Parser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_group_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.group_contextual_keyword()
            self.state = 1690
            self.expression()
            self.state = 1691
            self.by_contextual_keyword()
            self.state = 1692
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_continuationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Query_continuationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def into_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Into_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_continuation

        def enterRule(self, listener):
            if hasattr(listener, "enterQuery_continuation"):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuery_continuation"):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharp4Parser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.into_contextual_keyword()
            self.state = 1695
            self.identifier()
            self.state = 1696
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.AssignmentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharp4Parser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_assignment

        def enterRule(self, listener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharp4Parser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.unary_expression()
            self.state = 1699
            self.assignment_operator()
            self.state = 1700
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Assignment_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharp4Parser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_assignment_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterAssignment_operator"):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAssignment_operator"):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharp4Parser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_assignment_operator)
        try:
            self.state = 1713
            token = self._input.LA(1)
            if token in [CSharp4Parser.ASSIGNMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1702
                self.match(CSharp4Parser.ASSIGNMENT)

            elif token in [CSharp4Parser.OP_ADD_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1703
                self.match(CSharp4Parser.OP_ADD_ASSIGNMENT)

            elif token in [CSharp4Parser.OP_SUB_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1704
                self.match(CSharp4Parser.OP_SUB_ASSIGNMENT)

            elif token in [CSharp4Parser.OP_MULT_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1705
                self.match(CSharp4Parser.OP_MULT_ASSIGNMENT)

            elif token in [CSharp4Parser.OP_DIV_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1706
                self.match(CSharp4Parser.OP_DIV_ASSIGNMENT)

            elif token in [CSharp4Parser.OP_MOD_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1707
                self.match(CSharp4Parser.OP_MOD_ASSIGNMENT)

            elif token in [CSharp4Parser.OP_AND_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1708
                self.match(CSharp4Parser.OP_AND_ASSIGNMENT)

            elif token in [CSharp4Parser.OP_OR_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1709
                self.match(CSharp4Parser.OP_OR_ASSIGNMENT)

            elif token in [CSharp4Parser.OP_XOR_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1710
                self.match(CSharp4Parser.OP_XOR_ASSIGNMENT)

            elif token in [CSharp4Parser.OP_LEFT_SHIFT_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1711
                self.match(CSharp4Parser.OP_LEFT_SHIFT_ASSIGNMENT)

            elif token in [CSharp4Parser.GT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1712
                self.right_shift_assignment()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.ExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharp4Parser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_assignment_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharp4Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_expression)
        try:
            self.state = 1717
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1715
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1716
                self.non_assignment_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_assignment_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Non_assignment_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_non_assignment_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterNon_assignment_expression"):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNon_assignment_expression"):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharp4Parser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_non_assignment_expression)
        try:
            self.state = 1722
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1719
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1720
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1721
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constant_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constant_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterConstant_expression"):
                listener.enterConstant_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstant_expression"):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharp4Parser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Boolean_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Boolean_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_boolean_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterBoolean_expression"):
                listener.enterBoolean_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBoolean_expression"):
                listener.exitBoolean_expression(self)




    def boolean_expression(self):

        localctx = CSharp4Parser.Boolean_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_boolean_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.StatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def labeled_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Labeled_statementContext,0)


        def declaration_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Declaration_statementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharp4Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_statement)
        try:
            self.state = 1731
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1728
                self.labeled_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1729
                self.declaration_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1730
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Embedded_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Embedded_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def simple_embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_embedded_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterEmbedded_statement"):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEmbedded_statement"):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharp4Parser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_embedded_statement)
        try:
            self.state = 1735
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1733
                self.block()

            elif token in [CSharp4Parser.T__0, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BREAK, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.CONTINUE, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DO, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FIXED, CSharp4Parser.FLOAT, CSharp4Parser.FOR, CSharp4Parser.FOREACH, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GOTO, CSharp4Parser.GROUP, CSharp4Parser.IF, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LOCK, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.RETURN, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.SWITCH, CSharp4Parser.THIS, CSharp4Parser.THROW, CSharp4Parser.TRUE, CSharp4Parser.TRY, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.USING, CSharp4Parser.WHERE, CSharp4Parser.WHILE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.SEMICOLON, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1734
                self.simple_embedded_statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_embedded_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Simple_embedded_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def empty_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Empty_statementContext,0)


        def expression_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_statementContext,0)


        def selection_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Selection_statementContext,0)


        def iteration_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Iteration_statementContext,0)


        def jump_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Jump_statementContext,0)


        def try_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Try_statementContext,0)


        def checked_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Checked_statementContext,0)


        def unchecked_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Unchecked_statementContext,0)


        def lock_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Lock_statementContext,0)


        def using_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_statementContext,0)


        def yield_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Yield_statementContext,0)


        def embedded_statement_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statement_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_simple_embedded_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_embedded_statement"):
                listener.enterSimple_embedded_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_embedded_statement"):
                listener.exitSimple_embedded_statement(self)




    def simple_embedded_statement(self):

        localctx = CSharp4Parser.Simple_embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_simple_embedded_statement)
        try:
            self.state = 1749
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1737
                self.empty_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1738
                self.expression_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1739
                self.selection_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1740
                self.iteration_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1741
                self.jump_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1742
                self.try_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1743
                self.checked_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1744
                self.unchecked_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1745
                self.lock_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1746
                self.using_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1747
                self.yield_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1748
                self.embedded_statement_unsafe()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.BlockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_block

        def enterRule(self, listener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharp4Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 1753
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BREAK) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.CONTINUE) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DO) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FIXED) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FOR) | (1 << CSharp4Parser.FOREACH) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GOTO) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IF) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LOCK) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.RETURN - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.SWITCH - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.THROW - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.TRY - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.USING - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.WHILE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_BRACE - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.SEMICOLON - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 1752
                self.statement_list()


            self.state = 1755
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Statement_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.StatementContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_statement_list

        def enterRule(self, listener):
            if hasattr(listener, "enterStatement_list"):
                listener.enterStatement_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatement_list"):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharp4Parser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1757
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1760 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Empty_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Empty_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_empty_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterEmpty_statement"):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEmpty_statement"):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = CSharp4Parser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Labeled_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Labeled_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharp4Parser.StatementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_labeled_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterLabeled_statement"):
                listener.enterLabeled_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLabeled_statement"):
                listener.exitLabeled_statement(self)




    def labeled_statement(self):

        localctx = CSharp4Parser.Labeled_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_labeled_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.identifier()
            self.state = 1765
            self.match(CSharp4Parser.COLON)
            self.state = 1766
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declaration_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Declaration_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_constant_declarationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_declaration_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterDeclaration_statement"):
                listener.enterDeclaration_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeclaration_statement"):
                listener.exitDeclaration_statement(self)




    def declaration_statement(self):

        localctx = CSharp4Parser.Declaration_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_declaration_statement)
        try:
            self.state = 1774
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STRING, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT, CSharp4Parser.VOID, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1768
                self.local_variable_declaration()
                self.state = 1769
                self.match(CSharp4Parser.SEMICOLON)

            elif token in [CSharp4Parser.CONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1771
                self.local_constant_declaration()
                self.state = 1772
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Local_variable_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.t = None # Local_variable_type121Context

        def local_variable_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_declaratorsContext,0)


        def local_variable_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterLocal_variable_declaration"):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocal_variable_declaration"):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharp4Parser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_local_variable_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            localctx.t = self.local_variable_type121()
            self.state = 1777
            self.local_variable_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Local_variable_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterLocal_variable_type121"):
                listener.enterLocal_variable_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocal_variable_type121"):
                listener.exitLocal_variable_type121(self)




    def local_variable_type121(self):

        localctx = CSharp4Parser.Local_variable_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_local_variable_type121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.type121()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Local_variable_declaratorsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declarator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Local_variable_declaratorContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_declarators

        def enterRule(self, listener):
            if hasattr(listener, "enterLocal_variable_declarators"):
                listener.enterLocal_variable_declarators(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocal_variable_declarators"):
                listener.exitLocal_variable_declarators(self)




    def local_variable_declarators(self):

        localctx = CSharp4Parser.Local_variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_local_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.local_variable_declarator()
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1782
                self.match(CSharp4Parser.COMMA)
                self.state = 1783
                self.local_variable_declarator()
                self.state = 1788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Local_variable_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterLocal_variable_declarator"):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocal_variable_declarator"):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharp4Parser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.identifier()
            self.state = 1792
            _la = self._input.LA(1)
            if _la==CSharp4Parser.ASSIGNMENT:
                self.state = 1790
                self.match(CSharp4Parser.ASSIGNMENT)
                self.state = 1791
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Local_variable_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_initializerContext,0)


        def local_variable_initializer_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_initializer_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterLocal_variable_initializer"):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocal_variable_initializer"):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharp4Parser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_local_variable_initializer)
        try:
            self.state = 1797
            token = self._input.LA(1)
            if token in [CSharp4Parser.T__0, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.expression()

            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.array_initializer()

            elif token in [CSharp4Parser.STACKALLOC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1796
                self.local_variable_initializer_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_constant_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Local_constant_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharp4Parser.CONST, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_constant_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterLocal_constant_declaration"):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocal_constant_declaration"):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharp4Parser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.match(CSharp4Parser.CONST)
            self.state = 1800
            self.type121()
            self.state = 1801
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Expression_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def statement_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_expression_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterExpression_statement"):
                listener.enterExpression_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpression_statement"):
                listener.exitExpression_statement(self)




    def expression_statement(self):

        localctx = CSharp4Parser.Expression_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_expression_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.statement_expression()
            self.state = 1804
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Statement_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_statement_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterStatement_expression"):
                listener.enterStatement_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatement_expression"):
                listener.exitStatement_expression(self)




    def statement_expression(self):

        localctx = CSharp4Parser.Statement_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_statement_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selection_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Selection_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def if_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.If_statementContext,0)


        def switch_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Switch_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_selection_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterSelection_statement"):
                listener.enterSelection_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelection_statement"):
                listener.exitSelection_statement(self)




    def selection_statement(self):

        localctx = CSharp4Parser.Selection_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_selection_statement)
        try:
            self.state = 1810
            token = self._input.LA(1)
            if token in [CSharp4Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1808
                self.if_statement()

            elif token in [CSharp4Parser.SWITCH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1809
                self.switch_statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.If_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharp4Parser.RULE_if_body

     
        def copyFrom(self, ctx):
            super(CSharp4Parser.If_bodyContext, self).copyFrom(ctx)



    class IfBodyBlockContext(If_bodyContext):

        def __init__(self, parser, ctx): # actually a CSharp4Parser.If_bodyContext)
            super(CSharp4Parser.IfBodyBlockContext, self).__init__(parser)
            self.copyFrom(ctx)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterIfBodyBlock"):
                listener.enterIfBodyBlock(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfBodyBlock"):
                listener.exitIfBodyBlock(self)


    class IfBodySingleContext(If_bodyContext):

        def __init__(self, parser, ctx): # actually a CSharp4Parser.If_bodyContext)
            super(CSharp4Parser.IfBodySingleContext, self).__init__(parser)
            self.copyFrom(ctx)

        def simple_embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_embedded_statementContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterIfBodySingle"):
                listener.enterIfBodySingle(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfBodySingle"):
                listener.exitIfBodySingle(self)



    def if_body(self):

        localctx = CSharp4Parser.If_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_if_body)
        try:
            self.state = 1814
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                localctx = CSharp4Parser.IfBodyBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1812
                self.block()

            elif token in [CSharp4Parser.T__0, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BREAK, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.CONTINUE, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DO, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FIXED, CSharp4Parser.FLOAT, CSharp4Parser.FOR, CSharp4Parser.FOREACH, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GOTO, CSharp4Parser.GROUP, CSharp4Parser.IF, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LOCK, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.RETURN, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.SWITCH, CSharp4Parser.THIS, CSharp4Parser.THROW, CSharp4Parser.TRUE, CSharp4Parser.TRY, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.USING, CSharp4Parser.WHERE, CSharp4Parser.WHILE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.SEMICOLON, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                localctx = CSharp4Parser.IfBodySingleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1813
                self.simple_embedded_statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.If_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CSharp4Parser.IF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def if_body(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.If_bodyContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.If_bodyContext,i)


        def ELSE(self):
            return self.getToken(CSharp4Parser.ELSE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_if_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterIf_statement"):
                listener.enterIf_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIf_statement"):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = CSharp4Parser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.match(CSharp4Parser.IF)
            self.state = 1817
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1818
            self.boolean_expression()
            self.state = 1819
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1820
            self.if_body()
            self.state = 1823
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1821
                self.match(CSharp4Parser.ELSE)
                self.state = 1822
                self.if_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Switch_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(CSharp4Parser.SWITCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def switch_block(self):
            return self.getTypedRuleContext(CSharp4Parser.Switch_blockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterSwitch_statement"):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSwitch_statement"):
                listener.exitSwitch_statement(self)




    def switch_statement(self):

        localctx = CSharp4Parser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_switch_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.match(CSharp4Parser.SWITCH)
            self.state = 1826
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1827
            self.expression()
            self.state = 1828
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1829
            self.switch_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_blockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Switch_blockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def switch_sections(self):
            return self.getTypedRuleContext(CSharp4Parser.Switch_sectionsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_block

        def enterRule(self, listener):
            if hasattr(listener, "enterSwitch_block"):
                listener.enterSwitch_block(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSwitch_block"):
                listener.exitSwitch_block(self)




    def switch_block(self):

        localctx = CSharp4Parser.Switch_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_switch_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 1833
            _la = self._input.LA(1)
            if _la==CSharp4Parser.CASE or _la==CSharp4Parser.DEFAULT:
                self.state = 1832
                self.switch_sections()


            self.state = 1835
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Switch_sectionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def switch_section(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Switch_sectionContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_sections

        def enterRule(self, listener):
            if hasattr(listener, "enterSwitch_sections"):
                listener.enterSwitch_sections(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSwitch_sections"):
                listener.exitSwitch_sections(self)




    def switch_sections(self):

        localctx = CSharp4Parser.Switch_sectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_switch_sections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.switch_section()
            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.CASE or _la==CSharp4Parser.DEFAULT:
                self.state = 1838
                self.switch_section()
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Switch_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def switch_labels(self):
            return self.getTypedRuleContext(CSharp4Parser.Switch_labelsContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_section

        def enterRule(self, listener):
            if hasattr(listener, "enterSwitch_section"):
                listener.enterSwitch_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSwitch_section"):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharp4Parser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self.switch_labels()
            self.state = 1845
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_labelsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Switch_labelsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def switch_label(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_labels

        def enterRule(self, listener):
            if hasattr(listener, "enterSwitch_labels"):
                listener.enterSwitch_labels(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSwitch_labels"):
                listener.exitSwitch_labels(self)




    def switch_labels(self):

        localctx = CSharp4Parser.Switch_labelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_switch_labels)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.switch_label()
            self.state = 1851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1848
                    self.switch_label() 
                self.state = 1853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_labelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Switch_labelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharp4Parser.CASE, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_label

        def enterRule(self, listener):
            if hasattr(listener, "enterSwitch_label"):
                listener.enterSwitch_label(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSwitch_label"):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharp4Parser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_switch_label)
        try:
            self.state = 1860
            token = self._input.LA(1)
            if token in [CSharp4Parser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self.match(CSharp4Parser.CASE)
                self.state = 1855
                self.constant_expression()
                self.state = 1856
                self.match(CSharp4Parser.COLON)

            elif token in [CSharp4Parser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1858
                self.match(CSharp4Parser.DEFAULT)
                self.state = 1859
                self.match(CSharp4Parser.COLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Iteration_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Iteration_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def while_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.While_statementContext,0)


        def do_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Do_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.For_statementContext,0)


        def foreach_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Foreach_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_iteration_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterIteration_statement"):
                listener.enterIteration_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIteration_statement"):
                listener.exitIteration_statement(self)




    def iteration_statement(self):

        localctx = CSharp4Parser.Iteration_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_iteration_statement)
        try:
            self.state = 1866
            token = self._input.LA(1)
            if token in [CSharp4Parser.WHILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1862
                self.while_statement()

            elif token in [CSharp4Parser.DO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1863
                self.do_statement()

            elif token in [CSharp4Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1864
                self.for_statement()

            elif token in [CSharp4Parser.FOREACH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1865
                self.foreach_statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.While_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(CSharp4Parser.WHILE, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_while_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterWhile_statement"):
                listener.enterWhile_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWhile_statement"):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = CSharp4Parser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.match(CSharp4Parser.WHILE)
            self.state = 1869
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1870
            self.boolean_expression()
            self.state = 1871
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1872
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Do_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(CSharp4Parser.DO, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def WHILE(self):
            return self.getToken(CSharp4Parser.WHILE, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_do_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterDo_statement"):
                listener.enterDo_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDo_statement"):
                listener.exitDo_statement(self)




    def do_statement(self):

        localctx = CSharp4Parser.Do_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_do_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            self.match(CSharp4Parser.DO)
            self.state = 1875
            self.embedded_statement()
            self.state = 1876
            self.match(CSharp4Parser.WHILE)
            self.state = 1877
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1878
            self.boolean_expression()
            self.state = 1879
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1880
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.For_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(CSharp4Parser.FOR, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def SEMICOLON(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.SEMICOLON)
            else:
                return self.getToken(CSharp4Parser.SEMICOLON, i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def for_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.For_initializerContext,0)


        def for_condition(self):
            return self.getTypedRuleContext(CSharp4Parser.For_conditionContext,0)


        def for_iterator(self):
            return self.getTypedRuleContext(CSharp4Parser.For_iteratorContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_for_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterFor_statement"):
                listener.enterFor_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFor_statement"):
                listener.exitFor_statement(self)




    def for_statement(self):

        localctx = CSharp4Parser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1882
            self.match(CSharp4Parser.FOR)
            self.state = 1883
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1885
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 1884
                self.for_initializer()


            self.state = 1887
            self.match(CSharp4Parser.SEMICOLON)
            self.state = 1889
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 1888
                self.for_condition()


            self.state = 1891
            self.match(CSharp4Parser.SEMICOLON)
            self.state = 1893
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 1892
                self.for_iterator()


            self.state = 1895
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1896
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.For_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_declarationContext,0)


        def statement_expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_expression_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_for_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterFor_initializer"):
                listener.enterFor_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFor_initializer"):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharp4Parser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_for_initializer)
        try:
            self.state = 1900
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1898
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1899
                self.statement_expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.For_conditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_for_condition

        def enterRule(self, listener):
            if hasattr(listener, "enterFor_condition"):
                listener.enterFor_condition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFor_condition"):
                listener.exitFor_condition(self)




    def for_condition(self):

        localctx = CSharp4Parser.For_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_for_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.boolean_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_iteratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.For_iteratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def statement_expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_expression_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_for_iterator

        def enterRule(self, listener):
            if hasattr(listener, "enterFor_iterator"):
                listener.enterFor_iterator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFor_iterator"):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharp4Parser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_for_iterator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.statement_expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Statement_expression_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def statement_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Statement_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Statement_expressionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_statement_expression_list

        def enterRule(self, listener):
            if hasattr(listener, "enterStatement_expression_list"):
                listener.enterStatement_expression_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatement_expression_list"):
                listener.exitStatement_expression_list(self)




    def statement_expression_list(self):

        localctx = CSharp4Parser.Statement_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_statement_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.statement_expression()
            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1907
                self.match(CSharp4Parser.COMMA)
                self.state = 1908
                self.statement_expression()
                self.state = 1913
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreach_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Foreach_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(CSharp4Parser.FOREACH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def local_variable_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_foreach_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterForeach_statement"):
                listener.enterForeach_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeach_statement"):
                listener.exitForeach_statement(self)




    def foreach_statement(self):

        localctx = CSharp4Parser.Foreach_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_foreach_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(CSharp4Parser.FOREACH)
            self.state = 1915
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1916
            self.local_variable_type121()
            self.state = 1917
            self.identifier()
            self.state = 1918
            self.match(CSharp4Parser.IN)
            self.state = 1919
            self.expression()
            self.state = 1920
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1921
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jump_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Jump_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def break_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Continue_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Goto_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Throw_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_jump_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterJump_statement"):
                listener.enterJump_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJump_statement"):
                listener.exitJump_statement(self)




    def jump_statement(self):

        localctx = CSharp4Parser.Jump_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_jump_statement)
        try:
            self.state = 1928
            token = self._input.LA(1)
            if token in [CSharp4Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1923
                self.break_statement()

            elif token in [CSharp4Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1924
                self.continue_statement()

            elif token in [CSharp4Parser.GOTO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1925
                self.goto_statement()

            elif token in [CSharp4Parser.RETURN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1926
                self.return_statement()

            elif token in [CSharp4Parser.THROW]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1927
                self.throw_statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Break_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(CSharp4Parser.BREAK, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_break_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterBreak_statement"):
                listener.enterBreak_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBreak_statement"):
                listener.exitBreak_statement(self)




    def break_statement(self):

        localctx = CSharp4Parser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.match(CSharp4Parser.BREAK)
            self.state = 1931
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Continue_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(CSharp4Parser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_continue_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterContinue_statement"):
                listener.enterContinue_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitContinue_statement"):
                listener.exitContinue_statement(self)




    def continue_statement(self):

        localctx = CSharp4Parser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.match(CSharp4Parser.CONTINUE)
            self.state = 1934
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Goto_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(CSharp4Parser.GOTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def CASE(self):
            return self.getToken(CSharp4Parser.CASE, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_goto_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterGoto_statement"):
                listener.enterGoto_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoto_statement"):
                listener.exitGoto_statement(self)




    def goto_statement(self):

        localctx = CSharp4Parser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_goto_statement)
        try:
            self.state = 1948
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1936
                self.match(CSharp4Parser.GOTO)
                self.state = 1937
                self.identifier()
                self.state = 1938
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1940
                self.match(CSharp4Parser.GOTO)
                self.state = 1941
                self.match(CSharp4Parser.CASE)
                self.state = 1942
                self.constant_expression()
                self.state = 1943
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1945
                self.match(CSharp4Parser.GOTO)
                self.state = 1946
                self.match(CSharp4Parser.DEFAULT)
                self.state = 1947
                self.match(CSharp4Parser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Return_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CSharp4Parser.RETURN, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_return_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterReturn_statement"):
                listener.enterReturn_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReturn_statement"):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = CSharp4Parser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            self.match(CSharp4Parser.RETURN)
            self.state = 1952
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 1951
                self.expression()


            self.state = 1954
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Throw_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Throw_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharp4Parser.THROW, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_throw_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterThrow_statement"):
                listener.enterThrow_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitThrow_statement"):
                listener.exitThrow_statement(self)




    def throw_statement(self):

        localctx = CSharp4Parser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_throw_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            self.match(CSharp4Parser.THROW)
            self.state = 1958
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 1957
                self.expression()


            self.state = 1960
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Try_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(CSharp4Parser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Catch_clausesContext,0)


        def finally_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Finally_clauseContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_try_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterTry_statement"):
                listener.enterTry_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTry_statement"):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = CSharp4Parser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            self.match(CSharp4Parser.TRY)
            self.state = 1963
            self.block()
            self.state = 1965
            _la = self._input.LA(1)
            if _la==CSharp4Parser.CATCH:
                self.state = 1964
                self.catch_clauses()


            self.state = 1968
            _la = self._input.LA(1)
            if _la==CSharp4Parser.FINALLY:
                self.state = 1967
                self.finally_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Catch_clausesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Specific_catch_clausesContext,0)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_catch_clauses

        def enterRule(self, listener):
            if hasattr(listener, "enterCatch_clauses"):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCatch_clauses"):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharp4Parser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 1975
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1970
                self.specific_catch_clauses()
                self.state = 1972
                _la = self._input.LA(1)
                if _la==CSharp4Parser.CATCH:
                    self.state = 1971
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1974
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Specific_catch_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Specific_catch_clausesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Specific_catch_clauseContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_specific_catch_clauses

        def enterRule(self, listener):
            if hasattr(listener, "enterSpecific_catch_clauses"):
                listener.enterSpecific_catch_clauses(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpecific_catch_clauses"):
                listener.exitSpecific_catch_clauses(self)




    def specific_catch_clauses(self):

        localctx = CSharp4Parser.Specific_catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_specific_catch_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            self.specific_catch_clause()
            self.state = 1981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1978
                    self.specific_catch_clause() 
                self.state = 1983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Specific_catch_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Specific_catch_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharp4Parser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def class_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_type121Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_specific_catch_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterSpecific_catch_clause"):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpecific_catch_clause"):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharp4Parser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(CSharp4Parser.CATCH)
            self.state = 1985
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1986
            self.class_type121()
            self.state = 1988
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CSharp4Parser.ON - 67)) | (1 << (CSharp4Parser.ORDERBY - 67)) | (1 << (CSharp4Parser.PARTIAL - 67)) | (1 << (CSharp4Parser.REMOVE - 67)) | (1 << (CSharp4Parser.SELECT - 67)) | (1 << (CSharp4Parser.SET - 67)) | (1 << (CSharp4Parser.WHERE - 67)) | (1 << (CSharp4Parser.YIELD - 67)) | (1 << (CSharp4Parser.IDENTIFIER - 67)))) != 0):
                self.state = 1987
                self.identifier()


            self.state = 1990
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1991
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_catch_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.General_catch_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharp4Parser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_general_catch_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterGeneral_catch_clause"):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGeneral_catch_clause"):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharp4Parser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_general_catch_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.match(CSharp4Parser.CATCH)
            self.state = 1994
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Finally_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Finally_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharp4Parser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_finally_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterFinally_clause"):
                listener.enterFinally_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFinally_clause"):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharp4Parser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.match(CSharp4Parser.FINALLY)
            self.state = 1997
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Checked_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Checked_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharp4Parser.CHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_checked_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterChecked_statement"):
                listener.enterChecked_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChecked_statement"):
                listener.exitChecked_statement(self)




    def checked_statement(self):

        localctx = CSharp4Parser.Checked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_checked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.match(CSharp4Parser.CHECKED)
            self.state = 2000
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unchecked_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Unchecked_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharp4Parser.UNCHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unchecked_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterUnchecked_statement"):
                listener.enterUnchecked_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnchecked_statement"):
                listener.exitUnchecked_statement(self)




    def unchecked_statement(self):

        localctx = CSharp4Parser.Unchecked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_unchecked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.match(CSharp4Parser.UNCHECKED)
            self.state = 2003
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Lock_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(CSharp4Parser.LOCK, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_lock_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterLock_statement"):
                listener.enterLock_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLock_statement"):
                listener.exitLock_statement(self)




    def lock_statement(self):

        localctx = CSharp4Parser.Lock_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_lock_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.match(CSharp4Parser.LOCK)
            self.state = 2006
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2007
            self.expression()
            self.state = 2008
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2009
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Using_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharp4Parser.Resource_acquisitionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterUsing_statement"):
                listener.enterUsing_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUsing_statement"):
                listener.exitUsing_statement(self)




    def using_statement(self):

        localctx = CSharp4Parser.Using_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_using_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self.match(CSharp4Parser.USING)
            self.state = 2012
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2013
            self.resource_acquisition()
            self.state = 2014
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2015
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Resource_acquisitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Resource_acquisitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_resource_acquisition

        def enterRule(self, listener):
            if hasattr(listener, "enterResource_acquisition"):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResource_acquisition"):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharp4Parser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_resource_acquisition)
        try:
            self.state = 2019
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2017
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2018
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Yield_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def yield_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Yield_contextual_keywordContext,0)


        def RETURN(self):
            return self.getToken(CSharp4Parser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(CSharp4Parser.BREAK, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_yield_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterYield_statement"):
                listener.enterYield_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitYield_statement"):
                listener.exitYield_statement(self)




    def yield_statement(self):

        localctx = CSharp4Parser.Yield_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_yield_statement)
        try:
            self.state = 2030
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2021
                self.yield_contextual_keyword()
                self.state = 2022
                self.match(CSharp4Parser.RETURN)
                self.state = 2023
                self.expression()
                self.state = 2024
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2026
                self.yield_contextual_keyword()
                self.state = 2027
                self.match(CSharp4Parser.BREAK)
                self.state = 2028
                self.match(CSharp4Parser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compilation_unitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Compilation_unitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharp4Parser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharp4Parser.BYTE_ORDER_MARK, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharp4Parser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_directivesContext,0)


        def global_attribute_section(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Global_attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Global_attribute_sectionContext,i)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_compilation_unit

        def enterRule(self, listener):
            if hasattr(listener, "enterCompilation_unit"):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompilation_unit"):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = CSharp4Parser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            _la = self._input.LA(1)
            if _la==CSharp4Parser.BYTE_ORDER_MARK:
                self.state = 2032
                self.match(CSharp4Parser.BYTE_ORDER_MARK)


            self.state = 2036
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 2035
                self.extern_alias_directives()


            self.state = 2039
            _la = self._input.LA(1)
            if _la==CSharp4Parser.USING:
                self.state = 2038
                self.using_directives()


            self.state = 2044
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2041
                    self.global_attribute_section() 
                self.state = 2046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

            self.state = 2048
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NAMESPACE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.STRUCT - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0):
                self.state = 2047
                self.namespace_member_declarations()


            self.state = 2050
            self.match(CSharp4Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Namespace_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharp4Parser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterNamespace_declaration"):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamespace_declaration"):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharp4Parser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2052
            self.match(CSharp4Parser.NAMESPACE)
            self.state = 2053
            localctx.qi = self.qualified_identifier()
            self.state = 2054
            self.namespace_body()
            self.state = 2056
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 2055
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Qualified_identifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DOT)
            else:
                return self.getToken(CSharp4Parser.DOT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_qualified_identifier

        def enterRule(self, listener):
            if hasattr(listener, "enterQualified_identifier"):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualified_identifier"):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharp4Parser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2058
            self.identifier()
            self.state = 2063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.DOT:
                self.state = 2059
                self.match(CSharp4Parser.DOT)
                self.state = 2060
                self.identifier()
                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Namespace_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharp4Parser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_body

        def enterRule(self, listener):
            if hasattr(listener, "enterNamespace_body"):
                listener.enterNamespace_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamespace_body"):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharp4Parser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2068
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 2067
                self.extern_alias_directives()


            self.state = 2071
            _la = self._input.LA(1)
            if _la==CSharp4Parser.USING:
                self.state = 2070
                self.using_directives()


            self.state = 2074
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NAMESPACE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.STRUCT - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0):
                self.state = 2073
                self.namespace_member_declarations()


            self.state = 2076
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extern_alias_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Extern_alias_directivesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_extern_alias_directives

        def enterRule(self, listener):
            if hasattr(listener, "enterExtern_alias_directives"):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExtern_alias_directives"):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharp4Parser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2078
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 2081 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extern_alias_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Extern_alias_directiveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def alias_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Alias_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_extern_alias_directive

        def enterRule(self, listener):
            if hasattr(listener, "enterExtern_alias_directive"):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExtern_alias_directive"):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharp4Parser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            self.match(CSharp4Parser.EXTERN)
            self.state = 2084
            self.alias_contextual_keyword()
            self.state = 2085
            self.identifier()
            self.state = 2086
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Using_directivesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_directives

        def enterRule(self, listener):
            if hasattr(listener, "enterUsing_directives"):
                listener.enterUsing_directives(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUsing_directives"):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharp4Parser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_using_directives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2088
                self.using_directive()
                self.state = 2091 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CSharp4Parser.USING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Using_directiveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def using_alias_directive(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_alias_directiveContext,0)


        def using_namespace_directive(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_namespace_directiveContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_directive

        def enterRule(self, listener):
            if hasattr(listener, "enterUsing_directive"):
                listener.enterUsing_directive(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUsing_directive"):
                listener.exitUsing_directive(self)




    def using_directive(self):

        localctx = CSharp4Parser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_using_directive)
        try:
            self.state = 2095
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2093
                self.using_alias_directive()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2094
                self.using_namespace_directive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_alias_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Using_alias_directiveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def namespace_or_type121_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_or_type121_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_alias_directive

        def enterRule(self, listener):
            if hasattr(listener, "enterUsing_alias_directive"):
                listener.enterUsing_alias_directive(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUsing_alias_directive"):
                listener.exitUsing_alias_directive(self)




    def using_alias_directive(self):

        localctx = CSharp4Parser.Using_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_using_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            self.match(CSharp4Parser.USING)
            self.state = 2098
            self.identifier()
            self.state = 2099
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 2100
            self.namespace_or_type121_name()
            self.state = 2101
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_namespace_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Using_namespace_directiveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def namespace_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_namespace_directive

        def enterRule(self, listener):
            if hasattr(listener, "enterUsing_namespace_directive"):
                listener.enterUsing_namespace_directive(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUsing_namespace_directive"):
                listener.exitUsing_namespace_directive(self)




    def using_namespace_directive(self):

        localctx = CSharp4Parser.Using_namespace_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_using_namespace_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            self.match(CSharp4Parser.USING)
            self.state = 2104
            self.namespace_name()
            self.state = 2105
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Namespace_member_declarationsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_member_declarations

        def enterRule(self, listener):
            if hasattr(listener, "enterNamespace_member_declarations"):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamespace_member_declarations"):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharp4Parser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_namespace_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2107
                self.namespace_member_declaration()
                self.state = 2110 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NAMESPACE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.STRUCT - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Namespace_member_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_declarationContext,0)


        def type121_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_declarationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_member_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterNamespace_member_declaration"):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamespace_member_declaration"):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharp4Parser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_namespace_member_declaration)
        try:
            self.state = 2114
            token = self._input.LA(1)
            if token in [CSharp4Parser.NAMESPACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2112
                self.namespace_declaration()

            elif token in [CSharp4Parser.ABSTRACT, CSharp4Parser.CLASS, CSharp4Parser.DELEGATE, CSharp4Parser.ENUM, CSharp4Parser.EXTERN, CSharp4Parser.INTERFACE, CSharp4Parser.INTERNAL, CSharp4Parser.NEW, CSharp4Parser.OVERRIDE, CSharp4Parser.PARTIAL, CSharp4Parser.PRIVATE, CSharp4Parser.PROTECTED, CSharp4Parser.PUBLIC, CSharp4Parser.READONLY, CSharp4Parser.SEALED, CSharp4Parser.STATIC, CSharp4Parser.STRUCT, CSharp4Parser.UNSAFE, CSharp4Parser.VIRTUAL, CSharp4Parser.VOLATILE, CSharp4Parser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2113
                self.type121_declaration()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_declaration"):
                listener.enterType121_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_declaration"):
                listener.exitType121_declaration(self)




    def type121_declaration(self):

        localctx = CSharp4Parser.Type121_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_type121_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2116
                self.attributes()


            self.state = 2120
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)))) != 0):
                self.state = 2119
                self.all_member_modifiers()


            self.state = 2127
            token = self._input.LA(1)
            if token in [CSharp4Parser.CLASS]:
                self.state = 2122
                self.class_definition()

            elif token in [CSharp4Parser.STRUCT]:
                self.state = 2123
                self.struct_definition()

            elif token in [CSharp4Parser.INTERFACE]:
                self.state = 2124
                self.interface_definition()

            elif token in [CSharp4Parser.ENUM]:
                self.state = 2125
                self.enum_definition()

            elif token in [CSharp4Parser.DELEGATE]:
                self.state = 2126
                self.delegate_definition()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_alias_memberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Qualified_alias_memberContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharp4Parser.DOUBLE_COLON, 0)

        def type121_argument_list_opt(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_argument_list_optContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_qualified_alias_member

        def enterRule(self, listener):
            if hasattr(listener, "enterQualified_alias_member"):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualified_alias_member"):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharp4Parser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.identifier()
            self.state = 2130
            self.match(CSharp4Parser.DOUBLE_COLON)
            self.state = 2131
            self.identifier()
            self.state = 2132
            self.type121_argument_list_opt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def class_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_modifiersContext,0)


        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_baseContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_declaration"):
                listener.enterClass_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_declaration"):
                listener.exitClass_declaration(self)




    def class_declaration(self):

        localctx = CSharp4Parser.Class_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_class_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2134
                self.attributes()


            self.state = 2138
            _la = self._input.LA(1)
            if _la==CSharp4Parser.ABSTRACT or _la==CSharp4Parser.INTERNAL or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)))) != 0):
                self.state = 2137
                self.class_modifiers()


            self.state = 2141
            _la = self._input.LA(1)
            if _la==CSharp4Parser.PARTIAL:
                self.state = 2140
                self.partial_contextual_keyword()


            self.state = 2143
            self.match(CSharp4Parser.CLASS)
            self.state = 2144
            self.identifier()
            self.state = 2146
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 2145
                self.type121_parameter_list()


            self.state = 2149
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 2148
                self.class_base()


            self.state = 2152
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 2151
                self.type121_parameter_constraints_clauses()


            self.state = 2154
            self.class_body()
            self.state = 2156
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 2155
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def class_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Class_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Class_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_modifiers"):
                listener.enterClass_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_modifiers"):
                listener.exitClass_modifiers(self)




    def class_modifiers(self):

        localctx = CSharp4Parser.Class_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_class_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            self.class_modifier()
            self.state = 2162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.ABSTRACT or _la==CSharp4Parser.INTERNAL or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)))) != 0):
                self.state = 2159
                self.class_modifier()
                self.state = 2164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def class_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_modifier"):
                listener.enterClass_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_modifier"):
                listener.exitClass_modifier(self)




    def class_modifier(self):

        localctx = CSharp4Parser.Class_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_class_modifier)
        try:
            self.state = 2174
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2165
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2166
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2167
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2168
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2169
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2170
                self.match(CSharp4Parser.ABSTRACT)

            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2171
                self.match(CSharp4Parser.SEALED)

            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2172
                self.match(CSharp4Parser.STATIC)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2173
                self.class_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_parameter_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def type121_parameters(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parametersContext,0)


        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_parameter_list

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_parameter_list"):
                listener.enterType121_parameter_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_parameter_list"):
                listener.exitType121_parameter_list(self)




    def type121_parameter_list(self):

        localctx = CSharp4Parser.Type121_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_type121_parameter_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2176
            self.match(CSharp4Parser.LT)
            self.state = 2177
            self.type121_parameters()
            self.state = 2178
            self.match(CSharp4Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_parametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121_parameterContext,i)


        def attributes(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.AttributesContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_parameters

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_parameters"):
                listener.enterType121_parameters(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_parameters"):
                listener.exitType121_parameters(self)




    def type121_parameters(self):

        localctx = CSharp4Parser.Type121_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_type121_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2180
                self.attributes()


            self.state = 2183
            self.type121_parameter()
            self.state = 2191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2184
                self.match(CSharp4Parser.COMMA)
                self.state = 2186
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 2185
                    self.attributes()


                self.state = 2188
                self.type121_parameter()
                self.state = 2193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_parameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_parameter

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_parameter"):
                listener.enterType121_parameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_parameter"):
                listener.exitType121_parameter(self)




    def type121_parameter(self):

        localctx = CSharp4Parser.Type121_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_type121_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_baseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_baseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def class_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_type121Context,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def interface_type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_type121Context,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_base

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_base"):
                listener.enterClass_base(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_base"):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharp4Parser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2196
            self.match(CSharp4Parser.COLON)
            self.state = 2197
            self.class_type121()
            self.state = 2202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2198
                self.match(CSharp4Parser.COMMA)
                self.state = 2199
                self.interface_type121()
                self.state = 2204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_type121_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_type121_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def interface_type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_type121Context,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_type121_list

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_type121_list"):
                listener.enterInterface_type121_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_type121_list"):
                listener.exitInterface_type121_list(self)




    def interface_type121_list(self):

        localctx = CSharp4Parser.Interface_type121_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_interface_type121_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.interface_type121()
            self.state = 2210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2206
                self.match(CSharp4Parser.COMMA)
                self.state = 2207
                self.interface_type121()
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_parameter_constraints_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_parameter_constraints_clausesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_parameter_constraints_clause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_parameter_constraints_clauses

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_parameter_constraints_clauses"):
                listener.enterType121_parameter_constraints_clauses(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_parameter_constraints_clauses"):
                listener.exitType121_parameter_constraints_clauses(self)




    def type121_parameter_constraints_clauses(self):

        localctx = CSharp4Parser.Type121_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_type121_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self.type121_parameter_constraints_clause()
            self.state = 2217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.WHERE:
                self.state = 2214
                self.type121_parameter_constraints_clause()
                self.state = 2219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_parameter_constraints_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_parameter_constraints_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def where_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Where_contextual_keywordContext,0)


        def type121_parameter(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameterContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def type121_parameter_constraints(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_parameter_constraints_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_parameter_constraints_clause"):
                listener.enterType121_parameter_constraints_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_parameter_constraints_clause"):
                listener.exitType121_parameter_constraints_clause(self)




    def type121_parameter_constraints_clause(self):

        localctx = CSharp4Parser.Type121_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_type121_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2220
            self.where_contextual_keyword()
            self.state = 2221
            self.type121_parameter()
            self.state = 2222
            self.match(CSharp4Parser.COLON)
            self.state = 2223
            self.type121_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_parameter_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_parameter_constraintsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_constraintContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharp4Parser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_parameter_constraints

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_parameter_constraints"):
                listener.enterType121_parameter_constraints(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_parameter_constraints"):
                listener.exitType121_parameter_constraints(self)




    def type121_parameter_constraints(self):

        localctx = CSharp4Parser.Type121_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_type121_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 2235
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2225
                self.constructor_constraint()

            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.CLASS, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2226
                self.primary_constraint()
                self.state = 2229
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 2227
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2228
                    self.secondary_constraints()


                self.state = 2233
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 2231
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2232
                    self.constructor_constraint()



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Primary_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def class_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_type121Context,0)


        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_primary_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterPrimary_constraint"):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrimary_constraint"):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharp4Parser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_primary_constraint)
        try:
            self.state = 2240
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2237
                self.class_type121()

            elif token in [CSharp4Parser.CLASS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2238
                self.match(CSharp4Parser.CLASS)

            elif token in [CSharp4Parser.STRUCT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2239
                self.match(CSharp4Parser.STRUCT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Secondary_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Secondary_constraintsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def interface_type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_type121Context,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_secondary_constraints

        def enterRule(self, listener):
            if hasattr(listener, "enterSecondary_constraints"):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSecondary_constraints"):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharp4Parser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2242
            self.interface_type121()
            self.state = 2247
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2243
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2244
                    self.interface_type121() 
                self.state = 2249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_constraint"):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_constraint"):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharp4Parser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(CSharp4Parser.NEW)
            self.state = 2251
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2252
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_body

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_body"):
                listener.enterClass_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_body"):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharp4Parser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2254
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2256
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.Pp_directive) | (1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.STRUCT - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0) or _la==CSharp4Parser.TILDE:
                self.state = 2255
                self.class_member_declarations()


            self.state = 2258
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_member_declarationsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_member_declarations

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_member_declarations"):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_member_declarations"):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharp4Parser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2260
                self.class_member_declaration()
                self.state = 2263 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.Pp_directive) | (1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.STRUCT - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0) or _la==CSharp4Parser.TILDE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_member_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Common_member_declarationContext,0)


        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def destructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Destructor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.All_member_modifiersContext,0)


        def Pp_directive(self):
            return self.getToken(CSharp4Parser.Pp_directive, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_member_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_member_declaration"):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_member_declaration"):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharp4Parser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_class_member_declaration)
        self._la = 0 # Token type
        try:
            self.state = 2281
            token = self._input.LA(1)
            if token in [CSharp4Parser.ABSTRACT, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.DECIMAL, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.ENUM, CSharp4Parser.EQUALS, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.EXTERN, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.IMPLICIT, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTERNAL, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.OVERRIDE, CSharp4Parser.PARTIAL, CSharp4Parser.PRIVATE, CSharp4Parser.PROTECTED, CSharp4Parser.PUBLIC, CSharp4Parser.READONLY, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SEALED, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STATIC, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.VIRTUAL, CSharp4Parser.VOID, CSharp4Parser.VOLATILE, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.OPEN_BRACKET, CSharp4Parser.TILDE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2266
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 2265
                    self.attributes()


                self.state = 2269
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 2268
                    self.all_member_modifiers()


                self.state = 2278
                token = self._input.LA(1)
                if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.DECIMAL, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.ENUM, CSharp4Parser.EQUALS, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.IMPLICIT, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT, CSharp4Parser.VOID, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                    self.state = 2271
                    self.common_member_declaration()

                elif token in [CSharp4Parser.TILDE]:
                    self.state = 2272
                    self.match(CSharp4Parser.TILDE)
                    self.state = 2273
                    self.identifier()
                    self.state = 2274
                    self.match(CSharp4Parser.OPEN_PARENS)
                    self.state = 2275
                    self.match(CSharp4Parser.CLOSE_PARENS)
                    self.state = 2276
                    self.destructor_body()

                else:
                    raise NoViableAltException(self)


            elif token in [CSharp4Parser.Pp_directive]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2280
                self.match(CSharp4Parser.Pp_directive)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_member_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.All_member_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.m = None # All_member_modifierContext

        def all_member_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_all_member_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterAll_member_modifiers"):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAll_member_modifiers"):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharp4Parser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2284 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2283
                    localctx.m = self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2286 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_member_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.All_member_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharp4Parser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharp4Parser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_all_member_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterAll_member_modifier"):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAll_member_modifier"):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharp4Parser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_all_member_modifier)
        try:
            self.state = 2303
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2288
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2289
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2290
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2291
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2292
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.READONLY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2293
                self.match(CSharp4Parser.READONLY)

            elif token in [CSharp4Parser.VOLATILE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2294
                self.match(CSharp4Parser.VOLATILE)

            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2295
                self.match(CSharp4Parser.VIRTUAL)

            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2296
                self.match(CSharp4Parser.SEALED)

            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2297
                self.match(CSharp4Parser.OVERRIDE)

            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2298
                self.match(CSharp4Parser.ABSTRACT)

            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2299
                self.match(CSharp4Parser.STATIC)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2300
                self.match(CSharp4Parser.UNSAFE)

            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2301
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.PARTIAL]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2302
                self.partial_contextual_keyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Common_member_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_declaration2Context,0)


        def type121d_member_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121d_member_declarationContext,0)


        def event_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_declaration2Context,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Conversion_operator_declaratorContext,0)


        def operator_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_bodyContext,0)


        def constructor_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_declaration2Context,0)


        def type121_void(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_voidContext,0)


        def method_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_declaration2Context,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_definitionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_common_member_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterCommon_member_declaration"):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommon_member_declaration"):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharp4Parser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_common_member_declaration)
        try:
            self.state = 2320
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2305
                self.constant_declaration2()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2306
                self.type121d_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2307
                self.event_declaration2()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2308
                self.conversion_operator_declarator()
                self.state = 2309
                self.operator_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2311
                self.constructor_declaration2()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2312
                self.type121_void()
                self.state = 2313
                self.method_declaration2()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2315
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2316
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2317
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2318
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2319
                self.delegate_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121d_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121d_member_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def interface_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_type121Context,0)


        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def indexer_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Indexer_declaration2Context,0)


        def method_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_declaration2Context,0)


        def property_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Property_declaration2Context,0)


        def operator_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_declaration2Context,0)


        def field_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Field_declaration2Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121d_member_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterType121d_member_declaration"):
                listener.enterType121d_member_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121d_member_declaration"):
                listener.exitType121d_member_declaration(self)




    def type121d_member_declaration(self):

        localctx = CSharp4Parser.Type121d_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_type121d_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.type121()
            self.state = 2332
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 2323
                self.interface_type121()
                self.state = 2324
                self.match(CSharp4Parser.DOT)
                self.state = 2325
                self.indexer_declaration2()
                pass

            elif la_ == 2:
                self.state = 2327
                self.method_declaration2()
                pass

            elif la_ == 3:
                self.state = 2328
                self.property_declaration2()
                pass

            elif la_ == 4:
                self.state = 2329
                self.indexer_declaration2()
                pass

            elif la_ == 5:
                self.state = 2330
                self.operator_declaration2()
                pass

            elif la_ == 6:
                self.state = 2331
                self.field_declaration2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constant_declaratorsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Constant_declaratorContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constant_declarators

        def enterRule(self, listener):
            if hasattr(listener, "enterConstant_declarators"):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstant_declarators"):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharp4Parser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self.constant_declarator()
            self.state = 2339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2335
                self.match(CSharp4Parser.COMMA)
                self.state = 2336
                self.constant_declarator()
                self.state = 2341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constant_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constant_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterConstant_declarator"):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstant_declarator"):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharp4Parser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2342
            self.identifier()
            self.state = 2343
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 2344
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Variable_declaratorsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Variable_declaratorContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_declarators

        def enterRule(self, listener):
            if hasattr(listener, "enterVariable_declarators"):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariable_declarators"):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharp4Parser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2346
            self.variable_declarator()
            self.state = 2351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2347
                self.match(CSharp4Parser.COMMA)
                self.state = 2348
                self.variable_declarator()
                self.state = 2353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Variable_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterVariable_declarator"):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariable_declarator"):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharp4Parser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_variable_declarator)
        try:
            self.state = 2359
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2354
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2355
                self.identifier()
                self.state = 2356
                self.match(CSharp4Parser.ASSIGNMENT)
                self.state = 2357
                self.variable_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Variable_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterVariable_initializer"):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariable_initializer"):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharp4Parser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_variable_initializer)
        try:
            self.state = 2363
            token = self._input.LA(1)
            if token in [CSharp4Parser.T__0, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2361
                self.expression()

            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2362
                self.array_initializer()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def method_header(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_headerContext,0)


        def method_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_declaration"):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_declaration"):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharp4Parser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2365
            self.method_header()
            self.state = 2366
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_headerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_headerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def return_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_type121Context,0)


        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def method_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_modifiersContext,0)


        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_header

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_header"):
                listener.enterMethod_header(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_header"):
                listener.exitMethod_header(self)




    def method_header(self):

        localctx = CSharp4Parser.Method_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_method_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2369
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2368
                self.attributes()


            self.state = 2372
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)))) != 0):
                self.state = 2371
                self.method_modifiers()


            self.state = 2375
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2374
                self.partial_contextual_keyword()


            self.state = 2377
            self.return_type121()
            self.state = 2378
            self.member_name()
            self.state = 2380
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 2379
                self.type121_parameter_list()


            self.state = 2382
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2384
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                self.state = 2383
                self.formal_parameter_list()


            self.state = 2386
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2388
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 2387
                self.type121_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def method_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Method_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_modifiers"):
                listener.enterMethod_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_modifiers"):
                listener.exitMethod_modifiers(self)




    def method_modifiers(self):

        localctx = CSharp4Parser.Method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_method_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2390
                self.method_modifier()
                self.state = 2393 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def method_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_modifier"):
                listener.enterMethod_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_modifier"):
                listener.exitMethod_modifier(self)




    def method_modifier(self):

        localctx = CSharp4Parser.Method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_method_modifier)
        try:
            self.state = 2407
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2395
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2396
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2397
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2398
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2399
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2400
                self.match(CSharp4Parser.STATIC)

            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2401
                self.match(CSharp4Parser.VIRTUAL)

            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2402
                self.match(CSharp4Parser.SEALED)

            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2403
                self.match(CSharp4Parser.OVERRIDE)

            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2404
                self.match(CSharp4Parser.ABSTRACT)

            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2405
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2406
                self.method_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Return_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_return_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterReturn_type121"):
                listener.enterReturn_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReturn_type121"):
                listener.exitReturn_type121(self)




    def return_type121(self):

        localctx = CSharp4Parser.Return_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_return_type121)
        try:
            self.state = 2411
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2409
                self.type121()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2410
                self.match(CSharp4Parser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Member_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def interface_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_name

        def enterRule(self, listener):
            if hasattr(listener, "enterMember_name"):
                listener.enterMember_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMember_name"):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharp4Parser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413
            self.interface_type121()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_body

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_body"):
                listener.enterMethod_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_body"):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharp4Parser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_method_body)
        try:
            self.state = 2417
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2415
                self.block()

            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2416
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formal_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Formal_parameter_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharp4Parser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_formal_parameter_list

        def enterRule(self, listener):
            if hasattr(listener, "enterFormal_parameter_list"):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFormal_parameter_list"):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharp4Parser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 2425
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2419
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2420
                self.fixed_parameters()
                self.state = 2423
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 2421
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2422
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_parametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Fixed_parameterContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_parameters

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_parameters"):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_parameters"):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharp4Parser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self.fixed_parameter()
            self.state = 2432
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2428
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2429
                    self.fixed_parameter() 
                self.state = 2434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_parameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Parameter_modifierContext,0)


        def default_argument(self):
            return self.getTypedRuleContext(CSharp4Parser.Default_argumentContext,0)


        def arglist(self):
            return self.getTypedRuleContext(CSharp4Parser.ArglistContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_parameter

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_parameter"):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_parameter"):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharp4Parser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 2447
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2436
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 2435
                    self.attributes()


                self.state = 2439
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OUT - 70)) | (1 << (CSharp4Parser.REF - 70)) | (1 << (CSharp4Parser.THIS - 70)))) != 0):
                    self.state = 2438
                    self.parameter_modifier()


                self.state = 2441
                self.type121()
                self.state = 2442
                self.identifier()
                self.state = 2444
                _la = self._input.LA(1)
                if _la==CSharp4Parser.ASSIGNMENT:
                    self.state = 2443
                    self.default_argument()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2446
                self.arglist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Default_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_default_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterDefault_argument"):
                listener.enterDefault_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefault_argument"):
                listener.exitDefault_argument(self)




    def default_argument(self):

        localctx = CSharp4Parser.Default_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_default_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2449
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 2450
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Parameter_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_parameter_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterParameter_modifier"):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParameter_modifier"):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharp4Parser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_parameter_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2452
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OUT - 70)) | (1 << (CSharp4Parser.REF - 70)) | (1 << (CSharp4Parser.THIS - 70)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_arrayContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Parameter_arrayContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharp4Parser.PARAMS, 0)

        def array_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_parameter_array

        def enterRule(self, listener):
            if hasattr(listener, "enterParameter_array"):
                listener.enterParameter_array(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParameter_array"):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharp4Parser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2455
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2454
                self.attributes()


            self.state = 2457
            self.match(CSharp4Parser.PARAMS)
            self.state = 2458
            self.array_type121()
            self.state = 2459
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Property_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def property_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Property_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterProperty_declaration"):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProperty_declaration"):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharp4Parser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2462
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2461
                self.attributes()


            self.state = 2465
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)))) != 0):
                self.state = 2464
                self.property_modifiers()


            self.state = 2467
            self.type121()
            self.state = 2468
            self.member_name()
            self.state = 2469
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2470
            self.accessor_declarations()
            self.state = 2471
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Property_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def property_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Property_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Property_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterProperty_modifiers"):
                listener.enterProperty_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProperty_modifiers"):
                listener.exitProperty_modifiers(self)




    def property_modifiers(self):

        localctx = CSharp4Parser.Property_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_property_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2474 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2473
                self.property_modifier()
                self.state = 2476 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Property_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def property_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Property_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterProperty_modifier"):
                listener.enterProperty_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProperty_modifier"):
                listener.exitProperty_modifier(self)




    def property_modifier(self):

        localctx = CSharp4Parser.Property_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_property_modifier)
        try:
            self.state = 2490
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2478
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2479
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2480
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2481
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2482
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2483
                self.match(CSharp4Parser.STATIC)

            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2484
                self.match(CSharp4Parser.VIRTUAL)

            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2485
                self.match(CSharp4Parser.SEALED)

            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2486
                self.match(CSharp4Parser.OVERRIDE)

            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2487
                self.match(CSharp4Parser.ABSTRACT)

            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2488
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2489
                self.property_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Accessor_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Accessor_declarationsContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def get_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Get_contextual_keywordContext,0)


        def accessor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_bodyContext,0)


        def set_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Set_contextual_keywordContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Get_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_accessor_declarations

        def enterRule(self, listener):
            if hasattr(listener, "enterAccessor_declarations"):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAccessor_declarations"):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharp4Parser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2493
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2492
                localctx.attrs = self.attributes()


            self.state = 2496
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)))) != 0):
                self.state = 2495
                localctx.mods = self.accessor_modifier()


            self.state = 2508
            token = self._input.LA(1)
            if token in [CSharp4Parser.GET]:
                self.state = 2498
                self.get_contextual_keyword()
                self.state = 2499
                self.accessor_body()
                self.state = 2501
                _la = self._input.LA(1)
                if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.SET - 56)) | (1 << (CSharp4Parser.OPEN_BRACKET - 56)))) != 0):
                    self.state = 2500
                    self.set_accessor_declaration()



            elif token in [CSharp4Parser.SET]:
                self.state = 2503
                self.set_contextual_keyword()
                self.state = 2504
                self.accessor_body()
                self.state = 2506
                _la = self._input.LA(1)
                if _la==CSharp4Parser.GET or _la==CSharp4Parser.INTERNAL or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CSharp4Parser.PRIVATE - 74)) | (1 << (CSharp4Parser.PROTECTED - 74)) | (1 << (CSharp4Parser.OPEN_BRACKET - 74)))) != 0):
                    self.state = 2505
                    self.get_accessor_declaration()



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_accessor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Get_accessor_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def get_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Get_contextual_keywordContext,0)


        def accessor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_get_accessor_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterGet_accessor_declaration"):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGet_accessor_declaration"):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharp4Parser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2510
                self.attributes()


            self.state = 2514
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)))) != 0):
                self.state = 2513
                self.accessor_modifier()


            self.state = 2516
            self.get_contextual_keyword()
            self.state = 2517
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_accessor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Set_accessor_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def set_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Set_contextual_keywordContext,0)


        def accessor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_set_accessor_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterSet_accessor_declaration"):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSet_accessor_declaration"):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharp4Parser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2519
                self.attributes()


            self.state = 2523
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)))) != 0):
                self.state = 2522
                self.accessor_modifier()


            self.state = 2525
            self.set_contextual_keyword()
            self.state = 2526
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Accessor_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Accessor_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_accessor_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterAccessor_modifier"):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAccessor_modifier"):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharp4Parser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_accessor_modifier)
        try:
            self.state = 2535
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2528
                self.match(CSharp4Parser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2529
                self.match(CSharp4Parser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2530
                self.match(CSharp4Parser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2531
                self.match(CSharp4Parser.PROTECTED)
                self.state = 2532
                self.match(CSharp4Parser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2533
                self.match(CSharp4Parser.INTERNAL)
                self.state = 2534
                self.match(CSharp4Parser.PROTECTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Accessor_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Accessor_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_accessor_body

        def enterRule(self, listener):
            if hasattr(listener, "enterAccessor_body"):
                listener.enterAccessor_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAccessor_body"):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharp4Parser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_accessor_body)
        try:
            self.state = 2539
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2537
                self.block()

            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2538
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Event_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def event_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterEvent_declaration"):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvent_declaration"):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharp4Parser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_event_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2541
                self.attributes()


            self.state = 2545
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)))) != 0):
                self.state = 2544
                self.event_modifiers()


            self.state = 2547
            self.match(CSharp4Parser.EVENT)
            self.state = 2548
            self.type121()
            self.state = 2557
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 2549
                self.variable_declarators()
                self.state = 2550
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 2552
                self.member_name()
                self.state = 2553
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 2554
                self.event_accessor_declarations()
                self.state = 2555
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Event_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def event_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Event_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Event_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterEvent_modifiers"):
                listener.enterEvent_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvent_modifiers"):
                listener.exitEvent_modifiers(self)




    def event_modifiers(self):

        localctx = CSharp4Parser.Event_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_event_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2559
            self.event_modifier()
            self.state = 2563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)))) != 0):
                self.state = 2560
                self.event_modifier()
                self.state = 2565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Event_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def event_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterEvent_modifier"):
                listener.enterEvent_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvent_modifier"):
                listener.exitEvent_modifier(self)




    def event_modifier(self):

        localctx = CSharp4Parser.Event_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_event_modifier)
        try:
            self.state = 2578
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2566
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2567
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2568
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2569
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2570
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2571
                self.match(CSharp4Parser.STATIC)

            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2572
                self.match(CSharp4Parser.VIRTUAL)

            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2573
                self.match(CSharp4Parser.SEALED)

            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2574
                self.match(CSharp4Parser.OVERRIDE)

            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2575
                self.match(CSharp4Parser.ABSTRACT)

            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2576
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2577
                self.event_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_accessor_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Event_accessor_declarationsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def add_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Add_contextual_keywordContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Remove_accessor_declarationContext,0)


        def remove_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Remove_contextual_keywordContext,0)


        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_accessor_declarations

        def enterRule(self, listener):
            if hasattr(listener, "enterEvent_accessor_declarations"):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvent_accessor_declarations"):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharp4Parser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2581
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2580
                self.attributes()


            self.state = 2591
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD]:
                self.state = 2583
                self.add_contextual_keyword()
                self.state = 2584
                self.block()
                self.state = 2585
                self.remove_accessor_declaration()

            elif token in [CSharp4Parser.REMOVE]:
                self.state = 2587
                self.remove_contextual_keyword()
                self.state = 2588
                self.block()
                self.state = 2589
                self.add_accessor_declaration()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_accessor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Add_accessor_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def add_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Add_contextual_keywordContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_add_accessor_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterAdd_accessor_declaration"):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAdd_accessor_declaration"):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharp4Parser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2593
                self.attributes()


            self.state = 2596
            self.add_contextual_keyword()
            self.state = 2597
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remove_accessor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Remove_accessor_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def remove_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Remove_contextual_keywordContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_remove_accessor_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterRemove_accessor_declaration"):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRemove_accessor_declaration"):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharp4Parser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2600
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2599
                self.attributes()


            self.state = 2602
            self.remove_contextual_keyword()
            self.state = 2603
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Indexer_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def indexer_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Indexer_declaratorContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def indexer_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Indexer_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexer_declaration"):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexer_declaration"):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharp4Parser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_indexer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2605
                self.attributes()


            self.state = 2609
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)))) != 0):
                self.state = 2608
                self.indexer_modifiers()


            self.state = 2611
            self.indexer_declarator()
            self.state = 2612
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2613
            self.accessor_declarations()
            self.state = 2614
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Indexer_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def indexer_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Indexer_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Indexer_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexer_modifiers"):
                listener.enterIndexer_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexer_modifiers"):
                listener.exitIndexer_modifiers(self)




    def indexer_modifiers(self):

        localctx = CSharp4Parser.Indexer_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_indexer_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            self.indexer_modifier()
            self.state = 2620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)))) != 0):
                self.state = 2617
                self.indexer_modifier()
                self.state = 2622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Indexer_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def indexer_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Indexer_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexer_modifier"):
                listener.enterIndexer_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexer_modifier"):
                listener.exitIndexer_modifier(self)




    def indexer_modifier(self):

        localctx = CSharp4Parser.Indexer_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_indexer_modifier)
        try:
            self.state = 2634
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2623
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2624
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2625
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2626
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2627
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2628
                self.match(CSharp4Parser.VIRTUAL)

            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2629
                self.match(CSharp4Parser.SEALED)

            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2630
                self.match(CSharp4Parser.OVERRIDE)

            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2631
                self.match(CSharp4Parser.ABSTRACT)

            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2632
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2633
                self.indexer_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Indexer_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def interface_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_type121Context,0)


        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexer_declarator"):
                listener.enterIndexer_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexer_declarator"):
                listener.exitIndexer_declarator(self)




    def indexer_declarator(self):

        localctx = CSharp4Parser.Indexer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_indexer_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.type121()
            self.state = 2640
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CSharp4Parser.ON - 67)) | (1 << (CSharp4Parser.ORDERBY - 67)) | (1 << (CSharp4Parser.PARTIAL - 67)) | (1 << (CSharp4Parser.REMOVE - 67)) | (1 << (CSharp4Parser.SELECT - 67)) | (1 << (CSharp4Parser.SET - 67)) | (1 << (CSharp4Parser.WHERE - 67)) | (1 << (CSharp4Parser.YIELD - 67)) | (1 << (CSharp4Parser.IDENTIFIER - 67)))) != 0):
                self.state = 2637
                self.interface_type121()
                self.state = 2638
                self.match(CSharp4Parser.DOT)


            self.state = 2642
            self.match(CSharp4Parser.THIS)
            self.state = 2643
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 2644
            self.formal_parameter_list()
            self.state = 2645
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Operator_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def operator_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_modifiersContext,0)


        def operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_declaratorContext,0)


        def operator_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterOperator_declaration"):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperator_declaration"):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharp4Parser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2648
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2647
                self.attributes()


            self.state = 2650
            self.operator_modifiers()
            self.state = 2651
            self.operator_declarator()
            self.state = 2652
            self.operator_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Operator_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def operator_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Operator_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Operator_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterOperator_modifiers"):
                listener.enterOperator_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperator_modifiers"):
                listener.exitOperator_modifiers(self)




    def operator_modifiers(self):

        localctx = CSharp4Parser.Operator_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_operator_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2654
            self.operator_modifier()
            self.state = 2658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (CSharp4Parser.EXTERN - 40)) | (1 << (CSharp4Parser.PUBLIC - 40)) | (1 << (CSharp4Parser.STATIC - 40)) | (1 << (CSharp4Parser.UNSAFE - 40)))) != 0):
                self.state = 2655
                self.operator_modifier()
                self.state = 2660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Operator_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def operator_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterOperator_modifier"):
                listener.enterOperator_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperator_modifier"):
                listener.exitOperator_modifier(self)




    def operator_modifier(self):

        localctx = CSharp4Parser.Operator_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_operator_modifier)
        try:
            self.state = 2665
            token = self._input.LA(1)
            if token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2661
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2662
                self.match(CSharp4Parser.STATIC)

            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2663
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2664
                self.operator_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Operator_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unary_operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_operator_declaratorContext,0)


        def binary_operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Binary_operator_declaratorContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Conversion_operator_declaratorContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterOperator_declarator"):
                listener.enterOperator_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperator_declarator"):
                listener.exitOperator_declarator(self)




    def operator_declarator(self):

        localctx = CSharp4Parser.Operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_operator_declarator)
        try:
            self.state = 2670
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2667
                self.unary_operator_declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2668
                self.binary_operator_declarator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2669
                self.conversion_operator_declarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operator_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Unary_operator_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121Context,i)


        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def overloadable_unary_operator(self):
            return self.getTypedRuleContext(CSharp4Parser.Overloadable_unary_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_unary_operator_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterUnary_operator_declarator"):
                listener.enterUnary_operator_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnary_operator_declarator"):
                listener.exitUnary_operator_declarator(self)




    def unary_operator_declarator(self):

        localctx = CSharp4Parser.Unary_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_unary_operator_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2672
            self.type121()
            self.state = 2673
            self.match(CSharp4Parser.OPERATOR)
            self.state = 2674
            self.overloadable_unary_operator()
            self.state = 2675
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2676
            self.type121()
            self.state = 2677
            self.identifier()
            self.state = 2678
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overloadable_unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Overloadable_unary_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharp4Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharp4Parser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharp4Parser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharp4Parser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharp4Parser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharp4Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharp4Parser.FALSE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_overloadable_unary_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterOverloadable_unary_operator"):
                listener.enterOverloadable_unary_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOverloadable_unary_operator"):
                listener.exitOverloadable_unary_operator(self)




    def overloadable_unary_operator(self):

        localctx = CSharp4Parser.Overloadable_unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_overloadable_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2680
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.FALSE or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (CSharp4Parser.TRUE - 94)) | (1 << (CSharp4Parser.PLUS - 94)) | (1 << (CSharp4Parser.MINUS - 94)) | (1 << (CSharp4Parser.BANG - 94)) | (1 << (CSharp4Parser.TILDE - 94)) | (1 << (CSharp4Parser.OP_INC - 94)) | (1 << (CSharp4Parser.OP_DEC - 94)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Binary_operator_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Binary_operator_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121Context,i)


        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def overloadable_binary_operator(self):
            return self.getTypedRuleContext(CSharp4Parser.Overloadable_binary_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_binary_operator_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterBinary_operator_declarator"):
                listener.enterBinary_operator_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBinary_operator_declarator"):
                listener.exitBinary_operator_declarator(self)




    def binary_operator_declarator(self):

        localctx = CSharp4Parser.Binary_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_binary_operator_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2682
            self.type121()
            self.state = 2683
            self.match(CSharp4Parser.OPERATOR)
            self.state = 2684
            self.overloadable_binary_operator()
            self.state = 2685
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2686
            self.type121()
            self.state = 2687
            self.identifier()
            self.state = 2688
            self.match(CSharp4Parser.COMMA)
            self.state = 2689
            self.type121()
            self.state = 2690
            self.identifier()
            self.state = 2691
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overloadable_binary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Overloadable_binary_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharp4Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharp4Parser.MINUS, 0)

        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharp4Parser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharp4Parser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharp4Parser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharp4Parser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharp4Parser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharp4Parser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharp4Parser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharp4Parser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharp4Parser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharp4Parser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharp4Parser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_overloadable_binary_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterOverloadable_binary_operator"):
                listener.enterOverloadable_binary_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOverloadable_binary_operator"):
                listener.exitOverloadable_binary_operator(self)




    def overloadable_binary_operator(self):

        localctx = CSharp4Parser.Overloadable_binary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_overloadable_binary_operator)
        try:
            self.state = 2709
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2693
                self.match(CSharp4Parser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2694
                self.match(CSharp4Parser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2695
                self.match(CSharp4Parser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2696
                self.match(CSharp4Parser.DIV)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2697
                self.match(CSharp4Parser.PERCENT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2698
                self.match(CSharp4Parser.AMP)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2699
                self.match(CSharp4Parser.BITWISE_OR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2700
                self.match(CSharp4Parser.CARET)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2701
                self.match(CSharp4Parser.OP_LEFT_SHIFT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2702
                self.right_shift()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2703
                self.match(CSharp4Parser.OP_EQ)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2704
                self.match(CSharp4Parser.OP_NE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2705
                self.match(CSharp4Parser.GT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2706
                self.match(CSharp4Parser.LT)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2707
                self.match(CSharp4Parser.OP_GE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2708
                self.match(CSharp4Parser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overloadable_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Overloadable_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharp4Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharp4Parser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharp4Parser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharp4Parser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharp4Parser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharp4Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharp4Parser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharp4Parser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharp4Parser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharp4Parser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharp4Parser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharp4Parser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharp4Parser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharp4Parser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharp4Parser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharp4Parser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharp4Parser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharp4Parser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_overloadable_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterOverloadable_operator"):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOverloadable_operator"):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharp4Parser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_overloadable_operator)
        try:
            self.state = 2733
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2711
                self.match(CSharp4Parser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2712
                self.match(CSharp4Parser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2713
                self.match(CSharp4Parser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2714
                self.match(CSharp4Parser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2715
                self.match(CSharp4Parser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2716
                self.match(CSharp4Parser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2717
                self.match(CSharp4Parser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2718
                self.match(CSharp4Parser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2719
                self.match(CSharp4Parser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2720
                self.match(CSharp4Parser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2721
                self.match(CSharp4Parser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2722
                self.match(CSharp4Parser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2723
                self.match(CSharp4Parser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2724
                self.match(CSharp4Parser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2725
                self.match(CSharp4Parser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2726
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2727
                self.match(CSharp4Parser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2728
                self.match(CSharp4Parser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2729
                self.match(CSharp4Parser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2730
                self.match(CSharp4Parser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2731
                self.match(CSharp4Parser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2732
                self.match(CSharp4Parser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conversion_operator_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Conversion_operator_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IMPLICIT(self):
            return self.getToken(CSharp4Parser.IMPLICIT, 0)

        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121Context,i)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def EXPLICIT(self):
            return self.getToken(CSharp4Parser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_conversion_operator_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterConversion_operator_declarator"):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConversion_operator_declarator"):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharp4Parser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_conversion_operator_declarator)
        try:
            self.state = 2751
            token = self._input.LA(1)
            if token in [CSharp4Parser.IMPLICIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2735
                self.match(CSharp4Parser.IMPLICIT)
                self.state = 2736
                self.match(CSharp4Parser.OPERATOR)
                self.state = 2737
                self.type121()
                self.state = 2738
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 2739
                self.type121()
                self.state = 2740
                self.identifier()
                self.state = 2741
                self.match(CSharp4Parser.CLOSE_PARENS)

            elif token in [CSharp4Parser.EXPLICIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2743
                self.match(CSharp4Parser.EXPLICIT)
                self.state = 2744
                self.match(CSharp4Parser.OPERATOR)
                self.state = 2745
                self.type121()
                self.state = 2746
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 2747
                self.type121()
                self.state = 2748
                self.identifier()
                self.state = 2749
                self.match(CSharp4Parser.CLOSE_PARENS)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Operator_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_body

        def enterRule(self, listener):
            if hasattr(listener, "enterOperator_body"):
                listener.enterOperator_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperator_body"):
                listener.exitOperator_body(self)




    def operator_body(self):

        localctx = CSharp4Parser.Operator_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_operator_body)
        try:
            self.state = 2755
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2753
                self.block()

            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2754
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constructor_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_declaratorContext,0)


        def constructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def constructor_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_declaration"):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_declaration"):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharp4Parser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2757
                self.attributes()


            self.state = 2761
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (CSharp4Parser.EXTERN - 40)) | (1 << (CSharp4Parser.INTERNAL - 40)) | (1 << (CSharp4Parser.PRIVATE - 40)) | (1 << (CSharp4Parser.PROTECTED - 40)) | (1 << (CSharp4Parser.PUBLIC - 40)) | (1 << (CSharp4Parser.UNSAFE - 40)))) != 0):
                self.state = 2760
                self.constructor_modifiers()


            self.state = 2763
            self.constructor_declarator()
            self.state = 2764
            self.constructor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constructor_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Constructor_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Constructor_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_modifiers"):
                listener.enterConstructor_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_modifiers"):
                listener.exitConstructor_modifiers(self)




    def constructor_modifiers(self):

        localctx = CSharp4Parser.Constructor_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_constructor_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2767 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2766
                self.constructor_modifier()
                self.state = 2769 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (CSharp4Parser.EXTERN - 40)) | (1 << (CSharp4Parser.INTERNAL - 40)) | (1 << (CSharp4Parser.PRIVATE - 40)) | (1 << (CSharp4Parser.PROTECTED - 40)) | (1 << (CSharp4Parser.PUBLIC - 40)) | (1 << (CSharp4Parser.UNSAFE - 40)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def constructor_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_modifier"):
                listener.enterConstructor_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_modifier"):
                listener.exitConstructor_modifier(self)




    def constructor_modifier(self):

        localctx = CSharp4Parser.Constructor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_constructor_modifier)
        try:
            self.state = 2777
            token = self._input.LA(1)
            if token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2771
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2772
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2773
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2774
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2775
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2776
                self.constructor_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_declarator"):
                listener.enterConstructor_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_declarator"):
                listener.exitConstructor_declarator(self)




    def constructor_declarator(self):

        localctx = CSharp4Parser.Constructor_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_constructor_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2779
            self.identifier()
            self.state = 2780
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2782
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                self.state = 2781
                self.formal_parameter_list()


            self.state = 2784
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2786
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 2785
                self.constructor_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def BASE(self):
            return self.getToken(CSharp4Parser.BASE, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_listContext,0)


        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_initializer"):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_initializer"):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharp4Parser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2802
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2788
                self.match(CSharp4Parser.COLON)
                self.state = 2789
                self.match(CSharp4Parser.BASE)
                self.state = 2790
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 2792
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                    self.state = 2791
                    self.argument_list()


                self.state = 2794
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2795
                self.match(CSharp4Parser.COLON)
                self.state = 2796
                self.match(CSharp4Parser.THIS)
                self.state = 2797
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 2799
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                    self.state = 2798
                    self.argument_list()


                self.state = 2801
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_body

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_body"):
                listener.enterConstructor_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_body"):
                listener.exitConstructor_body(self)




    def constructor_body(self):

        localctx = CSharp4Parser.Constructor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_constructor_body)
        try:
            self.state = 2806
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2804
                self.block()

            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2805
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Static_constructor_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def static_constructor_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Static_constructor_modifiersContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def static_constructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Static_constructor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_static_constructor_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterStatic_constructor_declaration"):
                listener.enterStatic_constructor_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatic_constructor_declaration"):
                listener.exitStatic_constructor_declaration(self)




    def static_constructor_declaration(self):

        localctx = CSharp4Parser.Static_constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_static_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2809
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2808
                self.attributes()


            self.state = 2811
            self.static_constructor_modifiers()
            self.state = 2812
            self.identifier()
            self.state = 2813
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2814
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2815
            self.static_constructor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_constructor_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Static_constructor_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def static_constructor_modifiers_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Static_constructor_modifiers_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_static_constructor_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterStatic_constructor_modifiers"):
                listener.enterStatic_constructor_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatic_constructor_modifiers"):
                listener.exitStatic_constructor_modifiers(self)




    def static_constructor_modifiers(self):

        localctx = CSharp4Parser.Static_constructor_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_static_constructor_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2817
            self.static_constructor_modifiers_unsafe()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_constructor_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Static_constructor_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_static_constructor_body

        def enterRule(self, listener):
            if hasattr(listener, "enterStatic_constructor_body"):
                listener.enterStatic_constructor_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatic_constructor_body"):
                listener.exitStatic_constructor_body(self)




    def static_constructor_body(self):

        localctx = CSharp4Parser.Static_constructor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_static_constructor_body)
        try:
            self.state = 2821
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2819
                self.block()

            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2820
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Destructor_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def destructor_declaration_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Destructor_declaration_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_destructor_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterDestructor_declaration"):
                listener.enterDestructor_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDestructor_declaration"):
                listener.exitDestructor_declaration(self)




    def destructor_declaration(self):

        localctx = CSharp4Parser.Destructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_destructor_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2823
            self.destructor_declaration_unsafe()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destructor_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Destructor_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_destructor_body

        def enterRule(self, listener):
            if hasattr(listener, "enterDestructor_body"):
                listener.enterDestructor_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDestructor_body"):
                listener.exitDestructor_body(self)




    def destructor_body(self):

        localctx = CSharp4Parser.Destructor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_destructor_body)
        try:
            self.state = 2827
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2825
                self.block()

            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2826
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.BodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_body

        def enterRule(self, listener):
            if hasattr(listener, "enterBody"):
                listener.enterBody(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBody"):
                listener.exitBody(self)




    def body(self):

        localctx = CSharp4Parser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_body)
        try:
            self.state = 2831
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2829
                self.block()

            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2830
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def struct_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_modifiersContext,0)


        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_interfacesContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_declaration"):
                listener.enterStruct_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_declaration"):
                listener.exitStruct_declaration(self)




    def struct_declaration(self):

        localctx = CSharp4Parser.Struct_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_struct_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2834
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2833
                self.attributes()


            self.state = 2837
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0):
                self.state = 2836
                self.struct_modifiers()


            self.state = 2840
            _la = self._input.LA(1)
            if _la==CSharp4Parser.PARTIAL:
                self.state = 2839
                self.partial_contextual_keyword()


            self.state = 2842
            self.match(CSharp4Parser.STRUCT)
            self.state = 2843
            self.identifier()
            self.state = 2845
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 2844
                self.type121_parameter_list()


            self.state = 2848
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 2847
                self.struct_interfaces()


            self.state = 2851
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 2850
                self.type121_parameter_constraints_clauses()


            self.state = 2853
            self.struct_body()
            self.state = 2855
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 2854
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def struct_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Struct_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Struct_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_modifiers"):
                listener.enterStruct_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_modifiers"):
                listener.exitStruct_modifiers(self)




    def struct_modifiers(self):

        localctx = CSharp4Parser.Struct_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_struct_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2857
            self.struct_modifier()
            self.state = 2861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0):
                self.state = 2858
                self.struct_modifier()
                self.state = 2863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def struct_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_modifier"):
                listener.enterStruct_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_modifier"):
                listener.exitStruct_modifier(self)




    def struct_modifier(self):

        localctx = CSharp4Parser.Struct_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_struct_modifier)
        try:
            self.state = 2870
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2864
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2865
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2866
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2867
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2868
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2869
                self.struct_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_interfacesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_interfacesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def interface_type121_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_type121_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_interfaces

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_interfaces"):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_interfaces"):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharp4Parser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2872
            self.match(CSharp4Parser.COLON)
            self.state = 2873
            self.interface_type121_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def struct_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_body

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_body"):
                listener.enterStruct_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_body"):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharp4Parser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2875
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2877
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FIXED) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.STRUCT - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0):
                self.state = 2876
                self.struct_member_declarations()


            self.state = 2879
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_member_declarationsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def struct_member_declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Struct_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_member_declarations

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_member_declarations"):
                listener.enterStruct_member_declarations(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_member_declarations"):
                listener.exitStruct_member_declarations(self)




    def struct_member_declarations(self):

        localctx = CSharp4Parser.Struct_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_struct_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2881
            self.struct_member_declaration()
            self.state = 2885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FIXED) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.STRUCT - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0):
                self.state = 2882
                self.struct_member_declaration()
                self.state = 2887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_member_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def buffer_element_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Buffer_element_type121Context,0)


        def fixed_size_buffer_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_member_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_member_declaration"):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_member_declaration"):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharp4Parser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2889
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2888
                self.attributes()


            self.state = 2892
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 2891
                self.all_member_modifiers()


            self.state = 2900
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.DECIMAL, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.ENUM, CSharp4Parser.EQUALS, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.IMPLICIT, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT, CSharp4Parser.VOID, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.state = 2894
                self.common_member_declaration()

            elif token in [CSharp4Parser.FIXED]:
                self.state = 2895
                self.match(CSharp4Parser.FIXED)
                self.state = 2896
                self.buffer_element_type121()
                self.state = 2897
                self.fixed_size_buffer_declarators()
                self.state = 2898
                self.match(CSharp4Parser.SEMICOLON)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Array_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def base_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_type121Context,0)


        def rank_specifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def STAR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def INTERR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_array_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterArray_type121"):
                listener.enterArray_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArray_type121"):
                listener.exitArray_type121(self)




    def array_type121(self):

        localctx = CSharp4Parser.Array_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_array_type121)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2902
            self.base_type121()
            self.state = 2910 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                    self.state = 2903
                    _la = self._input.LA(1)
                    if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 2908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2909
                self.rank_specifier()
                self.state = 2912 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (CSharp4Parser.OPEN_BRACKET - 116)) | (1 << (CSharp4Parser.STAR - 116)) | (1 << (CSharp4Parser.INTERR - 116)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_array_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Non_array_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def base_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_type121Context,0)


        def rank_specifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def INTERR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def STAR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_non_array_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterNon_array_type121"):
                listener.enterNon_array_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNon_array_type121"):
                listener.exitNon_array_type121(self)




    def non_array_type121(self):

        localctx = CSharp4Parser.Non_array_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_non_array_type121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2914
            self.base_type121()
            self.state = 2920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,279,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2918
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.OPEN_BRACKET]:
                        self.state = 2915
                        self.rank_specifier()

                    elif token in [CSharp4Parser.INTERR]:
                        self.state = 2916
                        self.match(CSharp4Parser.INTERR)

                    elif token in [CSharp4Parser.STAR]:
                        self.state = 2917
                        self.match(CSharp4Parser.STAR)

                    else:
                        raise NoViableAltException(self)
             
                self.state = 2922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rank_specifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Rank_specifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def rank_specifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_rank_specifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterRank_specifiers"):
                listener.enterRank_specifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRank_specifiers"):
                listener.exitRank_specifiers(self)




    def rank_specifiers(self):

        localctx = CSharp4Parser.Rank_specifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_rank_specifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2924 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2923
                    self.rank_specifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2926 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rank_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Rank_specifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def dim_separators(self):
            return self.getTypedRuleContext(CSharp4Parser.Dim_separatorsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_rank_specifier

        def enterRule(self, listener):
            if hasattr(listener, "enterRank_specifier"):
                listener.enterRank_specifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRank_specifier"):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharp4Parser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2928
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 2930
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 2929
                self.dim_separators()


            self.state = 2932
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dim_separatorsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Dim_separatorsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_dim_separators

        def enterRule(self, listener):
            if hasattr(listener, "enterDim_separators"):
                listener.enterDim_separators(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDim_separators"):
                listener.exitDim_separators(self)




    def dim_separators(self):

        localctx = CSharp4Parser.Dim_separatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_dim_separators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            self.match(CSharp4Parser.COMMA)
            self.state = 2938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2935
                self.match(CSharp4Parser.COMMA)
                self.state = 2940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Array_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def variable_initializer_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_array_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterArray_initializer"):
                listener.enterArray_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArray_initializer"):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharp4Parser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2950
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2941
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 2942
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2943
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 2944
                self.variable_initializer_list()
                self.state = 2946
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 2945
                    self.match(CSharp4Parser.COMMA)


                self.state = 2948
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_initializer_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Variable_initializer_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def variable_initializer(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Variable_initializerContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_initializer_list

        def enterRule(self, listener):
            if hasattr(listener, "enterVariable_initializer_list"):
                listener.enterVariable_initializer_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariable_initializer_list"):
                listener.exitVariable_initializer_list(self)




    def variable_initializer_list(self):

        localctx = CSharp4Parser.Variable_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_variable_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2952
            self.variable_initializer()
            self.state = 2957
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2953
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2954
                    self.variable_initializer() 
                self.state = 2959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharp4Parser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def interface_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def interface_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_modifiersContext,0)


        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def variant_type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type121_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_baseContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_declaration"):
                listener.enterInterface_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_declaration"):
                listener.exitInterface_declaration(self)




    def interface_declaration(self):

        localctx = CSharp4Parser.Interface_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_interface_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2961
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2960
                self.attributes()


            self.state = 2964
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0):
                self.state = 2963
                self.interface_modifiers()


            self.state = 2967
            _la = self._input.LA(1)
            if _la==CSharp4Parser.PARTIAL:
                self.state = 2966
                self.partial_contextual_keyword()


            self.state = 2969
            self.match(CSharp4Parser.INTERFACE)
            self.state = 2970
            self.identifier()
            self.state = 2972
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 2971
                self.variant_type121_parameter_list()


            self.state = 2975
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 2974
                self.interface_base()


            self.state = 2978
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 2977
                self.type121_parameter_constraints_clauses()


            self.state = 2980
            self.interface_body()
            self.state = 2982
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 2981
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def interface_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_modifiers"):
                listener.enterInterface_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_modifiers"):
                listener.exitInterface_modifiers(self)




    def interface_modifiers(self):

        localctx = CSharp4Parser.Interface_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_interface_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2984
            self.interface_modifier()
            self.state = 2988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0):
                self.state = 2985
                self.interface_modifier()
                self.state = 2990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def interface_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_modifier"):
                listener.enterInterface_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_modifier"):
                listener.exitInterface_modifier(self)




    def interface_modifier(self):

        localctx = CSharp4Parser.Interface_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_interface_modifier)
        try:
            self.state = 2997
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2991
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2992
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2993
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2994
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2995
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2996
                self.interface_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variant_type121_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Variant_type121_parameter_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def variant_type121_parameters(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type121_parametersContext,0)


        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variant_type121_parameter_list

        def enterRule(self, listener):
            if hasattr(listener, "enterVariant_type121_parameter_list"):
                listener.enterVariant_type121_parameter_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariant_type121_parameter_list"):
                listener.exitVariant_type121_parameter_list(self)




    def variant_type121_parameter_list(self):

        localctx = CSharp4Parser.Variant_type121_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_variant_type121_parameter_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2999
            self.match(CSharp4Parser.LT)
            self.state = 3000
            self.variant_type121_parameters()
            self.state = 3001
            self.match(CSharp4Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variant_type121_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Variant_type121_parametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_parameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121_parameterContext,i)


        def attributes(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.AttributesContext,i)


        def variance_annotation(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Variance_annotationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Variance_annotationContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variant_type121_parameters

        def enterRule(self, listener):
            if hasattr(listener, "enterVariant_type121_parameters"):
                listener.enterVariant_type121_parameters(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariant_type121_parameters"):
                listener.exitVariant_type121_parameters(self)




    def variant_type121_parameters(self):

        localctx = CSharp4Parser.Variant_type121_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_variant_type121_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3004
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3003
                self.attributes()


            self.state = 3007
            _la = self._input.LA(1)
            if _la==CSharp4Parser.IN or _la==CSharp4Parser.OUT:
                self.state = 3006
                self.variance_annotation()


            self.state = 3009
            self.type121_parameter()
            self.state = 3020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 3010
                self.match(CSharp4Parser.COMMA)
                self.state = 3012
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 3011
                    self.attributes()


                self.state = 3015
                _la = self._input.LA(1)
                if _la==CSharp4Parser.IN or _la==CSharp4Parser.OUT:
                    self.state = 3014
                    self.variance_annotation()


                self.state = 3017
                self.type121_parameter()
                self.state = 3022
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variance_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Variance_annotationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variance_annotation

        def enterRule(self, listener):
            if hasattr(listener, "enterVariance_annotation"):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariance_annotation"):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharp4Parser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3023
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.IN or _la==CSharp4Parser.OUT):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_baseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_baseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def interface_type121_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_type121_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_base

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_base"):
                listener.enterInterface_base(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_base"):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharp4Parser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3025
            self.match(CSharp4Parser.COLON)
            self.state = 3026
            self.interface_type121_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def interface_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_body

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_body"):
                listener.enterInterface_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_body"):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharp4Parser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3028
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3030
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0):
                self.state = 3029
                self.interface_member_declarations()


            self.state = 3032
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_member_declarationsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def interface_member_declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_member_declarations

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_member_declarations"):
                listener.enterInterface_member_declarations(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_member_declarations"):
                listener.exitInterface_member_declarations(self)




    def interface_member_declarations(self):

        localctx = CSharp4Parser.Interface_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_interface_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3034
                self.interface_member_declaration()
                self.state = 3037 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.OPEN_BRACKET - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_member_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_member_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_member_declaration"):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_member_declaration"):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharp4Parser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3040
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3039
                self.attributes()


            self.state = 3043
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3042
                self.match(CSharp4Parser.NEW)


            self.state = 3095
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 3045
                self.type121()
                self.state = 3073
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 3046
                    self.identifier()
                    self.state = 3048
                    _la = self._input.LA(1)
                    if _la==CSharp4Parser.LT:
                        self.state = 3047
                        self.type121_parameter_list()


                    self.state = 3050
                    self.match(CSharp4Parser.OPEN_PARENS)
                    self.state = 3052
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                        self.state = 3051
                        self.formal_parameter_list()


                    self.state = 3054
                    self.match(CSharp4Parser.CLOSE_PARENS)
                    self.state = 3056
                    _la = self._input.LA(1)
                    if _la==CSharp4Parser.WHERE:
                        self.state = 3055
                        self.type121_parameter_constraints_clauses()


                    self.state = 3058
                    self.match(CSharp4Parser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 3060
                    self.identifier()
                    self.state = 3061
                    self.match(CSharp4Parser.OPEN_BRACE)
                    self.state = 3062
                    self.interface_accessors()
                    self.state = 3063
                    self.match(CSharp4Parser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 3065
                    self.match(CSharp4Parser.THIS)
                    self.state = 3066
                    self.match(CSharp4Parser.OPEN_BRACKET)
                    self.state = 3067
                    self.formal_parameter_list()
                    self.state = 3068
                    self.match(CSharp4Parser.CLOSE_BRACKET)
                    self.state = 3069
                    self.match(CSharp4Parser.OPEN_BRACE)
                    self.state = 3070
                    self.interface_accessors()
                    self.state = 3071
                    self.match(CSharp4Parser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 3075
                self.match(CSharp4Parser.VOID)
                self.state = 3076
                self.identifier()
                self.state = 3078
                _la = self._input.LA(1)
                if _la==CSharp4Parser.LT:
                    self.state = 3077
                    self.type121_parameter_list()


                self.state = 3080
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 3082
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                    self.state = 3081
                    self.formal_parameter_list()


                self.state = 3084
                self.match(CSharp4Parser.CLOSE_PARENS)
                self.state = 3086
                _la = self._input.LA(1)
                if _la==CSharp4Parser.WHERE:
                    self.state = 3085
                    self.type121_parameter_constraints_clauses()


                self.state = 3088
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 3090
                self.match(CSharp4Parser.EVENT)
                self.state = 3091
                self.type121()
                self.state = 3092
                self.identifier()
                self.state = 3093
                self.match(CSharp4Parser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_method_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def return_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_method_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_method_declaration"):
                listener.enterInterface_method_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_method_declaration"):
                listener.exitInterface_method_declaration(self)




    def interface_method_declaration(self):

        localctx = CSharp4Parser.Interface_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_interface_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3098
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3097
                self.attributes()


            self.state = 3101
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3100
                self.match(CSharp4Parser.NEW)


            self.state = 3103
            self.return_type121()
            self.state = 3104
            self.identifier()
            self.state = 3106
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3105
                self.type121_parameter_list()


            self.state = 3108
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3110
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                self.state = 3109
                self.formal_parameter_list()


            self.state = 3112
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3114
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3113
                self.type121_parameter_constraints_clauses()


            self.state = 3116
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_property_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_property_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_property_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_property_declaration"):
                listener.enterInterface_property_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_property_declaration"):
                listener.exitInterface_property_declaration(self)




    def interface_property_declaration(self):

        localctx = CSharp4Parser.Interface_property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_interface_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3119
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3118
                self.attributes()


            self.state = 3122
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3121
                self.match(CSharp4Parser.NEW)


            self.state = 3124
            self.type121()
            self.state = 3125
            self.identifier()
            self.state = 3126
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3127
            self.interface_accessors()
            self.state = 3128
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_accessorsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_accessorsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def get_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Get_contextual_keywordContext,0)


        def SEMICOLON(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.SEMICOLON)
            else:
                return self.getToken(CSharp4Parser.SEMICOLON, i)

        def set_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Set_contextual_keywordContext,0)


        def attributes(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_accessors

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_accessors"):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_accessors"):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharp4Parser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3131
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3130
                self.attributes()


            self.state = 3153
            token = self._input.LA(1)
            if token in [CSharp4Parser.GET]:
                self.state = 3133
                self.get_contextual_keyword()
                self.state = 3134
                self.match(CSharp4Parser.SEMICOLON)
                self.state = 3141
                _la = self._input.LA(1)
                if _la==CSharp4Parser.SET or _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 3136
                    _la = self._input.LA(1)
                    if _la==CSharp4Parser.OPEN_BRACKET:
                        self.state = 3135
                        self.attributes()


                    self.state = 3138
                    self.set_contextual_keyword()
                    self.state = 3139
                    self.match(CSharp4Parser.SEMICOLON)



            elif token in [CSharp4Parser.SET]:
                self.state = 3143
                self.set_contextual_keyword()
                self.state = 3144
                self.match(CSharp4Parser.SEMICOLON)
                self.state = 3151
                _la = self._input.LA(1)
                if _la==CSharp4Parser.GET or _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 3146
                    _la = self._input.LA(1)
                    if _la==CSharp4Parser.OPEN_BRACKET:
                        self.state = 3145
                        self.attributes()


                    self.state = 3148
                    self.get_contextual_keyword()
                    self.state = 3149
                    self.match(CSharp4Parser.SEMICOLON)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_event_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_event_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_event_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_event_declaration"):
                listener.enterInterface_event_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_event_declaration"):
                listener.exitInterface_event_declaration(self)




    def interface_event_declaration(self):

        localctx = CSharp4Parser.Interface_event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_interface_event_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3156
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3155
                self.attributes()


            self.state = 3159
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3158
                self.match(CSharp4Parser.NEW)


            self.state = 3161
            self.match(CSharp4Parser.EVENT)
            self.state = 3162
            self.type121()
            self.state = 3163
            self.identifier()
            self.state = 3164
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_indexer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_indexer_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_indexer_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_indexer_declaration"):
                listener.enterInterface_indexer_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_indexer_declaration"):
                listener.exitInterface_indexer_declaration(self)




    def interface_indexer_declaration(self):

        localctx = CSharp4Parser.Interface_indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_interface_indexer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3167
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3166
                self.attributes()


            self.state = 3170
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3169
                self.match(CSharp4Parser.NEW)


            self.state = 3172
            self.type121()
            self.state = 3173
            self.match(CSharp4Parser.THIS)
            self.state = 3174
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3175
            self.formal_parameter_list()
            self.state = 3176
            self.match(CSharp4Parser.CLOSE_BRACKET)
            self.state = 3177
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3178
            self.interface_accessors()
            self.state = 3179
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Enum_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharp4Parser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def enum_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_modifiersContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterEnum_declaration"):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnum_declaration"):
                listener.exitEnum_declaration(self)




    def enum_declaration(self):

        localctx = CSharp4Parser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_enum_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3182
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3181
                self.attributes()


            self.state = 3185
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)))) != 0):
                self.state = 3184
                self.enum_modifiers()


            self.state = 3187
            self.match(CSharp4Parser.ENUM)
            self.state = 3188
            self.identifier()
            self.state = 3190
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3189
                self.enum_base()


            self.state = 3192
            self.enum_body()
            self.state = 3194
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3193
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_baseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Enum_baseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def integral_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Integral_type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_base

        def enterRule(self, listener):
            if hasattr(listener, "enterEnum_base"):
                listener.enterEnum_base(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnum_base"):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharp4Parser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3196
            self.match(CSharp4Parser.COLON)
            self.state = 3197
            self.integral_type121()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Enum_bodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def enum_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_member_declarationsContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_body

        def enterRule(self, listener):
            if hasattr(listener, "enterEnum_body"):
                listener.enterEnum_body(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnum_body"):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharp4Parser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.state = 3208
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3199
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 3200
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3201
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 3202
                self.enum_member_declarations()
                self.state = 3204
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 3203
                    self.match(CSharp4Parser.COMMA)


                self.state = 3206
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Enum_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enum_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Enum_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Enum_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterEnum_modifiers"):
                listener.enterEnum_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnum_modifiers"):
                listener.exitEnum_modifiers(self)




    def enum_modifiers(self):

        localctx = CSharp4Parser.Enum_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_enum_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3211 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3210
                self.enum_modifier()
                self.state = 3213 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Enum_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterEnum_modifier"):
                listener.enterEnum_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnum_modifier"):
                listener.exitEnum_modifier(self)




    def enum_modifier(self):

        localctx = CSharp4Parser.Enum_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_enum_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3215
            _la = self._input.LA(1)
            if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Enum_member_declarationsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enum_member_declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Enum_member_declarationContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_member_declarations

        def enterRule(self, listener):
            if hasattr(listener, "enterEnum_member_declarations"):
                listener.enterEnum_member_declarations(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnum_member_declarations"):
                listener.exitEnum_member_declarations(self)




    def enum_member_declarations(self):

        localctx = CSharp4Parser.Enum_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_enum_member_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3217
            self.enum_member_declaration()
            self.state = 3222
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3218
                    self.match(CSharp4Parser.COMMA)
                    self.state = 3219
                    self.enum_member_declaration() 
                self.state = 3224
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Enum_member_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_member_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterEnum_member_declaration"):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnum_member_declaration"):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharp4Parser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3226
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3225
                self.attributes()


            self.state = 3228
            self.identifier()
            self.state = 3231
            _la = self._input.LA(1)
            if _la==CSharp4Parser.ASSIGNMENT:
                self.state = 3229
                self.match(CSharp4Parser.ASSIGNMENT)
                self.state = 3230
                self.constant_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Delegate_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def return_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def delegate_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_modifiersContext,0)


        def variant_type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type121_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterDelegate_declaration"):
                listener.enterDelegate_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelegate_declaration"):
                listener.exitDelegate_declaration(self)




    def delegate_declaration(self):

        localctx = CSharp4Parser.Delegate_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_delegate_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3233
                self.attributes()


            self.state = 3237
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0):
                self.state = 3236
                self.delegate_modifiers()


            self.state = 3239
            self.match(CSharp4Parser.DELEGATE)
            self.state = 3240
            self.return_type121()
            self.state = 3241
            self.identifier()
            self.state = 3243
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3242
                self.variant_type121_parameter_list()


            self.state = 3245
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3247
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                self.state = 3246
                self.formal_parameter_list()


            self.state = 3249
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3251
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3250
                self.type121_parameter_constraints_clauses()


            self.state = 3253
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Delegate_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def delegate_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Delegate_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Delegate_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterDelegate_modifiers"):
                listener.enterDelegate_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelegate_modifiers"):
                listener.exitDelegate_modifiers(self)




    def delegate_modifiers(self):

        localctx = CSharp4Parser.Delegate_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_delegate_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3255
            self.delegate_modifier()
            self.state = 3259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0):
                self.state = 3256
                self.delegate_modifier()
                self.state = 3261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Delegate_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def delegate_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterDelegate_modifier"):
                listener.enterDelegate_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelegate_modifier"):
                listener.exitDelegate_modifier(self)




    def delegate_modifier(self):

        localctx = CSharp4Parser.Delegate_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_delegate_modifier)
        try:
            self.state = 3268
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3262
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3263
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3264
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3265
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3266
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3267
                self.delegate_modifier_unsafe()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attributesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Global_attributesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def global_attribute_sections(self):
            return self.getTypedRuleContext(CSharp4Parser.Global_attribute_sectionsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attributes

        def enterRule(self, listener):
            if hasattr(listener, "enterGlobal_attributes"):
                listener.enterGlobal_attributes(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGlobal_attributes"):
                listener.exitGlobal_attributes(self)




    def global_attributes(self):

        localctx = CSharp4Parser.Global_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_global_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3270
            self.global_attribute_sections()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attribute_sectionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Global_attribute_sectionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def global_attribute_section(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Global_attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Global_attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attribute_sections

        def enterRule(self, listener):
            if hasattr(listener, "enterGlobal_attribute_sections"):
                listener.enterGlobal_attribute_sections(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGlobal_attribute_sections"):
                listener.exitGlobal_attribute_sections(self)




    def global_attribute_sections(self):

        localctx = CSharp4Parser.Global_attribute_sectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_global_attribute_sections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3273 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3272
                self.global_attribute_section()
                self.state = 3275 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CSharp4Parser.OPEN_BRACKET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attribute_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Global_attribute_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def global_attribute_target_specifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Global_attribute_target_specifierContext,0)


        def attribute_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attribute_section

        def enterRule(self, listener):
            if hasattr(listener, "enterGlobal_attribute_section"):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGlobal_attribute_section"):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharp4Parser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3277
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3278
            self.global_attribute_target_specifier()
            self.state = 3279
            self.attribute_list()
            self.state = 3281
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 3280
                self.match(CSharp4Parser.COMMA)


            self.state = 3283
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attribute_target_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Global_attribute_target_specifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharp4Parser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attribute_target_specifier

        def enterRule(self, listener):
            if hasattr(listener, "enterGlobal_attribute_target_specifier"):
                listener.enterGlobal_attribute_target_specifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGlobal_attribute_target_specifier"):
                listener.exitGlobal_attribute_target_specifier(self)




    def global_attribute_target_specifier(self):

        localctx = CSharp4Parser.Global_attribute_target_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_global_attribute_target_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3285
            self.global_attribute_target()
            self.state = 3286
            self.match(CSharp4Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attribute_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Global_attribute_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attribute_target

        def enterRule(self, listener):
            if hasattr(listener, "enterGlobal_attribute_target"):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGlobal_attribute_target"):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharp4Parser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_global_attribute_target)
        try:
            self.state = 3290
            token = self._input.LA(1)
            if token in [CSharp4Parser.T__0, CSharp4Parser.ABSTRACT, CSharp4Parser.AS, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BREAK, CSharp4Parser.BYTE, CSharp4Parser.CASE, CSharp4Parser.CATCH, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.CONTINUE, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DO, CSharp4Parser.DOUBLE, CSharp4Parser.ELSE, CSharp4Parser.ENUM, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.EXTERN, CSharp4Parser.FALSE, CSharp4Parser.FINALLY, CSharp4Parser.FIXED, CSharp4Parser.FLOAT, CSharp4Parser.FOR, CSharp4Parser.FOREACH, CSharp4Parser.GOTO, CSharp4Parser.IF, CSharp4Parser.IMPLICIT, CSharp4Parser.IN, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTERNAL, CSharp4Parser.IS, CSharp4Parser.LOCK, CSharp4Parser.LONG, CSharp4Parser.NAMESPACE, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.OPERATOR, CSharp4Parser.OUT, CSharp4Parser.OVERRIDE, CSharp4Parser.PARAMS, CSharp4Parser.PRIVATE, CSharp4Parser.PROTECTED, CSharp4Parser.PUBLIC, CSharp4Parser.READONLY, CSharp4Parser.REF, CSharp4Parser.RETURN, CSharp4Parser.SBYTE, CSharp4Parser.SEALED, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STACKALLOC, CSharp4Parser.STATIC, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.SWITCH, CSharp4Parser.THIS, CSharp4Parser.THROW, CSharp4Parser.TRUE, CSharp4Parser.TRY, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.USING, CSharp4Parser.VIRTUAL, CSharp4Parser.VOID, CSharp4Parser.VOLATILE, CSharp4Parser.WHILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3288
                self.keyword()

            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3289
                self.identifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.AttributesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attribute_sections(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_sectionsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attributes

        def enterRule(self, listener):
            if hasattr(listener, "enterAttributes"):
                listener.enterAttributes(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttributes"):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharp4Parser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3292
            self.attribute_sections()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_sectionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Attribute_sectionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_sections

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute_sections"):
                listener.enterAttribute_sections(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute_sections"):
                listener.exitAttribute_sections(self)




    def attribute_sections(self):

        localctx = CSharp4Parser.Attribute_sectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_attribute_sections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3295 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3294
                self.attribute_section()
                self.state = 3297 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CSharp4Parser.OPEN_BRACKET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Attribute_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def attribute_target_specifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_target_specifierContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_section

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute_section"):
                listener.enterAttribute_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute_section"):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharp4Parser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3299
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3301
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 3300
                self.attribute_target_specifier()


            self.state = 3303
            self.attribute_list()
            self.state = 3305
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 3304
                self.match(CSharp4Parser.COMMA)


            self.state = 3307
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_target_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Attribute_target_specifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attribute_target(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_target_specifier

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute_target_specifier"):
                listener.enterAttribute_target_specifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute_target_specifier"):
                listener.exitAttribute_target_specifier(self)




    def attribute_target_specifier(self):

        localctx = CSharp4Parser.Attribute_target_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_attribute_target_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3309
            self.attribute_target()
            self.state = 3310
            self.match(CSharp4Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Attribute_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_target

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute_target"):
                listener.enterAttribute_target(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute_target"):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharp4Parser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_attribute_target)
        try:
            self.state = 3314
            token = self._input.LA(1)
            if token in [CSharp4Parser.T__0, CSharp4Parser.ABSTRACT, CSharp4Parser.AS, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BREAK, CSharp4Parser.BYTE, CSharp4Parser.CASE, CSharp4Parser.CATCH, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.CONTINUE, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DO, CSharp4Parser.DOUBLE, CSharp4Parser.ELSE, CSharp4Parser.ENUM, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.EXTERN, CSharp4Parser.FALSE, CSharp4Parser.FINALLY, CSharp4Parser.FIXED, CSharp4Parser.FLOAT, CSharp4Parser.FOR, CSharp4Parser.FOREACH, CSharp4Parser.GOTO, CSharp4Parser.IF, CSharp4Parser.IMPLICIT, CSharp4Parser.IN, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTERNAL, CSharp4Parser.IS, CSharp4Parser.LOCK, CSharp4Parser.LONG, CSharp4Parser.NAMESPACE, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.OPERATOR, CSharp4Parser.OUT, CSharp4Parser.OVERRIDE, CSharp4Parser.PARAMS, CSharp4Parser.PRIVATE, CSharp4Parser.PROTECTED, CSharp4Parser.PUBLIC, CSharp4Parser.READONLY, CSharp4Parser.REF, CSharp4Parser.RETURN, CSharp4Parser.SBYTE, CSharp4Parser.SEALED, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STACKALLOC, CSharp4Parser.STATIC, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.SWITCH, CSharp4Parser.THIS, CSharp4Parser.THROW, CSharp4Parser.TRUE, CSharp4Parser.TRY, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.USING, CSharp4Parser.VIRTUAL, CSharp4Parser.VOID, CSharp4Parser.VOLATILE, CSharp4Parser.WHILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3312
                self.keyword()

            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3313
                self.identifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Attribute_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.AttributeContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_list

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute_list"):
                listener.enterAttribute_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute_list"):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharp4Parser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3316
            self.attribute()
            self.state = 3321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3317
                    self.match(CSharp4Parser.COMMA)
                    self.state = 3318
                    self.attribute() 
                self.state = 3323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.AttributeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_nameContext,0)


        def attribute_arguments(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_argumentsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute"):
                listener.enterAttribute(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute"):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharp4Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3324
            self.attribute_name()
            self.state = 3326
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_PARENS:
                self.state = 3325
                self.attribute_arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Attribute_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type121_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_name

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute_name"):
                listener.enterAttribute_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute_name"):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = CSharp4Parser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3328
            self.type121_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Attribute_argumentsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def positional_argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Positional_argument_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_arguments

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute_arguments"):
                listener.enterAttribute_arguments(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute_arguments"):
                listener.exitAttribute_arguments(self)




    def attribute_arguments(self):

        localctx = CSharp4Parser.Attribute_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_attribute_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3330
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3332
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 3331
                self.positional_argument_list()


            self.state = 3334
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Positional_argument_listContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # Positional_argumentContext
            self.arg2 = None # Positional_argumentContext

        def positional_argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Positional_argumentContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Positional_argumentContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_positional_argument_list

        def enterRule(self, listener):
            if hasattr(listener, "enterPositional_argument_list"):
                listener.enterPositional_argument_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPositional_argument_list"):
                listener.exitPositional_argument_list(self)




    def positional_argument_list(self):

        localctx = CSharp4Parser.Positional_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_positional_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            localctx.arg = self.positional_argument()
            self.state = 3341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 3337
                self.match(CSharp4Parser.COMMA)
                self.state = 3338
                localctx.arg2 = self.positional_argument()
                self.state = 3343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Positional_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def attribute_argument_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_argument_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_positional_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterPositional_argument"):
                listener.enterPositional_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPositional_argument"):
                listener.exitPositional_argument(self)




    def positional_argument(self):

        localctx = CSharp4Parser.Positional_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_positional_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3344
            self.attribute_argument_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Named_argument_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Named_argumentContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Named_argumentContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_named_argument_list

        def enterRule(self, listener):
            if hasattr(listener, "enterNamed_argument_list"):
                listener.enterNamed_argument_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamed_argument_list"):
                listener.exitNamed_argument_list(self)




    def named_argument_list(self):

        localctx = CSharp4Parser.Named_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_named_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3346
            self.named_argument()
            self.state = 3351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 3347
                self.match(CSharp4Parser.COMMA)
                self.state = 3348
                self.named_argument()
                self.state = 3353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Named_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def attribute_argument_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_argument_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_named_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterNamed_argument"):
                listener.enterNamed_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNamed_argument"):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = CSharp4Parser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3354
            self.identifier()
            self.state = 3355
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 3356
            self.attribute_argument_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_argument_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Attribute_argument_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_argument_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterAttribute_argument_expression"):
                listener.enterAttribute_argument_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttribute_argument_expression"):
                listener.exitAttribute_argument_expression(self)




    def attribute_argument_expression(self):

        localctx = CSharp4Parser.Attribute_argument_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_attribute_argument_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3358
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_modifier_unsafe"):
                listener.enterClass_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_modifier_unsafe"):
                listener.exitClass_modifier_unsafe(self)




    def class_modifier_unsafe(self):

        localctx = CSharp4Parser.Class_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_class_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3360
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_modifier_unsafe"):
                listener.enterStruct_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_modifier_unsafe"):
                listener.exitStruct_modifier_unsafe(self)




    def struct_modifier_unsafe(self):

        localctx = CSharp4Parser.Struct_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_struct_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3362
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_modifier_unsafe"):
                listener.enterInterface_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_modifier_unsafe"):
                listener.exitInterface_modifier_unsafe(self)




    def interface_modifier_unsafe(self):

        localctx = CSharp4Parser.Interface_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_interface_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3364
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Delegate_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterDelegate_modifier_unsafe"):
                listener.enterDelegate_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelegate_modifier_unsafe"):
                listener.exitDelegate_modifier_unsafe(self)




    def delegate_modifier_unsafe(self):

        localctx = CSharp4Parser.Delegate_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_delegate_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3366
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Field_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_field_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterField_modifier_unsafe"):
                listener.enterField_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitField_modifier_unsafe"):
                listener.exitField_modifier_unsafe(self)




    def field_modifier_unsafe(self):

        localctx = CSharp4Parser.Field_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_field_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3368
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_modifier_unsafe"):
                listener.enterMethod_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_modifier_unsafe"):
                listener.exitMethod_modifier_unsafe(self)




    def method_modifier_unsafe(self):

        localctx = CSharp4Parser.Method_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_method_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3370
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Property_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterProperty_modifier_unsafe"):
                listener.enterProperty_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProperty_modifier_unsafe"):
                listener.exitProperty_modifier_unsafe(self)




    def property_modifier_unsafe(self):

        localctx = CSharp4Parser.Property_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_property_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3372
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Event_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterEvent_modifier_unsafe"):
                listener.enterEvent_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvent_modifier_unsafe"):
                listener.exitEvent_modifier_unsafe(self)




    def event_modifier_unsafe(self):

        localctx = CSharp4Parser.Event_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_event_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3374
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Indexer_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexer_modifier_unsafe"):
                listener.enterIndexer_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexer_modifier_unsafe"):
                listener.exitIndexer_modifier_unsafe(self)




    def indexer_modifier_unsafe(self):

        localctx = CSharp4Parser.Indexer_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_indexer_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3376
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Operator_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterOperator_modifier_unsafe"):
                listener.enterOperator_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperator_modifier_unsafe"):
                listener.exitOperator_modifier_unsafe(self)




    def operator_modifier_unsafe(self):

        localctx = CSharp4Parser.Operator_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_operator_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3378
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_modifier_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_modifier_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_modifier_unsafe"):
                listener.enterConstructor_modifier_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_modifier_unsafe"):
                listener.exitConstructor_modifier_unsafe(self)




    def constructor_modifier_unsafe(self):

        localctx = CSharp4Parser.Constructor_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_constructor_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3380
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destructor_declaration_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Destructor_declaration_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def destructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Destructor_bodyContext,0)


        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_destructor_declaration_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterDestructor_declaration_unsafe"):
                listener.enterDestructor_declaration_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDestructor_declaration_unsafe"):
                listener.exitDestructor_declaration_unsafe(self)




    def destructor_declaration_unsafe(self):

        localctx = CSharp4Parser.Destructor_declaration_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_destructor_declaration_unsafe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3383
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3382
                self.attributes()


            self.state = 3393
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 3386
                _la = self._input.LA(1)
                if _la==CSharp4Parser.EXTERN:
                    self.state = 3385
                    self.match(CSharp4Parser.EXTERN)


                self.state = 3389
                _la = self._input.LA(1)
                if _la==CSharp4Parser.UNSAFE:
                    self.state = 3388
                    self.match(CSharp4Parser.UNSAFE)


                pass

            elif la_ == 2:
                self.state = 3391
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3392
                self.match(CSharp4Parser.EXTERN)
                pass


            self.state = 3395
            self.match(CSharp4Parser.TILDE)
            self.state = 3396
            self.identifier()
            self.state = 3397
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3398
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3399
            self.destructor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_constructor_modifiers_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Static_constructor_modifiers_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_static_constructor_modifiers_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterStatic_constructor_modifiers_unsafe"):
                listener.enterStatic_constructor_modifiers_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatic_constructor_modifiers_unsafe"):
                listener.exitStatic_constructor_modifiers_unsafe(self)




    def static_constructor_modifiers_unsafe(self):

        localctx = CSharp4Parser.Static_constructor_modifiers_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_static_constructor_modifiers_unsafe)
        self._la = 0 # Token type
        try:
            self.state = 3425
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3402
                _la = self._input.LA(1)
                if _la==CSharp4Parser.EXTERN or _la==CSharp4Parser.UNSAFE:
                    self.state = 3401
                    _la = self._input.LA(1)
                    if not(_la==CSharp4Parser.EXTERN or _la==CSharp4Parser.UNSAFE):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()


                self.state = 3404
                self.match(CSharp4Parser.STATIC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3405
                self.match(CSharp4Parser.EXTERN)
                self.state = 3406
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3407
                self.match(CSharp4Parser.STATIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3408
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3409
                self.match(CSharp4Parser.EXTERN)
                self.state = 3410
                self.match(CSharp4Parser.STATIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3411
                self.match(CSharp4Parser.EXTERN)
                self.state = 3412
                self.match(CSharp4Parser.STATIC)
                self.state = 3413
                self.match(CSharp4Parser.UNSAFE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3414
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3415
                self.match(CSharp4Parser.STATIC)
                self.state = 3416
                self.match(CSharp4Parser.EXTERN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3417
                self.match(CSharp4Parser.STATIC)
                self.state = 3418
                _la = self._input.LA(1)
                if not(_la==CSharp4Parser.EXTERN or _la==CSharp4Parser.UNSAFE):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3419
                self.match(CSharp4Parser.STATIC)
                self.state = 3420
                self.match(CSharp4Parser.EXTERN)
                self.state = 3421
                self.match(CSharp4Parser.UNSAFE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3422
                self.match(CSharp4Parser.STATIC)
                self.state = 3423
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3424
                self.match(CSharp4Parser.EXTERN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Embedded_statement_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Embedded_statement_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unsafe_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Unsafe_statementContext,0)


        def fixed_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_embedded_statement_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterEmbedded_statement_unsafe"):
                listener.enterEmbedded_statement_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEmbedded_statement_unsafe"):
                listener.exitEmbedded_statement_unsafe(self)




    def embedded_statement_unsafe(self):

        localctx = CSharp4Parser.Embedded_statement_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_embedded_statement_unsafe)
        try:
            self.state = 3429
            token = self._input.LA(1)
            if token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3427
                self.unsafe_statement()

            elif token in [CSharp4Parser.FIXED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3428
                self.fixed_statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unsafe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Unsafe_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unsafe_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterUnsafe_statement"):
                listener.enterUnsafe_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnsafe_statement"):
                listener.exitUnsafe_statement(self)




    def unsafe_statement(self):

        localctx = CSharp4Parser.Unsafe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_unsafe_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3431
            self.match(CSharp4Parser.UNSAFE)
            self.state = 3432
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pointer_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Pointer_type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterType121_unsafe"):
                listener.enterType121_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121_unsafe"):
                listener.exitType121_unsafe(self)




    def type121_unsafe(self):

        localctx = CSharp4Parser.Type121_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_type121_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3434
            self.pointer_type121()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pointer_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Pointer_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def simple_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_type121Context,0)


        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def rank_specifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def INTERR(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def class_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_type121Context,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_pointer_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterPointer_type121"):
                listener.enterPointer_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPointer_type121"):
                listener.exitPointer_type121(self)




    def pointer_type121(self):

        localctx = CSharp4Parser.Pointer_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_pointer_type121)
        self._la = 0 # Token type
        try:
            self.state = 3458
            token = self._input.LA(1)
            if token in [CSharp4Parser.BOOL, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3436
                self.simple_type121()
                self.state = 3441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.OPEN_BRACKET or _la==CSharp4Parser.INTERR:
                    self.state = 3439
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.OPEN_BRACKET]:
                        self.state = 3437
                        self.rank_specifier()

                    elif token in [CSharp4Parser.INTERR]:
                        self.state = 3438
                        self.match(CSharp4Parser.INTERR)

                    else:
                        raise NoViableAltException(self)

                    self.state = 3443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3444
                self.match(CSharp4Parser.STAR)

            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3446
                self.class_type121()
                self.state = 3451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.OPEN_BRACKET or _la==CSharp4Parser.INTERR:
                    self.state = 3449
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.OPEN_BRACKET]:
                        self.state = 3447
                        self.rank_specifier()

                    elif token in [CSharp4Parser.INTERR]:
                        self.state = 3448
                        self.match(CSharp4Parser.INTERR)

                    else:
                        raise NoViableAltException(self)

                    self.state = 3453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3454
                self.match(CSharp4Parser.STAR)

            elif token in [CSharp4Parser.VOID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3456
                self.match(CSharp4Parser.VOID)
                self.state = 3457
                self.match(CSharp4Parser.STAR)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unmanaged_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Unmanaged_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unmanaged_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterUnmanaged_type121"):
                listener.enterUnmanaged_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnmanaged_type121"):
                listener.exitUnmanaged_type121(self)




    def unmanaged_type121(self):

        localctx = CSharp4Parser.Unmanaged_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_unmanaged_type121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3460
            self.type121()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_no_array_creation_expression_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Primary_no_array_creation_expression_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_primary_no_array_creation_expression_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterPrimary_no_array_creation_expression_unsafe"):
                listener.enterPrimary_no_array_creation_expression_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrimary_no_array_creation_expression_unsafe"):
                listener.exitPrimary_no_array_creation_expression_unsafe(self)




    def primary_no_array_creation_expression_unsafe(self):

        localctx = CSharp4Parser.Primary_no_array_creation_expression_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_primary_no_array_creation_expression_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3462
            self.primary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expression_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Unary_expression_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pointer_indirection_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Pointer_indirection_expressionContext,0)


        def addressof_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Addressof_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unary_expression_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterUnary_expression_unsafe"):
                listener.enterUnary_expression_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnary_expression_unsafe"):
                listener.exitUnary_expression_unsafe(self)




    def unary_expression_unsafe(self):

        localctx = CSharp4Parser.Unary_expression_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_unary_expression_unsafe)
        try:
            self.state = 3466
            token = self._input.LA(1)
            if token in [CSharp4Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3464
                self.pointer_indirection_expression()

            elif token in [CSharp4Parser.AMP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3465
                self.addressof_expression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pointer_indirection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Pointer_indirection_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_pointer_indirection_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterPointer_indirection_expression"):
                listener.enterPointer_indirection_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPointer_indirection_expression"):
                listener.exitPointer_indirection_expression(self)




    def pointer_indirection_expression(self):

        localctx = CSharp4Parser.Pointer_indirection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_pointer_indirection_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3468
            self.match(CSharp4Parser.STAR)
            self.state = 3469
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Addressof_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Addressof_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AMP(self):
            return self.getToken(CSharp4Parser.AMP, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_addressof_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterAddressof_expression"):
                listener.enterAddressof_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddressof_expression"):
                listener.exitAddressof_expression(self)




    def addressof_expression(self):

        localctx = CSharp4Parser.Addressof_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_addressof_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3471
            self.match(CSharp4Parser.AMP)
            self.state = 3472
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sizeof_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Sizeof_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SIZEOF(self):
            return self.getToken(CSharp4Parser.SIZEOF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def unmanaged_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Unmanaged_type121Context,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_sizeof_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterSizeof_expression"):
                listener.enterSizeof_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSizeof_expression"):
                listener.exitSizeof_expression(self)




    def sizeof_expression(self):

        localctx = CSharp4Parser.Sizeof_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_sizeof_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3474
            self.match(CSharp4Parser.SIZEOF)
            self.state = 3475
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3476
            self.unmanaged_type121()
            self.state = 3477
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def pointer_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Pointer_type121Context,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_pointer_declaratorsContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_statement"):
                listener.enterFixed_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_statement"):
                listener.exitFixed_statement(self)




    def fixed_statement(self):

        localctx = CSharp4Parser.Fixed_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_fixed_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3479
            self.match(CSharp4Parser.FIXED)
            self.state = 3480
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3481
            self.pointer_type121()
            self.state = 3482
            self.fixed_pointer_declarators()
            self.state = 3483
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3484
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_pointer_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_pointer_declaratorsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_pointer_declarators

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_pointer_declarators"):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_pointer_declarators"):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharp4Parser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3486
            self.fixed_pointer_declarator()
            self.state = 3491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 3487
                self.match(CSharp4Parser.COMMA)
                self.state = 3488
                self.fixed_pointer_declarator()
                self.state = 3493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_pointer_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_pointer_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_pointer_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_pointer_declarator"):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_pointer_declarator"):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharp4Parser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3494
            self.identifier()
            self.state = 3495
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 3496
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_pointer_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_pointer_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AMP(self):
            return self.getToken(CSharp4Parser.AMP, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_referenceContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_pointer_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_pointer_initializer"):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_pointer_initializer"):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharp4Parser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 3501
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3498
                self.match(CSharp4Parser.AMP)
                self.state = 3499
                self.variable_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3500
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_member_declaration_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_member_declaration_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fixed_size_buffer_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_declarationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_member_declaration_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_member_declaration_unsafe"):
                listener.enterStruct_member_declaration_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_member_declaration_unsafe"):
                listener.exitStruct_member_declaration_unsafe(self)




    def struct_member_declaration_unsafe(self):

        localctx = CSharp4Parser.Struct_member_declaration_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_struct_member_declaration_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3503
            self.fixed_size_buffer_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_size_buffer_declarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def buffer_element_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Buffer_element_type121Context,0)


        def fixed_size_buffer_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def fixed_size_buffer_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_size_buffer_declaration"):
                listener.enterFixed_size_buffer_declaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_size_buffer_declaration"):
                listener.exitFixed_size_buffer_declaration(self)




    def fixed_size_buffer_declaration(self):

        localctx = CSharp4Parser.Fixed_size_buffer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_fixed_size_buffer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3506
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3505
                self.attributes()


            self.state = 3509
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0):
                self.state = 3508
                self.fixed_size_buffer_modifiers()


            self.state = 3511
            self.match(CSharp4Parser.FIXED)
            self.state = 3512
            self.buffer_element_type121()
            self.state = 3513
            self.fixed_size_buffer_declarators()
            self.state = 3514
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_size_buffer_modifiersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fixed_size_buffer_modifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Fixed_size_buffer_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_modifiers

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_size_buffer_modifiers"):
                listener.enterFixed_size_buffer_modifiers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_size_buffer_modifiers"):
                listener.exitFixed_size_buffer_modifiers(self)




    def fixed_size_buffer_modifiers(self):

        localctx = CSharp4Parser.Fixed_size_buffer_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_fixed_size_buffer_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3517 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3516
                self.fixed_size_buffer_modifier()
                self.state = 3519 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_size_buffer_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_size_buffer_modifier"):
                listener.enterFixed_size_buffer_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_size_buffer_modifier"):
                listener.exitFixed_size_buffer_modifier(self)




    def fixed_size_buffer_modifier(self):

        localctx = CSharp4Parser.Fixed_size_buffer_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_fixed_size_buffer_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3521
            _la = self._input.LA(1)
            if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (CSharp4Parser.INTERNAL - 56)) | (1 << (CSharp4Parser.NEW - 56)) | (1 << (CSharp4Parser.PRIVATE - 56)) | (1 << (CSharp4Parser.PROTECTED - 56)) | (1 << (CSharp4Parser.PUBLIC - 56)) | (1 << (CSharp4Parser.UNSAFE - 56)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Buffer_element_type121Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Buffer_element_type121Context, self).__init__(parent, invokingState)
            self.parser = parser

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_buffer_element_type121

        def enterRule(self, listener):
            if hasattr(listener, "enterBuffer_element_type121"):
                listener.enterBuffer_element_type121(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBuffer_element_type121"):
                listener.exitBuffer_element_type121(self)




    def buffer_element_type121(self):

        localctx = CSharp4Parser.Buffer_element_type121Context(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_buffer_element_type121)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3523
            self.type121()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_size_buffer_declaratorsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fixed_size_buffer_declarator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_declarators

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_size_buffer_declarators"):
                listener.enterFixed_size_buffer_declarators(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_size_buffer_declarators"):
                listener.exitFixed_size_buffer_declarators(self)




    def fixed_size_buffer_declarators(self):

        localctx = CSharp4Parser.Fixed_size_buffer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_fixed_size_buffer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3526 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3525
                self.fixed_size_buffer_declarator()
                self.state = 3528 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CSharp4Parser.ON - 67)) | (1 << (CSharp4Parser.ORDERBY - 67)) | (1 << (CSharp4Parser.PARTIAL - 67)) | (1 << (CSharp4Parser.REMOVE - 67)) | (1 << (CSharp4Parser.SELECT - 67)) | (1 << (CSharp4Parser.SET - 67)) | (1 << (CSharp4Parser.WHERE - 67)) | (1 << (CSharp4Parser.YIELD - 67)) | (1 << (CSharp4Parser.IDENTIFIER - 67)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Fixed_size_buffer_declaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener):
            if hasattr(listener, "enterFixed_size_buffer_declarator"):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFixed_size_buffer_declarator"):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharp4Parser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3530
            self.identifier()
            self.state = 3531
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3532
            self.constant_expression()
            self.state = 3533
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_initializer_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Local_variable_initializer_unsafeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_initializer_unsafe

        def enterRule(self, listener):
            if hasattr(listener, "enterLocal_variable_initializer_unsafe"):
                listener.enterLocal_variable_initializer_unsafe(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocal_variable_initializer_unsafe"):
                listener.exitLocal_variable_initializer_unsafe(self)




    def local_variable_initializer_unsafe(self):

        localctx = CSharp4Parser.Local_variable_initializer_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_local_variable_initializer_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3535
            self.stackalloc_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stackalloc_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Stackalloc_initializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharp4Parser.STACKALLOC, 0)

        def unmanaged_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Unmanaged_type121Context,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_stackalloc_initializer

        def enterRule(self, listener):
            if hasattr(listener, "enterStackalloc_initializer"):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStackalloc_initializer"):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharp4Parser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_stackalloc_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3537
            self.match(CSharp4Parser.STACKALLOC)
            self.state = 3538
            self.unmanaged_type121()
            self.state = 3539
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3540
            self.expression()
            self.state = 3541
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.From_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharp4Parser.FROM, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_from_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterFrom_contextual_keyword"):
                listener.enterFrom_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFrom_contextual_keyword"):
                listener.exitFrom_contextual_keyword(self)




    def from_contextual_keyword(self):

        localctx = CSharp4Parser.From_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_from_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3543
            self.match(CSharp4Parser.FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Let_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharp4Parser.LET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_let_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterLet_contextual_keyword"):
                listener.enterLet_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLet_contextual_keyword"):
                listener.exitLet_contextual_keyword(self)




    def let_contextual_keyword(self):

        localctx = CSharp4Parser.Let_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_let_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3545
            self.match(CSharp4Parser.LET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Where_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharp4Parser.WHERE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_where_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterWhere_contextual_keyword"):
                listener.enterWhere_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWhere_contextual_keyword"):
                listener.exitWhere_contextual_keyword(self)




    def where_contextual_keyword(self):

        localctx = CSharp4Parser.Where_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_where_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3547
            self.match(CSharp4Parser.WHERE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Join_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharp4Parser.JOIN, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_join_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_contextual_keyword"):
                listener.enterJoin_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_contextual_keyword"):
                listener.exitJoin_contextual_keyword(self)




    def join_contextual_keyword(self):

        localctx = CSharp4Parser.Join_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_join_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3549
            self.match(CSharp4Parser.JOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.On_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CSharp4Parser.ON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_on_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterOn_contextual_keyword"):
                listener.enterOn_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOn_contextual_keyword"):
                listener.exitOn_contextual_keyword(self)




    def on_contextual_keyword(self):

        localctx = CSharp4Parser.On_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_on_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3551
            self.match(CSharp4Parser.ON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equals_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Equals_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(CSharp4Parser.EQUALS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_equals_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterEquals_contextual_keyword"):
                listener.enterEquals_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEquals_contextual_keyword"):
                listener.exitEquals_contextual_keyword(self)




    def equals_contextual_keyword(self):

        localctx = CSharp4Parser.Equals_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_equals_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3553
            self.match(CSharp4Parser.EQUALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Into_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharp4Parser.INTO, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_into_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterInto_contextual_keyword"):
                listener.enterInto_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInto_contextual_keyword"):
                listener.exitInto_contextual_keyword(self)




    def into_contextual_keyword(self):

        localctx = CSharp4Parser.Into_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_into_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3555
            self.match(CSharp4Parser.INTO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Orderby_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharp4Parser.ORDERBY, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_orderby_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterOrderby_contextual_keyword"):
                listener.enterOrderby_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrderby_contextual_keyword"):
                listener.exitOrderby_contextual_keyword(self)




    def orderby_contextual_keyword(self):

        localctx = CSharp4Parser.Orderby_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_orderby_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self.match(CSharp4Parser.ORDERBY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ascending_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Ascending_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASCENDING(self):
            return self.getToken(CSharp4Parser.ASCENDING, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_ascending_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterAscending_contextual_keyword"):
                listener.enterAscending_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAscending_contextual_keyword"):
                listener.exitAscending_contextual_keyword(self)




    def ascending_contextual_keyword(self):

        localctx = CSharp4Parser.Ascending_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_ascending_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3559
            self.match(CSharp4Parser.ASCENDING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Descending_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Descending_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DESCENDING(self):
            return self.getToken(CSharp4Parser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_descending_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterDescending_contextual_keyword"):
                listener.enterDescending_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDescending_contextual_keyword"):
                listener.exitDescending_contextual_keyword(self)




    def descending_contextual_keyword(self):

        localctx = CSharp4Parser.Descending_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_descending_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self.match(CSharp4Parser.DESCENDING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Select_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharp4Parser.SELECT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_select_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_contextual_keyword"):
                listener.enterSelect_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_contextual_keyword"):
                listener.exitSelect_contextual_keyword(self)




    def select_contextual_keyword(self):

        localctx = CSharp4Parser.Select_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_select_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3563
            self.match(CSharp4Parser.SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Group_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(CSharp4Parser.GROUP, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_group_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterGroup_contextual_keyword"):
                listener.enterGroup_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGroup_contextual_keyword"):
                listener.exitGroup_contextual_keyword(self)




    def group_contextual_keyword(self):

        localctx = CSharp4Parser.Group_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_group_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3565
            self.match(CSharp4Parser.GROUP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class By_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.By_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(CSharp4Parser.BY, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_by_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterBy_contextual_keyword"):
                listener.enterBy_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBy_contextual_keyword"):
                listener.exitBy_contextual_keyword(self)




    def by_contextual_keyword(self):

        localctx = CSharp4Parser.By_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_by_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3567
            self.match(CSharp4Parser.BY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partial_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Partial_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PARTIAL(self):
            return self.getToken(CSharp4Parser.PARTIAL, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_partial_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterPartial_contextual_keyword"):
                listener.enterPartial_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartial_contextual_keyword"):
                listener.exitPartial_contextual_keyword(self)




    def partial_contextual_keyword(self):

        localctx = CSharp4Parser.Partial_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_partial_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            self.match(CSharp4Parser.PARTIAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alias_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Alias_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(CSharp4Parser.ALIAS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_alias_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterAlias_contextual_keyword"):
                listener.enterAlias_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlias_contextual_keyword"):
                listener.exitAlias_contextual_keyword(self)




    def alias_contextual_keyword(self):

        localctx = CSharp4Parser.Alias_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_alias_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3571
            self.match(CSharp4Parser.ALIAS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Yield_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(CSharp4Parser.YIELD, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_yield_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterYield_contextual_keyword"):
                listener.enterYield_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitYield_contextual_keyword"):
                listener.exitYield_contextual_keyword(self)




    def yield_contextual_keyword(self):

        localctx = CSharp4Parser.Yield_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_yield_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3573
            self.match(CSharp4Parser.YIELD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Get_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharp4Parser.GET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_get_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterGet_contextual_keyword"):
                listener.enterGet_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGet_contextual_keyword"):
                listener.exitGet_contextual_keyword(self)




    def get_contextual_keyword(self):

        localctx = CSharp4Parser.Get_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_get_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3575
            self.match(CSharp4Parser.GET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Set_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharp4Parser.SET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_set_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterSet_contextual_keyword"):
                listener.enterSet_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSet_contextual_keyword"):
                listener.exitSet_contextual_keyword(self)




    def set_contextual_keyword(self):

        localctx = CSharp4Parser.Set_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_set_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3577
            self.match(CSharp4Parser.SET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Add_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharp4Parser.ADD, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_add_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterAdd_contextual_keyword"):
                listener.enterAdd_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAdd_contextual_keyword"):
                listener.exitAdd_contextual_keyword(self)




    def add_contextual_keyword(self):

        localctx = CSharp4Parser.Add_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_add_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            self.match(CSharp4Parser.ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remove_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Remove_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharp4Parser.REMOVE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_remove_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterRemove_contextual_keyword"):
                listener.enterRemove_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRemove_contextual_keyword"):
                listener.exitRemove_contextual_keyword(self)




    def remove_contextual_keyword(self):

        localctx = CSharp4Parser.Remove_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_remove_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3581
            self.match(CSharp4Parser.REMOVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dynamic_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Dynamic_contextual_keywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DYNAMIC(self):
            return self.getToken(CSharp4Parser.DYNAMIC, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_dynamic_contextual_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterDynamic_contextual_keyword"):
                listener.enterDynamic_contextual_keyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDynamic_contextual_keyword"):
                listener.exitDynamic_contextual_keyword(self)




    def dynamic_contextual_keyword(self):

        localctx = CSharp4Parser.Dynamic_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_dynamic_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3583
            self.match(CSharp4Parser.DYNAMIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.ArglistContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ARGLIST(self):
            return self.getToken(CSharp4Parser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_arglist

        def enterRule(self, listener):
            if hasattr(listener, "enterArglist"):
                listener.enterArglist(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArglist"):
                listener.exitArglist(self)




    def arglist(self):

        localctx = CSharp4Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_arglist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3585
            self.match(CSharp4Parser.ARGLIST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Right_arrowContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Right_arrowContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_right_arrow

        def enterRule(self, listener):
            if hasattr(listener, "enterRight_arrow"):
                listener.enterRight_arrow(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRight_arrow"):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharp4Parser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3587
            localctx.first = self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 3588
            localctx.second = self.match(CSharp4Parser.GT)
            self.state = 3589
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Right_shiftContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Right_shiftContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.GT)
            else:
                return self.getToken(CSharp4Parser.GT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_right_shift

        def enterRule(self, listener):
            if hasattr(listener, "enterRight_shift"):
                listener.enterRight_shift(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRight_shift"):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharp4Parser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            localctx.first = self.match(CSharp4Parser.GT)
            self.state = 3592
            localctx.second = self.match(CSharp4Parser.GT)
            self.state = 3593
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Right_shift_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Right_shift_assignmentContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharp4Parser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_right_shift_assignment

        def enterRule(self, listener):
            if hasattr(listener, "enterRight_shift_assignment"):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRight_shift_assignment"):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharp4Parser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3595
            localctx.first = self.match(CSharp4Parser.GT)
            self.state = 3596
            localctx.second = self.match(CSharp4Parser.OP_GE)
            self.state = 3597
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.LiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharp4Parser.INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharp4Parser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharp4Parser.CHARACTER_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(CSharp4Parser.STRING_LITERAL, 0)

        def NULL(self):
            return self.getToken(CSharp4Parser.NULL, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharp4Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_literal)
        try:
            self.state = 3605
            token = self._input.LA(1)
            if token in [CSharp4Parser.FALSE, CSharp4Parser.TRUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3599
                self.boolean_literal()

            elif token in [CSharp4Parser.INTEGER_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3600
                self.match(CSharp4Parser.INTEGER_LITERAL)

            elif token in [CSharp4Parser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3601
                self.match(CSharp4Parser.REAL_LITERAL)

            elif token in [CSharp4Parser.CHARACTER_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3602
                self.match(CSharp4Parser.CHARACTER_LITERAL)

            elif token in [CSharp4Parser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3603
                self.match(CSharp4Parser.STRING_LITERAL)

            elif token in [CSharp4Parser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3604
                self.match(CSharp4Parser.NULL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Boolean_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Boolean_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharp4Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharp4Parser.FALSE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_boolean_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterBoolean_literal"):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBoolean_literal"):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharp4Parser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3607
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.FALSE or _la==CSharp4Parser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.KeywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharp4Parser.AS, 0)

        def BASE(self):
            return self.getToken(CSharp4Parser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharp4Parser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharp4Parser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharp4Parser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharp4Parser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharp4Parser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharp4Parser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharp4Parser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharp4Parser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharp4Parser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharp4Parser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharp4Parser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharp4Parser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharp4Parser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharp4Parser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharp4Parser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharp4Parser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharp4Parser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharp4Parser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharp4Parser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharp4Parser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharp4Parser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharp4Parser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharp4Parser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def INT(self):
            return self.getToken(CSharp4Parser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharp4Parser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharp4Parser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharp4Parser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharp4Parser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharp4Parser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def NULL(self):
            return self.getToken(CSharp4Parser.NULL, 0)

        def OBJECT(self):
            return self.getToken(CSharp4Parser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharp4Parser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharp4Parser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharp4Parser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharp4Parser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharp4Parser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharp4Parser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharp4Parser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharp4Parser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharp4Parser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharp4Parser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharp4Parser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharp4Parser.TRY, 0)

        def type121OF(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121OFContext,0)


        def UINT(self):
            return self.getToken(CSharp4Parser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharp4Parser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharp4Parser.UNCHECKED, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharp4Parser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharp4Parser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharp4Parser.WHILE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharp4Parser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_keyword)
        try:
            self.state = 3686
            token = self._input.LA(1)
            if token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3609
                self.match(CSharp4Parser.ABSTRACT)

            elif token in [CSharp4Parser.AS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3610
                self.match(CSharp4Parser.AS)

            elif token in [CSharp4Parser.BASE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3611
                self.match(CSharp4Parser.BASE)

            elif token in [CSharp4Parser.BOOL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3612
                self.match(CSharp4Parser.BOOL)

            elif token in [CSharp4Parser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3613
                self.match(CSharp4Parser.BREAK)

            elif token in [CSharp4Parser.BYTE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3614
                self.match(CSharp4Parser.BYTE)

            elif token in [CSharp4Parser.CASE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3615
                self.match(CSharp4Parser.CASE)

            elif token in [CSharp4Parser.CATCH]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3616
                self.match(CSharp4Parser.CATCH)

            elif token in [CSharp4Parser.CHAR]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3617
                self.match(CSharp4Parser.CHAR)

            elif token in [CSharp4Parser.CHECKED]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3618
                self.match(CSharp4Parser.CHECKED)

            elif token in [CSharp4Parser.CLASS]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3619
                self.match(CSharp4Parser.CLASS)

            elif token in [CSharp4Parser.CONST]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3620
                self.match(CSharp4Parser.CONST)

            elif token in [CSharp4Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3621
                self.match(CSharp4Parser.CONTINUE)

            elif token in [CSharp4Parser.DECIMAL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3622
                self.match(CSharp4Parser.DECIMAL)

            elif token in [CSharp4Parser.DEFAULT]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3623
                self.match(CSharp4Parser.DEFAULT)

            elif token in [CSharp4Parser.DELEGATE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3624
                self.match(CSharp4Parser.DELEGATE)

            elif token in [CSharp4Parser.DO]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3625
                self.match(CSharp4Parser.DO)

            elif token in [CSharp4Parser.DOUBLE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3626
                self.match(CSharp4Parser.DOUBLE)

            elif token in [CSharp4Parser.ELSE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3627
                self.match(CSharp4Parser.ELSE)

            elif token in [CSharp4Parser.ENUM]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3628
                self.match(CSharp4Parser.ENUM)

            elif token in [CSharp4Parser.EVENT]:
                self.enterOuterAlt(localctx, 21)
                self.state = 3629
                self.match(CSharp4Parser.EVENT)

            elif token in [CSharp4Parser.EXPLICIT]:
                self.enterOuterAlt(localctx, 22)
                self.state = 3630
                self.match(CSharp4Parser.EXPLICIT)

            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 23)
                self.state = 3631
                self.match(CSharp4Parser.EXTERN)

            elif token in [CSharp4Parser.FALSE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 3632
                self.match(CSharp4Parser.FALSE)

            elif token in [CSharp4Parser.FINALLY]:
                self.enterOuterAlt(localctx, 25)
                self.state = 3633
                self.match(CSharp4Parser.FINALLY)

            elif token in [CSharp4Parser.FIXED]:
                self.enterOuterAlt(localctx, 26)
                self.state = 3634
                self.match(CSharp4Parser.FIXED)

            elif token in [CSharp4Parser.FLOAT]:
                self.enterOuterAlt(localctx, 27)
                self.state = 3635
                self.match(CSharp4Parser.FLOAT)

            elif token in [CSharp4Parser.FOR]:
                self.enterOuterAlt(localctx, 28)
                self.state = 3636
                self.match(CSharp4Parser.FOR)

            elif token in [CSharp4Parser.FOREACH]:
                self.enterOuterAlt(localctx, 29)
                self.state = 3637
                self.match(CSharp4Parser.FOREACH)

            elif token in [CSharp4Parser.GOTO]:
                self.enterOuterAlt(localctx, 30)
                self.state = 3638
                self.match(CSharp4Parser.GOTO)

            elif token in [CSharp4Parser.IF]:
                self.enterOuterAlt(localctx, 31)
                self.state = 3639
                self.match(CSharp4Parser.IF)

            elif token in [CSharp4Parser.IMPLICIT]:
                self.enterOuterAlt(localctx, 32)
                self.state = 3640
                self.match(CSharp4Parser.IMPLICIT)

            elif token in [CSharp4Parser.IN]:
                self.enterOuterAlt(localctx, 33)
                self.state = 3641
                self.match(CSharp4Parser.IN)

            elif token in [CSharp4Parser.INT]:
                self.enterOuterAlt(localctx, 34)
                self.state = 3642
                self.match(CSharp4Parser.INT)

            elif token in [CSharp4Parser.INTERFACE]:
                self.enterOuterAlt(localctx, 35)
                self.state = 3643
                self.match(CSharp4Parser.INTERFACE)

            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 36)
                self.state = 3644
                self.match(CSharp4Parser.INTERNAL)

            elif token in [CSharp4Parser.IS]:
                self.enterOuterAlt(localctx, 37)
                self.state = 3645
                self.match(CSharp4Parser.IS)

            elif token in [CSharp4Parser.LOCK]:
                self.enterOuterAlt(localctx, 38)
                self.state = 3646
                self.match(CSharp4Parser.LOCK)

            elif token in [CSharp4Parser.LONG]:
                self.enterOuterAlt(localctx, 39)
                self.state = 3647
                self.match(CSharp4Parser.LONG)

            elif token in [CSharp4Parser.NAMESPACE]:
                self.enterOuterAlt(localctx, 40)
                self.state = 3648
                self.match(CSharp4Parser.NAMESPACE)

            elif token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 41)
                self.state = 3649
                self.match(CSharp4Parser.NEW)

            elif token in [CSharp4Parser.NULL]:
                self.enterOuterAlt(localctx, 42)
                self.state = 3650
                self.match(CSharp4Parser.NULL)

            elif token in [CSharp4Parser.OBJECT]:
                self.enterOuterAlt(localctx, 43)
                self.state = 3651
                self.match(CSharp4Parser.OBJECT)

            elif token in [CSharp4Parser.OPERATOR]:
                self.enterOuterAlt(localctx, 44)
                self.state = 3652
                self.match(CSharp4Parser.OPERATOR)

            elif token in [CSharp4Parser.OUT]:
                self.enterOuterAlt(localctx, 45)
                self.state = 3653
                self.match(CSharp4Parser.OUT)

            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 46)
                self.state = 3654
                self.match(CSharp4Parser.OVERRIDE)

            elif token in [CSharp4Parser.PARAMS]:
                self.enterOuterAlt(localctx, 47)
                self.state = 3655
                self.match(CSharp4Parser.PARAMS)

            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 48)
                self.state = 3656
                self.match(CSharp4Parser.PRIVATE)

            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 49)
                self.state = 3657
                self.match(CSharp4Parser.PROTECTED)

            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 50)
                self.state = 3658
                self.match(CSharp4Parser.PUBLIC)

            elif token in [CSharp4Parser.READONLY]:
                self.enterOuterAlt(localctx, 51)
                self.state = 3659
                self.match(CSharp4Parser.READONLY)

            elif token in [CSharp4Parser.REF]:
                self.enterOuterAlt(localctx, 52)
                self.state = 3660
                self.match(CSharp4Parser.REF)

            elif token in [CSharp4Parser.RETURN]:
                self.enterOuterAlt(localctx, 53)
                self.state = 3661
                self.match(CSharp4Parser.RETURN)

            elif token in [CSharp4Parser.SBYTE]:
                self.enterOuterAlt(localctx, 54)
                self.state = 3662
                self.match(CSharp4Parser.SBYTE)

            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 55)
                self.state = 3663
                self.match(CSharp4Parser.SEALED)

            elif token in [CSharp4Parser.SHORT]:
                self.enterOuterAlt(localctx, 56)
                self.state = 3664
                self.match(CSharp4Parser.SHORT)

            elif token in [CSharp4Parser.SIZEOF]:
                self.enterOuterAlt(localctx, 57)
                self.state = 3665
                self.match(CSharp4Parser.SIZEOF)

            elif token in [CSharp4Parser.STACKALLOC]:
                self.enterOuterAlt(localctx, 58)
                self.state = 3666
                self.match(CSharp4Parser.STACKALLOC)

            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 59)
                self.state = 3667
                self.match(CSharp4Parser.STATIC)

            elif token in [CSharp4Parser.STRING]:
                self.enterOuterAlt(localctx, 60)
                self.state = 3668
                self.match(CSharp4Parser.STRING)

            elif token in [CSharp4Parser.STRUCT]:
                self.enterOuterAlt(localctx, 61)
                self.state = 3669
                self.match(CSharp4Parser.STRUCT)

            elif token in [CSharp4Parser.SWITCH]:
                self.enterOuterAlt(localctx, 62)
                self.state = 3670
                self.match(CSharp4Parser.SWITCH)

            elif token in [CSharp4Parser.THIS]:
                self.enterOuterAlt(localctx, 63)
                self.state = 3671
                self.match(CSharp4Parser.THIS)

            elif token in [CSharp4Parser.THROW]:
                self.enterOuterAlt(localctx, 64)
                self.state = 3672
                self.match(CSharp4Parser.THROW)

            elif token in [CSharp4Parser.TRUE]:
                self.enterOuterAlt(localctx, 65)
                self.state = 3673
                self.match(CSharp4Parser.TRUE)

            elif token in [CSharp4Parser.TRY]:
                self.enterOuterAlt(localctx, 66)
                self.state = 3674
                self.match(CSharp4Parser.TRY)

            elif token in [CSharp4Parser.T__0]:
                self.enterOuterAlt(localctx, 67)
                self.state = 3675
                self.type121OF()

            elif token in [CSharp4Parser.UINT]:
                self.enterOuterAlt(localctx, 68)
                self.state = 3676
                self.match(CSharp4Parser.UINT)

            elif token in [CSharp4Parser.ULONG]:
                self.enterOuterAlt(localctx, 69)
                self.state = 3677
                self.match(CSharp4Parser.ULONG)

            elif token in [CSharp4Parser.UNCHECKED]:
                self.enterOuterAlt(localctx, 70)
                self.state = 3678
                self.match(CSharp4Parser.UNCHECKED)

            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 71)
                self.state = 3679
                self.match(CSharp4Parser.UNSAFE)

            elif token in [CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 72)
                self.state = 3680
                self.match(CSharp4Parser.USHORT)

            elif token in [CSharp4Parser.USING]:
                self.enterOuterAlt(localctx, 73)
                self.state = 3681
                self.match(CSharp4Parser.USING)

            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 74)
                self.state = 3682
                self.match(CSharp4Parser.VIRTUAL)

            elif token in [CSharp4Parser.VOID]:
                self.enterOuterAlt(localctx, 75)
                self.state = 3683
                self.match(CSharp4Parser.VOID)

            elif token in [CSharp4Parser.VOLATILE]:
                self.enterOuterAlt(localctx, 76)
                self.state = 3684
                self.match(CSharp4Parser.VOLATILE)

            elif token in [CSharp4Parser.WHILE]:
                self.enterOuterAlt(localctx, 77)
                self.state = 3685
                self.match(CSharp4Parser.WHILE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Class_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_bodyContext,0)


        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_baseContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_definition

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_definition"):
                listener.enterClass_definition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_definition"):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharp4Parser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3688
            self.match(CSharp4Parser.CLASS)
            self.state = 3689
            self.identifier()
            self.state = 3691
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3690
                self.type121_parameter_list()


            self.state = 3694
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3693
                self.class_base()


            self.state = 3697
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3696
                self.type121_parameter_constraints_clauses()


            self.state = 3699
            self.class_body()
            self.state = 3701
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3700
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Struct_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_bodyContext,0)


        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_interfacesContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_definition

        def enterRule(self, listener):
            if hasattr(listener, "enterStruct_definition"):
                listener.enterStruct_definition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStruct_definition"):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharp4Parser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3703
            self.match(CSharp4Parser.STRUCT)
            self.state = 3704
            self.identifier()
            self.state = 3706
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3705
                self.type121_parameter_list()


            self.state = 3709
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3708
                self.struct_interfaces()


            self.state = 3712
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3711
                self.type121_parameter_constraints_clauses()


            self.state = 3714
            self.struct_body()
            self.state = 3716
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3715
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharp4Parser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def interface_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_bodyContext,0)


        def variant_type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type121_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_baseContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_definition

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_definition"):
                listener.enterInterface_definition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_definition"):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharp4Parser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3718
            self.match(CSharp4Parser.INTERFACE)
            self.state = 3719
            self.identifier()
            self.state = 3721
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3720
                self.variant_type121_parameter_list()


            self.state = 3724
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3723
                self.interface_base()


            self.state = 3727
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3726
                self.type121_parameter_constraints_clauses()


            self.state = 3729
            self.interface_body()
            self.state = 3731
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3730
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Enum_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharp4Parser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_definition

        def enterRule(self, listener):
            if hasattr(listener, "enterEnum_definition"):
                listener.enterEnum_definition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnum_definition"):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharp4Parser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3733
            self.match(CSharp4Parser.ENUM)
            self.state = 3734
            self.identifier()
            self.state = 3736
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3735
                self.enum_base()


            self.state = 3738
            self.enum_body()
            self.state = 3740
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3739
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Delegate_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def return_type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def variant_type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type121_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_definition

        def enterRule(self, listener):
            if hasattr(listener, "enterDelegate_definition"):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelegate_definition"):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharp4Parser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3742
            self.match(CSharp4Parser.DELEGATE)
            self.state = 3743
            self.return_type121()
            self.state = 3744
            self.identifier()
            self.state = 3746
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3745
                self.variant_type121_parameter_list()


            self.state = 3748
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3750
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                self.state = 3749
                self.formal_parameter_list()


            self.state = 3752
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3754
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3753
                self.type121_parameter_constraints_clauses()


            self.state = 3756
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Event_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterEvent_declaration2"):
                listener.enterEvent_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvent_declaration2"):
                listener.exitEvent_declaration2(self)




    def event_declaration2(self):

        localctx = CSharp4Parser.Event_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_event_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3758
            self.match(CSharp4Parser.EVENT)
            self.state = 3759
            self.type121()
            self.state = 3768
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.state = 3760
                self.variable_declarators()
                self.state = 3761
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 3763
                self.member_name()
                self.state = 3764
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 3765
                self.event_accessor_declarations()
                self.state = 3766
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Field_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_field_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterField_declaration2"):
                listener.enterField_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitField_declaration2"):
                listener.exitField_declaration2(self)




    def field_declaration2(self):

        localctx = CSharp4Parser.Field_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_field_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3770
            self.variable_declarators()
            self.state = 3771
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Property_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterProperty_declaration2"):
                listener.enterProperty_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProperty_declaration2"):
                listener.exitProperty_declaration2(self)




    def property_declaration2(self):

        localctx = CSharp4Parser.Property_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_property_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3773
            self.member_name()
            self.state = 3774
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3775
            self.accessor_declarations()
            self.state = 3776
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constant_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharp4Parser.CONST, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constant_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterConstant_declaration2"):
                listener.enterConstant_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstant_declaration2"):
                listener.exitConstant_declaration2(self)




    def constant_declaration2(self):

        localctx = CSharp4Parser.Constant_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_constant_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3778
            self.match(CSharp4Parser.CONST)
            self.state = 3779
            self.type121()
            self.state = 3780
            self.constant_declarators()
            self.state = 3781
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Indexer_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexer_declaration2"):
                listener.enterIndexer_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexer_declaration2"):
                listener.exitIndexer_declaration2(self)




    def indexer_declaration2(self):

        localctx = CSharp4Parser.Indexer_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_indexer_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3783
            self.match(CSharp4Parser.THIS)
            self.state = 3784
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3785
            self.formal_parameter_list()
            self.state = 3786
            self.match(CSharp4Parser.CLOSE_BRACKET)
            self.state = 3787
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3788
            self.accessor_declarations()
            self.state = 3789
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destructor_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Destructor_definitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def destructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Destructor_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_destructor_definition

        def enterRule(self, listener):
            if hasattr(listener, "enterDestructor_definition"):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDestructor_definition"):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharp4Parser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3791
            self.match(CSharp4Parser.TILDE)
            self.state = 3792
            self.identifier()
            self.state = 3793
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3794
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3795
            self.destructor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Constructor_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharp4Parser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterConstructor_declaration2"):
                listener.enterConstructor_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstructor_declaration2"):
                listener.exitConstructor_declaration2(self)




    def constructor_declaration2(self):

        localctx = CSharp4Parser.Constructor_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_constructor_declaration2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3797
            self.identifier()
            self.state = 3798
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3800
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                self.state = 3799
                self.formal_parameter_list()


            self.state = 3802
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3804
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3803
                self.constructor_initializer()


            self.state = 3806
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_bodyContext,0)


        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_declaration2"):
                listener.enterMethod_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_declaration2"):
                listener.exitMethod_declaration2(self)




    def method_declaration2(self):

        localctx = CSharp4Parser.Method_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_method_declaration2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3808
            self.method_member_name()
            self.state = 3810
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3809
                self.type121_parameter_list()


            self.state = 3812
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3814
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                self.state = 3813
                self.formal_parameter_list()


            self.state = 3816
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3818
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3817
                self.type121_parameter_constraints_clauses()


            self.state = 3820
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_member_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_member_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def method_member_name2(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_member_name2Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_member_name

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_member_name"):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_member_name"):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharp4Parser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_method_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3822
            self.method_member_name2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_member_name2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_member_name2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharp4Parser.DOUBLE_COLON, 0)

        def type121_argument_list_opt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121_argument_list_optContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121_argument_list_optContext,i)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DOT)
            else:
                return self.getToken(CSharp4Parser.DOT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_member_name2

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_member_name2"):
                listener.enterMethod_member_name2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_member_name2"):
                listener.exitMethod_member_name2(self)




    def method_member_name2(self):

        localctx = CSharp4Parser.Method_member_name2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_method_member_name2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3829
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.state = 3824
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3825
                self.identifier()
                self.state = 3826
                self.match(CSharp4Parser.DOUBLE_COLON)
                self.state = 3827
                self.identifier()
                pass


            self.state = 3837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,403,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3831
                    self.type121_argument_list_opt()
                    self.state = 3832
                    self.match(CSharp4Parser.DOT)
                    self.state = 3833
                    self.identifier() 
                self.state = 3839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,403,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Operator_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharp4Parser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def type121(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type121Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type121Context,i)


        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def operator_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_bodyContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterOperator_declaration2"):
                listener.enterOperator_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperator_declaration2"):
                listener.exitOperator_declaration2(self)




    def operator_declaration2(self):

        localctx = CSharp4Parser.Operator_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_operator_declaration2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3840
            self.match(CSharp4Parser.OPERATOR)
            self.state = 3841
            self.overloadable_operator()
            self.state = 3842
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3843
            self.type121()
            self.state = 3844
            self.identifier()
            self.state = 3849
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 3845
                self.match(CSharp4Parser.COMMA)
                self.state = 3846
                self.type121()
                self.state = 3847
                self.identifier()


            self.state = 3851
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3852
            self.operator_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_method_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_method_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def type121_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type121_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_method_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_method_declaration2"):
                listener.enterInterface_method_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_method_declaration2"):
                listener.exitInterface_method_declaration2(self)




    def interface_method_declaration2(self):

        localctx = CSharp4Parser.Interface_method_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_interface_method_declaration2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3854
            self.identifier()
            self.state = 3856
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3855
                self.type121_parameter_list()


            self.state = 3858
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3860
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.OBJECT - 66)) | (1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.OUT - 66)) | (1 << (CSharp4Parser.PARAMS - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REF - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SBYTE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.SHORT - 66)) | (1 << (CSharp4Parser.STRING - 66)) | (1 << (CSharp4Parser.THIS - 66)) | (1 << (CSharp4Parser.UINT - 66)) | (1 << (CSharp4Parser.ULONG - 66)) | (1 << (CSharp4Parser.USHORT - 66)) | (1 << (CSharp4Parser.VOID - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)) | (1 << (CSharp4Parser.OPEN_BRACKET - 66)))) != 0):
                self.state = 3859
                self.formal_parameter_list()


            self.state = 3862
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3864
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3863
                self.type121_parameter_constraints_clauses()


            self.state = 3866
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_property_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_property_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_property_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_property_declaration2"):
                listener.enterInterface_property_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_property_declaration2"):
                listener.exitInterface_property_declaration2(self)




    def interface_property_declaration2(self):

        localctx = CSharp4Parser.Interface_property_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_interface_property_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3868
            self.identifier()
            self.state = 3869
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3870
            self.interface_accessors()
            self.state = 3871
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_event_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_event_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def type121(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121Context,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_event_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_event_declaration2"):
                listener.enterInterface_event_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_event_declaration2"):
                listener.exitInterface_event_declaration2(self)




    def interface_event_declaration2(self):

        localctx = CSharp4Parser.Interface_event_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_interface_event_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3873
            self.match(CSharp4Parser.EVENT)
            self.state = 3874
            self.type121()
            self.state = 3875
            self.identifier()
            self.state = 3876
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_indexer_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Interface_indexer_declaration2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_indexer_declaration2

        def enterRule(self, listener):
            if hasattr(listener, "enterInterface_indexer_declaration2"):
                listener.enterInterface_indexer_declaration2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterface_indexer_declaration2"):
                listener.exitInterface_indexer_declaration2(self)




    def interface_indexer_declaration2(self):

        localctx = CSharp4Parser.Interface_indexer_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_interface_indexer_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3878
            self.match(CSharp4Parser.THIS)
            self.state = 3879
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3880
            self.formal_parameter_list()
            self.state = 3881
            self.match(CSharp4Parser.CLOSE_BRACKET)
            self.state = 3882
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3883
            self.interface_accessors()
            self.state = 3884
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_access2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Member_access2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def type121_argument_list_opt(self):
            return self.getTypedRuleContext(CSharp4Parser.Type121_argument_list_optContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_access2

        def enterRule(self, listener):
            if hasattr(listener, "enterMember_access2"):
                listener.enterMember_access2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMember_access2"):
                listener.exitMember_access2(self)




    def member_access2(self):

        localctx = CSharp4Parser.Member_access2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_member_access2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3886
            self.match(CSharp4Parser.DOT)
            self.state = 3887
            self.identifier()
            self.state = 3888
            self.type121_argument_list_opt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_invocation2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Method_invocation2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_invocation2

        def enterRule(self, listener):
            if hasattr(listener, "enterMethod_invocation2"):
                listener.enterMethod_invocation2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethod_invocation2"):
                listener.exitMethod_invocation2(self)




    def method_invocation2(self):

        localctx = CSharp4Parser.Method_invocation2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_method_invocation2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3890
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3892
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 3891
                self.argument_list()


            self.state = 3894
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_creation_expression2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Object_creation_expression2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_object_creation_expression2

        def enterRule(self, listener):
            if hasattr(listener, "enterObject_creation_expression2"):
                listener.enterObject_creation_expression2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitObject_creation_expression2"):
                listener.exitObject_creation_expression2(self)




    def object_creation_expression2(self):

        localctx = CSharp4Parser.Object_creation_expression2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_object_creation_expression2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3896
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3898
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.T__0) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NEW - 64)) | (1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 3897
                self.argument_list()


            self.state = 3900
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3902
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACE:
                self.state = 3901
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type121OFContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CSharp4Parser.Type121OFContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type121OF

        def enterRule(self, listener):
            if hasattr(listener, "enterType121OF"):
                listener.enterType121OF(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType121OF"):
                listener.exitType121OF(self)




    def type121OF(self):

        localctx = CSharp4Parser.Type121OFContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_type121OF)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3904
            self.match(CSharp4Parser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[377] = self.right_arrow_sempred
        self._predicates[378] = self.right_shift_sempred
        self._predicates[379] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx, predIndex):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx, predIndex):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         




